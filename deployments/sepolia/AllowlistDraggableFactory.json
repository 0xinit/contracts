{
  "address": "0x8fb463D5a601b02Ce3Fb4B93253a10fe6f9105A3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Ownable_NotOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract FactoryManager",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "FactoryManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "terms",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "allowlist",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "draggable",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "numberOfShares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quorumDrag",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quorumMigration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votePeriod",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenConfig",
          "name": "tokenConfig",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Permit",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_salt",
          "type": "string"
        }
      ],
      "name": "createAllowlistDraggable",
      "outputs": [
        {
          "internalType": "contract IERC20Permit",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "contract FactoryManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract FactoryManager",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa087554d67bb4ec9642c5e9535e4087f4a39c9c69ffafe46cffaca65728acd92",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x39E5351E6CE3c4B19B8b0a2F5C82c511782457BE",
    "contractAddress": null,
    "transactionIndex": 73,
    "gasUsed": "3481775",
    "logsBloom": "0x
    "blockHash": "0x8880b1ac770f2d969426d341bbed250a5519d27df0f5d16300dafc826c179bdb",
    "transactionHash": "0xa087554d67bb4ec9642c5e9535e4087f4a39c9c69ffafe46cffaca65728acd92",
    "logs": [
      {
        "transactionIndex": 73,
        "blockNumber": 6367376,
        "transactionHash": "0xa087554d67bb4ec9642c5e9535e4087f4a39c9c69ffafe46cffaca65728acd92",
        "address": "0x8fb463D5a601b02Ce3Fb4B93253a10fe6f9105A3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000039e5351e6ce3c4b19b8b0a2f5c82c511782457be"
        ],
        "data": "0x",
        "logIndex": 162,
        "blockHash": "0x8880b1ac770f2d969426d341bbed250a5519d27df0f5d16300dafc826c179bdb"
      }
    ],
    "blockNumber": 6367376,
    "cumulativeGasUsed": "16543066",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x39E5351E6CE3c4B19B8b0a2F5C82c511782457BE"
  ],
  "numDeployments": 2,
  "solcInputHash": "9c20d6d2cdb3bf3f1a45f6b1e6057f84",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Ownable_NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract FactoryManager\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"FactoryManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"terms\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"allowlist\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"draggable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numberOfShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorumDrag\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorumMigration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votePeriod\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenConfig\",\"name\":\"tokenConfig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Permit\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_salt\",\"type\":\"string\"}],\"name\":\"createAllowlistDraggable\",\"outputs\":[{\"internalType\":\"contract IERC20Permit\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract FactoryManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FactoryManager\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"rube \",\"details\":\"Inherits from Ownable for access control\",\"events\":{\"FactoryManagerUpdated(address)\":{\"params\":{\"manager\":\"The new factory manager address\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_owner\":\"The address that will be set as the owner of the contract\"}},\"createAllowlistDraggable((string,string,string,bool,bool,uint256,uint256,uint256,uint256),address,address,string)\":{\"params\":{\"token\":\"The address of the ERC20Permit token to be used\",\"tokenConfig\":\"The configuration for the new token\",\"tokenOwner\":\"The address that will own the new token\"},\"returns\":{\"_0\":\"IERC20Permit The address of the newly created AllowlistDraggableShares token\"}},\"setManager(address)\":{\"details\":\"Can only be called by the contract owner\",\"params\":{\"_manager\":\"The address of the new factory manager\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Allowlist draggable factory\",\"version\":1},\"userdoc\":{\"events\":{\"FactoryManagerUpdated(address)\":{\"notice\":\"Emitted when the factory manager is updated\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructs a new AllowlistDraggableFactory\"},\"createAllowlistDraggable((string,string,string,bool,bool,uint256,uint256,uint256,uint256),address,address,string)\":{\"notice\":\"Creates a new AllowlistDraggableShares token\"},\"manager()\":{\"notice\":\"The factory manager contract\"},\"setManager(address)\":{\"notice\":\"Sets a new factory manager\"}},\"notice\":\"This contract is responsible for creating new AllowlistDraggableShares tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/utils/factory/AllowlistDraggableFactory.sol\":\"AllowlistDraggableFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"src/ERC20/ERC20Allowlistable.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"./ERC20Flaggable.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\n\\n/**\\n * A very flexible and efficient form to subject ERC-20 tokens to an allowlisting.\\n * See ../../doc/allowlist.md for more information.\\n */\\nabstract contract ERC20Allowlistable is ERC20Flaggable, Ownable {\\n\\n  uint8 private constant TYPE_DEFAULT = 0x0;\\n  uint8 private constant TYPE_ALLOWLISTED = 0x1;\\n  uint8 private constant TYPE_FORBIDDEN = 0x2;\\n  uint8 private constant TYPE_POWERLISTED = 0x4;\\n  // I think TYPE_POWERLISTED should have been 0x3. :) But MOP was deployed like this so we keep it. Does not hurt.\\n\\n  uint8 private constant FLAG_INDEX_ALLOWLIST = 20;\\n  uint8 private constant FLAG_INDEX_FORBIDDEN = 21;\\n  uint8 private constant FLAG_INDEX_POWERLIST = 22;\\n\\n  event AddressTypeUpdate(address indexed account, uint8 addressType);\\n\\n  /// Receiver has flag forbidden.\\n  /// @param receiver the address of the forbidden receiver.\\n  error Allowlist_ReceiverIsForbidden(address receiver);\\n  /// Sender has flag forbidden.\\n  /// @param sender the address of the forbidden sender.\\n  error Allowlist_SenderIsForbidden(address sender);\\n  /// Receiver has no allowlist flag.\\n  /// @param receiver the address which isn't allowlisted.\\n  error Allowlist_ReceiverNotAllowlisted(address receiver);\\n\\n  bool public restrictTransfers;\\n\\n  constructor(){\\n    setApplicableInternal(true);\\n  }\\n\\n  /**\\n   * Configures whether the allowlisting is applied.\\n   * Also sets the powerlist and allowlist flags on the null address accordingly.\\n   * It is recommended to also deactivate the powerlist flag on other addresses.\\n   */\\n  function setApplicable(bool transferRestrictionsApplicable) external onlyOwner {\\n    setApplicableInternal(transferRestrictionsApplicable);\\n  }\\n\\n  function setApplicableInternal(bool transferRestrictionsApplicable) internal {\\n    restrictTransfers = transferRestrictionsApplicable;\\n    // if transfer restrictions are applied, we guess that should also be the case for newly minted tokens\\n    // if the admin disagrees, it is still possible to change the type of the null address\\n    if (transferRestrictionsApplicable){\\n      setTypeInternal(address(0x0), TYPE_POWERLISTED);\\n    } else {\\n      setTypeInternal(address(0x0), TYPE_DEFAULT);\\n    }\\n  }\\n\\n  function setType(address account, uint8 typeNumber) public onlyOwner {\\n    setTypeInternal(account, typeNumber);\\n  }\\n\\n  /**\\n   * If TYPE_DEFAULT all flags are set to 0\\n   */\\n  function setTypeInternal(address account, uint8 typeNumber) internal {\\n    setFlag(account, FLAG_INDEX_ALLOWLIST, typeNumber == TYPE_ALLOWLISTED);\\n    setFlag(account, FLAG_INDEX_FORBIDDEN, typeNumber == TYPE_FORBIDDEN);\\n    setFlag(account, FLAG_INDEX_POWERLIST, typeNumber == TYPE_POWERLISTED);\\n    emit AddressTypeUpdate(account, typeNumber);\\n  }\\n\\n  function setType(address[] calldata addressesToAdd, uint8 value) public onlyOwner {\\n    for (uint i=0; i<addressesToAdd.length; i++){\\n      setType(addressesToAdd[i], value);\\n    }\\n  }\\n\\n  /**\\n   * If true, this address is allowlisted and can only transfer tokens to other allowlisted addresses.\\n   */\\n  function canReceiveFromAnyone(address account) public view returns (bool) {\\n    return hasFlagInternal(account, FLAG_INDEX_ALLOWLIST) || hasFlagInternal(account, FLAG_INDEX_POWERLIST);\\n  }\\n\\n  /**\\n   * If true, this address can only transfer tokens to allowlisted addresses and not receive from anyone.\\n   */\\n  function isForbidden(address account) public view returns (bool){\\n    return hasFlagInternal(account, FLAG_INDEX_FORBIDDEN);\\n  }\\n\\n  /**\\n   * If true, this address can automatically allowlist target addresses if necessary.\\n   */\\n  function isPowerlisted(address account) public view returns (bool) {\\n    return hasFlagInternal(account, FLAG_INDEX_POWERLIST);\\n  }\\n\\n  function _beforeTokenTransfer(address from, address to, uint256 amount) override virtual internal {\\n    super._beforeTokenTransfer(from, to, amount);\\n    // empty block for gas saving fall through\\n    // solhint-disable-next-line no-empty-blocks\\n    if (canReceiveFromAnyone(to)){\\n      // ok, transfers to allowlisted addresses are always allowed\\n    } else if (isForbidden(to)){\\n      // Target is forbidden, but maybe restrictions have been removed and we can clean the flag\\n      if (restrictTransfers) {\\n        revert Allowlist_ReceiverIsForbidden(to);\\n      }\\n      setFlag(to, FLAG_INDEX_FORBIDDEN, false);\\n    } else {\\n      if (isPowerlisted(from)){\\n        // it is not allowlisted, but we can make it so\\n        // we know the recipient is neither forbidden, allowlisted or powerlisted, so we can set flag directly\\n        setFlag(to, FLAG_INDEX_ALLOWLIST, true);\\n        emit AddressTypeUpdate(to, TYPE_ALLOWLISTED);\\n      }\\n      // if we made it to here, the target must be a free address and we are not powerlisted\\n      else if (hasFlagInternal(from, FLAG_INDEX_ALLOWLIST)){\\n        // We cannot send to free addresses, but maybe the restrictions have been removed and we can clean the flag?\\n        if (restrictTransfers) {\\n          revert Allowlist_ReceiverNotAllowlisted(to);\\n        }\\n        setFlag(from, FLAG_INDEX_ALLOWLIST, false);\\n      } else if (isForbidden(from)){\\n        if (restrictTransfers) {\\n          revert Allowlist_SenderIsForbidden(from);\\n        }\\n        setFlag(from, FLAG_INDEX_FORBIDDEN, false);\\n      }\\n    }\\n  }\\n\\n}\\n\",\"keccak256\":\"0xfbc2956ca01b3653efbe04842d3dbbe4b4d033e8e71f0173a35eacbe21768011\",\"license\":\"LicenseRef-Aktionariat\"},\"src/ERC20/ERC20Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n/// @title Standard ERC20 Errors\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n///  https://eips.ethereum.org/EIPS/eip-6093\\ninterface ERC20Errors {\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n    error ERC20InvalidSender(address sender);\\n    error ERC20InvalidReceiver(address receiver);\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n    error ERC20InvalidApprover(address approver);\\n    error ERC20InvalidSpender(address spender);\\n}\",\"keccak256\":\"0x16e67c149b323aa08a12378b1697305e12dd48a9997549d56f140e26317e6c14\",\"license\":\"MIT\"},\"src/ERC20/ERC20Flaggable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied and adjusted from OpenZeppelin\\n// Adjustments:\\n// - modifications to support ERC-677\\n// - removed unnecessary require statements\\n// - removed GSN Context\\n// - upgraded to 0.8 to drop SafeMath\\n// - let name() and symbol() be implemented by subclass\\n// - infinite allowance support, with 2^255 and above considered infinite\\n// - use upper 32 bits of balance for flags\\n// - add a global settings variable\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./ERC20Errors.sol\\\";\\nimport \\\"./IERC677Receiver.sol\\\";\\n/**\\n * @dev Implementation of the `IERC20` interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using `_mint`.\\n * For a generic mechanism see `ERC20Mintable`.\\n *\\n * *For a detailed writeup see our guide [How to implement supply\\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See `IERC20.approve`.\\n */\\n\\nabstract contract ERC20Flaggable is IERC20, ERC20Errors {\\n\\n    // as Documented in /doc/infiniteallowance.md\\n    // 0x8000000000000000000000000000000000000000000000000000000000000000\\n    uint256 constant private INFINITE_ALLOWANCE = 2**255;\\n\\n    uint256 private constant FLAGGING_MASK = 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000;\\n\\n    // Documentation of flags used by subclasses:\\n    // NOTE: flags denote the bit number that is being used and must be smaller than 32\\n    // ERC20Draggable: uint8 private constant FLAG_INDEX_VOTED = 1;\\n    // ERC20Recoverable: uint8 private constant FLAG_INDEX_CLAIM_PRESENT = 10;\\n    // ERCAllowlistable: uint8 private constant FLAG_INDEX_ALLOWLIST = 20;\\n    // ERCAllowlistable: uint8 private constant FLAG_INDEX_FORBIDDEN = 21;\\n    // ERCAllowlistable: uint8 private constant FLAG_INDEX_POWERLIST = 22;\\n\\n    mapping (address => uint256) private _balances; // upper 32 bits reserved for flags\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    uint8 public override decimals;\\n\\n    event NameChanged(string name, string symbol);\\n\\n    /// Overflow on minting, transfer. \\n    /// @param receiver The address were the balance overflows. \\n    /// @param balance The current balance of the receiver. \\n    /// @param amount The amount added, which result in the overflow. \\n    error ERC20BalanceOverflow(address receiver, uint256 balance, uint256 amount);\\n\\n    constructor(uint8 _decimals) {\\n        decimals = _decimals;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.totalSupply`.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.balanceOf`.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return uint224 (_balances [account]);\\n    }\\n\\n    function hasFlag(address account, uint8 number) external view returns (bool) {\\n        return hasFlagInternal(account, number);\\n    }\\n\\n    function setFlag(address account, uint8 index, bool value) internal {\\n        uint256 flagMask = 1 << (index + 224);\\n        uint256 balance = _balances [account];\\n        if ((balance & flagMask == flagMask) != value) {\\n            _balances [account] = balance ^ flagMask;\\n        }\\n    }\\n\\n    function hasFlagInternal(address account, uint8 number) internal view returns (bool) {\\n        uint256 flag = 0x1 << (number + 224);\\n        return _balances[account] & flag == flag;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.transfer`.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.allowance`.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See `IERC20.approve`.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) external override returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.transferFrom`.\\n     *\\n     * Emits an `Approval` event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of `ERC20`;\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `value`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        uint256 currentAllowance = allowance(sender, msg.sender);\\n        if (currentAllowance < INFINITE_ALLOWANCE){\\n            // Only decrease the allowance if it was not set to 'infinite'\\n            // Documented in /doc/infiniteallowance.md\\n            _allowances[sender][msg.sender] = currentAllowance - amount;\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to `transfer`, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a `Transfer` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(sender, recipient, amount);\\n        decreaseBalance(sender, amount);\\n        increaseBalance(recipient, amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    // ERC-677 functionality, can be useful for swapping and wrapping tokens\\n    function transferAndCall(address recipient, uint amount, bytes calldata data) external virtual returns (bool) {\\n        return transfer (recipient, amount) \\n            && IERC677Receiver (recipient).onTokenTransfer (msg.sender, amount, data);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a `Transfer` event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address recipient, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(address(0), recipient, amount);\\n        _totalSupply += amount;\\n        increaseBalance(recipient, amount);\\n        emit Transfer(address(0), recipient, amount);\\n    }\\n\\n    function increaseBalance(address recipient, uint256 amount) private {\\n        if (recipient == address(0x0)) {\\n            revert ERC20InvalidReceiver(recipient); //use burn instead\\n        }\\n        uint256 oldBalance = _balances[recipient];\\n        uint256 newBalance = oldBalance + amount;\\n        if (oldBalance & FLAGGING_MASK != newBalance & FLAGGING_MASK) {\\n            revert ERC20BalanceOverflow(recipient, oldBalance, amount);\\n        }\\n        _balances[recipient] = newBalance;\\n    }\\n\\n     /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a `Transfer` event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _totalSupply -= amount;\\n        decreaseBalance(account, amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function decreaseBalance(address sender, uint256 amount) private {\\n        uint256 oldBalance = _balances[sender];\\n        uint256 newBalance = oldBalance - amount;\\n        if (oldBalance & FLAGGING_MASK != newBalance & FLAGGING_MASK) {\\n            revert ERC20InsufficientBalance(sender, balanceOf(sender), amount);\\n        }\\n        _balances[sender] = newBalance;\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an `Approval` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n     // solhint-disable-next-line no-empty-blocks\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) virtual internal {\\n        // intentionally left blank\\n    }\\n\\n    /**\\n     * Checks if msg.sender is an authorized address.\\n     * @param validSender The authorized address.\\n     */\\n    function _checkSender(address validSender) internal view {\\n        if (msg.sender != validSender) {\\n            revert ERC20InvalidSender(msg.sender);\\n        }\\n    }\\n\\n}\",\"keccak256\":\"0x89c6b8556441955b2c2ab4a79c51839f9d346ed6110397ca4f5ca06d29ee31b6\",\"license\":\"MIT\"},\"src/ERC20/ERC20Permit2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport \\\"./ERC20Flaggable.sol\\\";\\nimport \\\"../utils/Permit2Hub.sol\\\";\\n\\n/// @title ERC20Permit2\\n/// @dev This abstract contract extends the ERC20Flaggable contract and introduces the Permit2Hub.\\nabstract contract ERC20Permit2 is ERC20Flaggable {\\n    \\n    /// @dev The Permit2Hub contract instance.\\n    Permit2Hub public immutable permit2Hub;\\n\\n    /// @dev Initializes the ERC20Permit2 contract.\\n    /// @param _permit2Hub The address of the Permit2Hub contract.\\n    constructor(Permit2Hub _permit2Hub) {\\n        permit2Hub = _permit2Hub;\\n    }\\n\\n    /// @inheritdoc ERC20Flaggable\\n    function allowance(address owner, address spender) public view virtual override(ERC20Flaggable) returns (uint256) {\\n        if (permit2Hub.isPermit2Enabled(owner, spender)) \\n            return type(uint256).max;  // If permit is enabled, return the maximum value of uint256\\n        else \\n            return super.allowance(owner, spender);  // Otherwise, call the parent(ERC20Flaggable) allowance function\\n    }\\n}\\n\",\"keccak256\":\"0x26175bcd9fa0bd3bc257b08c50f8e8d5451d9d9cca1cd6fe42a93dd3a36ac784\",\"license\":\"MIT\"},\"src/ERC20/ERC20PermitLight.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied from https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol\\n// and modified it.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20Flaggable.sol\\\";\\nimport \\\"./IERC20Permit.sol\\\";\\nabstract contract ERC20PermitLight is ERC20Flaggable, IERC20Permit {\\n\\n   /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => uint256) public override nonces;\\n\\n  /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public override {\\n        if (deadline < block.timestamp) {\\n            revert Permit_DeadlineExpired(deadline, block.timestamp);\\n        }\\n\\n        unchecked { // unchecked to save a little gas with the nonce increment...\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"),\\n                                bytes32(0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            if (recoveredAddress == address(0) || recoveredAddress != owner) {\\n                revert Permit_InvalidSigner(recoveredAddress);\\n            }\\n            _approve(recoveredAddress, spender, value);\\n        }\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view override returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    //keccak256(\\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\");\\n                    bytes32(0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n}\",\"keccak256\":\"0x408c5d31d84153fc963bb08cd1f10df1b2c1acc186497f348492c5a60b330ff0\",\"license\":\"MIT\"},\"src/ERC20/IERC20.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: MIT\\n*\\n* Copyright (c) 2016-2019 zOS Global Limited\\n*\\n*/\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n\\n    // Optional functions\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\",\"keccak256\":\"0x2224189bcdeb28cbadfdb8d126c278df60ec39875c7929e7ffa9e2055cded960\",\"license\":\"MIT\"},\"src/ERC20/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit is IERC20 {\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n\\t//////////////////////////////////////////////////////////////*/\\n    /// Block timestamp must to be before deadline.\\n    /// @param deadline The deadline of the permit.\\n    /// @param blockTimestamp The timestamp of the execution block.\\n    error Permit_DeadlineExpired(uint256 deadline, uint256 blockTimestamp);\\n    /// Recovered address must be owner and not zero address.\\n    /// @param signerAddress The recovered signer address.\\n    error Permit_InvalidSigner(address signerAddress);\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\",\"keccak256\":\"0x9c6c4c49deffc8176f13b34150dd580526b45dd85ce1b71fe2ed340ff0489ebd\",\"license\":\"MIT\"},\"src/ERC20/IERC677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Given that development on ERC 677 has stalled, we should consider supporting EIP 1363: https://eips.ethereum.org/EIPS/eip-1363\\ninterface IERC677Receiver {\\n\\n    error IERC677_OnTokenTransferFailed();\\n    \\n    function onTokenTransfer(address from, uint256 amount, bytes calldata data) external returns (bool);\\n\\n}\",\"keccak256\":\"0xcca2937791e78a77e83f586e21a84fcc46fa910062f929145bf4159ef3f9d73c\",\"license\":\"MIT\"},\"src/brokerbot/IBrokerbot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"../ERC20/IERC20Permit.sol\\\";\\n\\ninterface IBrokerbot {\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n  //////////////////////////////////////////////////////////////*/\\n  error Brokerbot_BuyingDisabled();\\n  error Brokerbot_SellingDisabled();\\n  /// Sender(msg.sender) has to be incoming token or paymenthub.\\n  /// @param sender The msg.sender.\\n  error Brokerbot_InvalidSender(address sender);\\n  /// target.call() wasn't successful.\\n  /// @param target The receiver of the Eth.\\n  /// @param amount The withdraw amount.\\n  error Brokerbot_WithdrawFailed(address target, uint256 amount);\\n  /// Sender(msg.sender) needs to be owner or paymenthub.\\n  /// @param sender The msg.sender.\\n  error Brokerbot_NotAuthorized(address sender);\\n\\n  function paymenthub() external view returns (address);\\n\\n  function base() external view returns (IERC20);\\n\\n  function token() external view returns (IERC20Permit);\\n  \\n  function settings() external view returns (uint256);\\n\\n  // @return The amount of shares bought on buying or how much in the base currency is transfered on selling\\n  function processIncoming(IERC20 token_, address from, uint256 amount, bytes calldata ref) external payable returns (uint256);\\n\\n  function getBuyPrice(uint256 shares) external view returns (uint256);\\n\\n  function getSellPrice(uint256 shares) external view returns (uint256);\\n\\n}\",\"keccak256\":\"0xb41ad02c5b587309ecd6c84d4677d457e4cdb9f993447e97a605b10ec24de7b5\",\"license\":\"MIT\"},\"src/brokerbot/IUniswapV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied from \\n// https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoter.sol\\n// https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/ISwapRouter.sol\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\n\\ninterface IQuoter {\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountOut The desired output amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountIn The desired input amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountOut);\\n    \\n    // solhint-disable-next-line func-name-mixedcase\\n    function WETH9() external view returns (address);\\n}\\n\\ninterface ISwapRouter {\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n    \\n    function refundETH() external payable;\\n}\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xd1fe06efa70710c24624abbfe0ed5ab69a47e9d3ec70734ea6e813711ff69784\",\"license\":\"MIT\"},\"src/brokerbot/PaymentHub.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"../ERC20/IERC20Permit.sol\\\";\\nimport \\\"./IUniswapV3.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"./IBrokerbot.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"../utils/SafeERC20.sol\\\";\\n\\n/**\\n * A hub for payments. This allows tokens that do not support ERC 677 to enjoy similar functionality,\\n * namely interacting with a token-handling smart contract in one transaction, without having to set an allowance first.\\n * Instead, an allowance needs to be set only once, namely for this contract.\\n * Further, it supports automatic conversion from Ether to the payment currency through Uniswap or the reception of Ether\\n * using the current exchange rate as found in the chainlink oracle.\\n */\\ncontract PaymentHub {\\n\\n    using SafeERC20 for IERC20;\\n\\n    // Version history\\n    // Version 4: added path to pay with any ecr20 via uniswap\\n    // Version 5: added sell via permit\\n    // Version 6: added transferEther function\\n    // Version 7: added sell against eth and erc20, version, add permitinfo/swapinfo struct\\n    // Version 8: use SafeERC20 for transfers\\n    // Version 9: change payFromEther to include a swap path\\n    uint256 public constant VERSION = 9;\\n\\n    uint256 private constant KEEP_ETHER = 0x4; // copied from brokerbot\\n\\n    uint256 private constant DENOMINATOR = 1e8;\\n    address private constant XCHF_TOKEN = 0xB4272071eCAdd69d933AdcD19cA99fe80664fc08;\\n    address private constant ZCHF_TOKEN = 0xB58E61C3098d85632Df34EecfB899A1Ed80921cB;\\n\\n    IQuoter private immutable uniswapQuoter;\\n    ISwapRouter private immutable uniswapRouter;\\n    AggregatorV3Interface internal immutable priceFeedCHFUSD;\\n    AggregatorV3Interface internal immutable priceFeedETHUSD;\\n\\n    address public trustedForwarder;\\n\\n    struct PermitInfo {\\n        uint256 exFee;\\n        uint256 deadline;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    // event to when new forwarder is set\\n    event ForwarderChanged(address indexed _oldForwarder, address indexed _newForwarder);\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n    //////////////////////////////////////////////////////////////*/\\n    /// Failguard when an erc20 transfer returns false. \\n    error PaymentHub_TransferFailed();\\n    /// Sender not trusted.\\n    /// @param sender The msg.sender of this transaction.\\n    error PaymentHub_InvalidSender(address sender);\\n    /// swap with less base token as required.\\n    /// @param amountBase Required amount.\\n    /// @param swappedAmount Swapped amount.\\n    error PaymentHub_SwapError(uint256 amountBase, uint256 swappedAmount);\\n\\n    constructor(address _trustedForwarder, IQuoter _quoter, ISwapRouter swapRouter, AggregatorV3Interface _aggregatorCHFUSD, AggregatorV3Interface _aggregatorETHUSD) {\\n        trustedForwarder = _trustedForwarder;\\n        uniswapQuoter = _quoter;\\n        uniswapRouter = swapRouter;\\n        priceFeedCHFUSD = _aggregatorCHFUSD;\\n        priceFeedETHUSD = _aggregatorETHUSD;\\n    }\\n\\n    modifier onlySellerAndForwarder(address seller) {\\n        if (msg.sender != trustedForwarder && msg.sender != seller) {\\n            revert PaymentHub_InvalidSender(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyForwarder() {\\n        if (msg.sender != trustedForwarder) {\\n            revert PaymentHub_InvalidSender(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Change the trusted forwarder.\\n     * @param newForwarder The new trusted forwarder.\\n     */\\n     function changeForwarder(address newForwarder) external onlyForwarder {\\n        trustedForwarder = newForwarder;\\n        emit ForwarderChanged(msg.sender, newForwarder);\\n    }\\n\\n    /**  \\n     * Get price in ERC20\\n     * This is the method that the Brokerbot widget should use to quote the price to the user.\\n     * @param amountInBase The amount of the base currency for the exact output.\\n     * @param path The encoded path of the swap from erc20 to base.\\n     * @return amount quoted to pay\\n     */\\n    function getPriceInERC20(uint256 amountInBase, bytes memory path) public returns (uint256) {\\n        return getPriceERC20(amountInBase, path, true);\\n    }\\n    \\n    /**\\n     * @notice Get price for given amount and path swapped via uniswap. \\n     * @param amount The exact amount which you want get out (exactOutput) or you put in (exactInput).\\n     * @param path The path of the swap (inreverse order for exactOutput).\\n     * @param exactOutput True if exactOutput should be used or false if exactInput should be used.\\n     */\\n    function getPriceERC20(uint256 amount, bytes memory path, bool exactOutput) public returns (uint256) {\\n        if (exactOutput) {\\n            return uniswapQuoter.quoteExactOutput(\\n                path,\\n                amount\\n            );\\n        } else {\\n            return uniswapQuoter.quoteExactInput(\\n                path,\\n                amount\\n            );\\n        }\\n    }\\n\\n    /**\\n     * Get price in Ether depding on brokerbot setting.\\n     * If keep ETH is set price is from oracle.\\n     * This is the method that the Brokerbot widget should use to quote the price to the user.\\n     * @return The price in wei.\\n     */\\n    function getPriceInEther(uint256 amountInBase, IBrokerbot brokerBot, bytes calldata path) public returns (uint256) {\\n        if ((address(brokerBot) != address(0)) && hasSettingKeepEther(brokerBot)) {\\n            return getPriceInEtherFromOracle(amountInBase, IBrokerbot(brokerBot).base());\\n        } else {\\n            return getPriceERC20(amountInBase, path, true);\\n        }\\n    }\\n\\n    /**\\n     * Price in ETH with 18 decimals\\n     */\\n    function getPriceInEtherFromOracle(uint256 amountInBase, IERC20 base) public view returns (uint256) {\\n        if(address(base) == XCHF_TOKEN || address(base) == ZCHF_TOKEN) {\\n            return getLatestPriceCHFUSD() * amountInBase / getLatestPriceETHUSD();\\n        } else {\\n            return amountInBase * DENOMINATOR / getLatestPriceETHUSD();\\n        }\\n    }\\n\\n    /**\\n     * Returns the latest price of eth/usd pair from chainlink with 8 decimals\\n     */\\n    function getLatestPriceETHUSD() public view returns (uint256) {\\n        (, int256 price, , , ) = priceFeedETHUSD.latestRoundData();\\n        return uint256(price);\\n    }\\n\\n    /**\\n     * Returns the latest price of chf/usd pair from chainlink with 8 decimals\\n     */\\n    function getLatestPriceCHFUSD() public view returns (uint256) {\\n        (, int256 price, , , ) = priceFeedCHFUSD.latestRoundData();\\n        return uint256(price);\\n    }\\n\\n    /**\\n     * Convenience method to swap ether into base and pay a target address\\n     */\\n    function payFromEther(address recipient, uint256 amountInBase, bytes memory path) public payable returns (uint256 amountIn) {\\n        ISwapRouter swapRouter = uniswapRouter;\\n        // The parameter path is encoded as (tokenOut, fee, tokenIn/tokenOut, fee, tokenIn)\\n        ISwapRouter.ExactOutputParams memory params =\\n            ISwapRouter.ExactOutputParams({\\n                path: path,\\n                recipient: recipient,\\n                // solhint-disable-next-line not-rely-on-time\\n                deadline: block.timestamp,\\n                amountOut: amountInBase,\\n                amountInMaximum: msg.value\\n            });\\n\\n        // Executes the swap, returning the amountIn actually spent.\\n        amountIn = swapRouter.exactOutput{value: msg.value}(params);\\n\\n        // For exact output swaps, the amountInMaximum may not have all been spent.\\n        // If the actual amount spent (amountIn) is less than the specified maximum amount, we must refund the msg.sender and approve the swapRouter to spend 0.\\n        if (amountIn < msg.value) {\\n            swapRouter.refundETH();\\n            (bool success, ) = msg.sender.call{value:msg.value - amountIn}(\\\"\\\"); // return change\\n            if (!success) {\\n                revert PaymentHub_TransferFailed();\\n            }\\n        }\\n    }\\n\\n    /// @dev The calling address must approve this contract to spend its ERC20 for this function to succeed. As the amount of input ERC20 is variable,\\n    /// the calling address will need to approve for a slightly higher or infinit amount, anticipating some variance.\\n    /// @param amountOut The desired amount of baseCurrency.\\n    /// @param amountInMaximum The maximum amount of ERC20 willing to be swapped for the specified amountOut of baseCurrency.\\n    /// @param erc20In The address of the erc20 token to pay with.\\n    /// @param path The encoded path of the swap from erc20 to base.\\n    /// @param recipient The reciving address - brokerbot.\\n    /// @return amountIn The amountIn of ERC20 actually spent to receive the desired amountOut.\\n    function payFromERC20(uint256 amountOut, uint256 amountInMaximum, address erc20In, bytes memory path, address recipient) public returns (uint256 amountIn) {\\n        ISwapRouter swapRouter = uniswapRouter;\\n        // Transfer the specified `amountInMaximum` to this contract.\\n        IERC20(erc20In).safeTransferFrom(msg.sender, address(this), amountInMaximum);\\n\\n        // The parameter path is encoded as (tokenOut, fee, tokenIn/tokenOut, fee, tokenIn)\\n        ISwapRouter.ExactOutputParams memory params =\\n            ISwapRouter.ExactOutputParams({\\n                path: path,\\n                recipient: recipient,\\n                // solhint-disable-next-line not-rely-on-time\\n                deadline: block.timestamp,\\n                amountOut: amountOut,\\n                amountInMaximum: amountInMaximum\\n            });\\n\\n        // Executes the swap, returning the amountIn actually spent.\\n        amountIn = swapRouter.exactOutput(params);\\n\\n        // If the swap did not require the full amountInMaximum to achieve the exact amountOut then we refund msg.sender and approve the router to spend 0.\\n        if (amountIn < amountInMaximum) {\\n            IERC20(erc20In).safeTransfer(msg.sender, amountInMaximum - amountIn);\\n        }\\n    }\\n\\n    ///This function appoves infinite allowance for Uniswap, this is safe as the paymenthub should never hold any token (see also recover() ).\\n    ///@dev This function needs to be called before using the PaymentHub the first time with a new ERC20 token.\\n    ///@param erc20In The erc20 addresse to approve.\\n    function approveERC20(address erc20In) external {\\n        IERC20(erc20In).approve(address(uniswapRouter), type(uint256).max);\\n    }\\n\\n    function multiPay(IERC20 token, address[] calldata recipients, uint256[] calldata amounts) public {\\n        for (uint i=0; i<recipients.length; i++) {\\n            IERC20(token).safeTransferFrom(msg.sender, recipients[i], amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * Can (at least in theory) save some gas as the sender balance only is touched in one transaction.\\n     */\\n    function multiPayAndNotify(IERC20 token, IBrokerbot[] calldata brokerbots, uint256[] calldata amounts, bytes calldata ref) external {\\n        for (uint i=0; i<brokerbots.length; i++) {\\n            payAndNotify(token, brokerbots[i], amounts[i], ref);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows to make a base currency payment from the sender to the brokerbot, given an allowance to this contract.\\n     * @dev Equivalent to xchf.transferAndCall(brokerbot, amountInBase)\\n     * @param brokerbot The brokerbot to pay and receive the shares from.\\n     * @param amountInBase The amount of base currency used to buy shares.\\n     * @param ref The reference data blob.\\n     * @return The amount of shares bought\\n     */\\n    function payAndNotify(IBrokerbot brokerbot, uint256 amountInBase, bytes calldata ref) external returns (uint256) {\\n        return payAndNotify(brokerbot.base(), brokerbot, amountInBase, ref);\\n    }\\n\\n    function payAndNotify(IERC20 token, IBrokerbot brokerbot, uint256 amount, bytes calldata ref) public returns (uint256) {\\n        token.safeTransferFrom(msg.sender, address(brokerbot), amount);\\n        return brokerbot.processIncoming(token, msg.sender, amount, ref);\\n    }\\n\\n    /**\\n     * @notice Pay with Ether to buy shares.\\n     * @param brokerbot The brokerbot to pay and receive the shares from.\\n     * @param amountBase The amount of base currency used to buy shares.\\n     * @param ref The reference data blob.\\n     * @param path The Uniswap path from ETH to base currency (uses exactOuput => reverse order)\\n     * @return priceInEther The amount of Ether spent.\\n     * @return sharesOut The amount of shares bought.\\n     */\\n    function payFromEtherAndNotify(IBrokerbot brokerbot, uint256 amountBase, bytes calldata ref, bytes memory path) external payable returns (uint256 priceInEther, uint256 sharesOut) {\\n        IERC20 base = brokerbot.base();\\n        // Check if the brokerbot has setting to keep ETH\\n        if (hasSettingKeepEther(brokerbot)) {\\n            priceInEther = getPriceInEtherFromOracle(amountBase, base);\\n            sharesOut = brokerbot.processIncoming{value: priceInEther}(base, msg.sender, amountBase, ref);\\n\\n            // Pay back ETH that was overpaid\\n            if (priceInEther < msg.value) {\\n                (bool success, ) = msg.sender.call{value:msg.value - priceInEther}(\\\"\\\"); // return change\\n                if (!success) {\\n                    revert PaymentHub_TransferFailed();\\n                }\\n            }\\n\\n        } else {\\n            uint256 balanceBefore = IERC20(base).balanceOf(address(brokerbot));\\n            priceInEther = payFromEther(address(brokerbot), amountBase, path);\\n            uint256 balanceAfter = IERC20(base).balanceOf(address(brokerbot));\\n            if (amountBase != (balanceAfter - balanceBefore)) { // check that the swap was successful with correct currency\\n                revert PaymentHub_SwapError(amountBase, balanceAfter - balanceBefore);\\n            }    \\n            sharesOut = brokerbot.processIncoming(base, msg.sender, amountBase, ref); // not sending msg.value as this is already done in payFromEther function\\n        }\\n    }\\n\\n    /***\\n     * @notice Pay from any ERC20 token (which has Uniswapv3 ERC20-ETH pool) and send swapped base currency to brokerbot.\\n     * @notice The needed amount needs to be approved at the ERC20 contract beforehand\\n     * @param brokerbot The brokerbot to pay and receive the shares from.\\n     * @param amountBase The amount of base currency used to buy shares.\\n     * @param erc20 The address of the ERC20 token to pay.\\n     * @param amountInMaximum The maximum amount of the ERC20 to pay (should include some slippage).\\n     * @param path The encoded path of the swap from erc20 to base currency.\\n     * @param ref Reference data blob.\\n     * @return amountIn The amount erc20 spent to buy shares.\\n     * @return amountOut The amount of shares received by the brokerbot.\\n     */\\n    function payFromERC20AndNotify(IBrokerbot brokerbot, uint256 amountBase, address erc20, uint256 amountInMaximum, bytes memory path, bytes calldata ref) external returns (uint256 amountIn, uint256 amountOut) {\\n        IERC20 base = brokerbot.base();\\n        uint256 balanceBefore = IERC20(base).balanceOf(address(brokerbot));\\n        amountIn = payFromERC20(amountBase, amountInMaximum, erc20, path, address(brokerbot));\\n        uint256 balanceAfter = IERC20(base).balanceOf(address(brokerbot));\\n        if (amountBase != (balanceAfter - balanceBefore)) {\\n            revert PaymentHub_SwapError(amountBase, balanceAfter - balanceBefore);\\n        }        \\n        amountOut = brokerbot.processIncoming(base, msg.sender, balanceAfter - balanceBefore, ref);\\n    }\\n\\n    /**\\n     * @notice Sell shares with permit\\n     * @param brokerbot The brokerbot to recive the shares.\\n     * @param seller The address of the seller.\\n     * @param recipient The address of the recipient of the sell preceeds.\\n     * @param amountToSell The amount the seller wants to sell.\\n     * @param ref Reference e.g. insider declaration and the type of sell.\\n     * @param permitInfo Information about the permit.\\n     * @return The base currency amount for the selling of the shares.\\n     */\\n    function sellSharesWithPermit(IBrokerbot brokerbot, IERC20Permit shares, address seller, address recipient, uint256 amountToSell, bytes calldata ref, PermitInfo calldata permitInfo) public onlySellerAndForwarder(seller) returns (uint256) {\\n        // Call permit to set allowance\\n        shares.permit(seller, address(this), amountToSell, permitInfo.deadline, permitInfo.v, permitInfo.r,permitInfo.s);\\n        // process sell\\n        if (permitInfo.exFee > 0){\\n            uint256 proceeds = _sellShares(brokerbot, shares, seller, address(this), amountToSell, ref);\\n            IERC20 currency = brokerbot.base();\\n            currency.safeTransfer(msg.sender, permitInfo.exFee);\\n            currency.safeTransfer(recipient, proceeds - permitInfo.exFee);\\n            return proceeds - permitInfo.exFee;\\n        } else {\\n            return _sellShares(brokerbot, shares, seller, recipient, amountToSell, ref);\\n        }\\n    }\\n\\n    /**\\n     * @notice With this function a user can sell shares with permit and swap them to a desired token.\\n     * @param brokerbot The brokerbot of the shares to sell.\\n     * @param shares The (draggable)shares address.\\n     * @param seller The seller address.\\n     * @param amountToSell The amount of shares to sell.\\n     * @param ref Reference e.g. insider declaration and the type of sell.\\n     * @param permitInfo Information about the permit.\\n     * @param params Information about the swap.\\n     * @return The output amount of the swap to the desired token.\\n     */\\n    function sellSharesWithPermitAndSwap(IBrokerbot brokerbot, IERC20Permit shares, address seller,  uint256 amountToSell, bytes calldata ref, PermitInfo calldata permitInfo, ISwapRouter.ExactInputParams memory params, bool unwrapWeth) external onlySellerAndForwarder(seller) returns (uint256) {\\n        params.amountIn = sellSharesWithPermit(brokerbot, shares, seller, address(this), amountToSell, ref, permitInfo);\\n        return _swap(params, unwrapWeth);\\n    }\\n\\n    /**\\n     * @notice With this function a user can sell shares and swap them to a desired token. The user has to approve the paymenthub before on the shares contract.\\n     * @param brokerbot The brokerbot of the shares to sell.\\n     * @param shares The (draggable)shares address.\\n     * @param amountToSell The amount of shares to sell.\\n     * @param ref Reference e.g. insider declaration and the type of sell.\\n     * @param params Information about the swap.\\n     * @return The output amount of the swap to the desired token.\\n     */\\n    function sellSharesAndSwap(IBrokerbot brokerbot, IERC20 shares, uint256 amountToSell,  bytes calldata ref, ISwapRouter.ExactInputParams memory params, bool unwrapWeth) external returns (uint256) {\\n        params.amountIn = _sellShares(brokerbot, shares, msg.sender, address(this), amountToSell, ref);\\n        return _swap(params, unwrapWeth);\\n    }\\n\\n    /**\\n     * @notice Transfers shares to brokerbot and executes the selling.\\n     * @param brokerbot The brokerbot of the shares to sell.\\n     * @param shares The (draggable)shares address.\\n     * @param seller The seller address.\\n     * @param recipient The recipient of the base currency tokens. (this can be a 3rd party to off-ramp or the paymenthub itself if a swap will be done direct after)\\n     * @param amountToSell The amount of shares to sell.\\n     * @param ref Reference e.g. insider declaration and the type of sell.\\n     * @return The base currency amount for the selling of the shares.\\n     */ \\n    function _sellShares(IBrokerbot brokerbot, IERC20 shares, address seller, address recipient, uint256 amountToSell, bytes calldata ref ) internal returns (uint256) {\\n        // send shares token to brokerbot\\n        shares.safeTransferFrom(seller, address(brokerbot), amountToSell);\\n        // process sell on brokerbot\\n        return brokerbot.processIncoming(shares, recipient, amountToSell, ref);\\n    }\\n\\n    /**\\n     * @notice Swap (base currency) token according to given path and unwrap weth if needed.\\n     * @param params Information about the swap (includes path).\\n     * @return amountOut The output amount of the swap to the desired token.\\n     */\\n    function _swap(ISwapRouter.ExactInputParams memory params, bool unwrapWeth) internal returns(uint256 amountOut) {\\n        // if weth should be unwrapped, swap recipient is this contract and eth is send to seller\\n        if (unwrapWeth){\\n            address seller = params.recipient;\\n            params.recipient = address(this);\\n            amountOut = _swapToERC20(params);\\n            IWETH9(uniswapQuoter.WETH9()).withdraw(amountOut);\\n            (bool success, ) = payable(seller).call{value:amountOut}(\\\"\\\");\\n            if (!success) revert PaymentHub_TransferFailed();\\n        } else {\\n            amountOut = _swapToERC20(params);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calls the Uniswap router to swap tokens according to given path.\\n     * @param params Information about the swap (includes path).\\n     * @return amountOut The output amount of the swap to the desired token.\\n     */\\n    function _swapToERC20(ISwapRouter.ExactInputParams memory params) internal returns(uint256 amountOut) {\\n        amountOut = uniswapRouter.exactInput(params);\\n        if (amountOut < params.amountOutMinimum){\\n            revert PaymentHub_SwapError(params.amountOutMinimum, amountOut);\\n        }\\n    }\\n\\n    /**\\n     * Checks if the brokerbot has setting enabled to keep ether\\n     */\\n    function hasSettingKeepEther(IBrokerbot brokerbot) public view returns (bool) {\\n        return brokerbot.settings() & KEEP_ETHER == KEEP_ETHER;\\n    }\\n\\n    /**\\n     * @notice In case tokens have been accidentally sent directly to this contract. Only Forwarder can withdraw, else a MEV bot will intercept it.\\n     * @param ercAddress The erc20 address.\\n     * @param to The address to transfer tokens to.\\n     * @param amount The amount of tokens to transfer.\\n     */\\n    function recover(IERC20 ercAddress, address to, uint256 amount) external onlyForwarder {\\n        ercAddress.safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer ether to a given address. Only Forwarder can withdraw, else a MEV bot will intercept it.\\n     * @param to The address to transfer ether to.\\n     */\\n    function withdrawEther(address to, uint256 amount) external onlyForwarder {\\n        (bool success, ) = payable(to).call{value:amount}(\\\"\\\");\\n        if (!success) {\\n            revert PaymentHub_TransferFailed();\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer ether to a given address.\\n     * @dev Used with the mutlisigwallet.\\n     * @param to The address to transfer ether to.\\n     */\\n    function transferEther(address to) external payable {\\n        (bool success, ) = payable(to).call{value:msg.value}(\\\"\\\");\\n        if (!success) {\\n            revert PaymentHub_TransferFailed();\\n        }\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {\\n        // Important to receive ETH refund from Uniswap\\n    }\\n}\\n\",\"keccak256\":\"0x01de8d6079a35ec0b861668233cabce1fa8e30f7e915ce56db7a49a711a986e3\",\"license\":\"LicenseRef-Aktionariat\"},\"src/draggable/ERC20Draggable.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: LicenseRef-Aktionariat\\n *\\n * MIT License with Automated License Fee Payments\\n *\\n * Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n *\\n * Permission is hereby granted to any person obtaining a copy of this software\\n * and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n * without restriction, including without limitation the rights to use, copy,\\n * modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n * Software, and to permit persons to whom the Software is furnished to do so,\\n * subject to the following conditions:\\n *\\n * - The above copyright notice and this permission notice shall be included in\\n *   all copies or substantial portions of the Software.\\n * - All automated license fee payments integrated into this and related Software\\n *   are preserved.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC-20 tokens subject to a drag-along agreement\\n * @author Luzius Meisser, luzius@aktionariat.com\\n *\\n * This is an ERC-20 token that is bound to a shareholder or other agreement that contains\\n * a drag-along clause. The smart contract can help enforce this drag-along clause in case\\n * an acquirer makes an offer using the provided functionality. If a large enough quorum of\\n * token holders agree, the remaining token holders can be automatically \\\"dragged along\\\" or\\n * squeezed out. For shares non-tokenized shares, the contract relies on an external Oracle\\n * to provide the votes of those.\\n *\\n * Subclasses should provide a link to a human-readable form of the agreement.\\n */\\n\\nimport \\\"./IDraggable.sol\\\";\\nimport \\\"../ERC20/ERC20Flaggable.sol\\\";\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"../ERC20/IERC677Receiver.sol\\\";\\nimport \\\"./IOffer.sol\\\";\\nimport \\\"./IOfferFactory.sol\\\";\\nimport \\\"../shares/IShares.sol\\\";\\nimport \\\"../utils/SafeERC20.sol\\\";\\n\\nstruct DraggableParams {\\n\\tIERC20Permit wrappedToken;\\n\\tuint256 quorumDrag;\\n\\tuint256 quorumMigration;\\n\\tuint256 votePeriod;\\n}\\n\\nabstract contract ERC20Draggable is IERC677Receiver, IDraggable, ERC20Flaggable {\\n\\n\\tusing SafeERC20 for IERC20;\\n    \\n\\t// If flag is not present, one can be sure that the address did not vote. If the \\n\\t// flag is present, the address might have voted and one needs to check with the\\n\\t// current offer (if any) when transferring tokens.\\n\\tuint8 private constant FLAG_VOTE_HINT = 1;\\n\\n\\tIERC20 public override wrapped; // The wrapped contract\\n\\tIOfferFactory public immutable factory;\\n\\n\\t// If the wrapped tokens got replaced in an acquisition, unwrapping might yield many currency tokens\\n\\tuint256 public unwrapConversionFactor = 0;\\n\\n\\t// The current acquisition attempt, if any. See initiateAcquisition to see the requirements to make a public offer.\\n\\tIOffer public override offer;\\n\\n\\tuint256 private constant QUORUM_MULTIPLIER = 10000;\\n\\n\\tuint256 public immutable quorumMigration; // used for contract migartion, in BPS (out of 10'000)\\n\\tuint256 public immutable quorum; // used for drag-along at acquisition offers, in BPS (out of 10'000)\\n\\tuint256 public immutable votePeriod; // In seconds\\n\\n\\taddress public override oracle;\\n\\n\\tevent MigrationSucceeded(address newContractAddress, uint256 yesVotes, uint256 oracleVotes, uint256 totalVotingPower);\\n\\tevent ChangeOracle(address oracle);\\n\\n    /**\\n\\t * Note that the Brokerbot only supports tokens that revert on failure and where transfer never returns false.\\n     */\\n\\tconstructor(\\n\\t\\tDraggableParams memory _params,\\n\\t\\tIOfferFactory _offerFactory,\\n\\t\\taddress _oracle\\n\\t) \\n\\t\\tERC20Flaggable(0)\\n\\t{\\n\\t\\twrapped = _params.wrappedToken;\\n\\t\\tquorum = _params.quorumDrag;\\n\\t\\tquorumMigration = _params.quorumMigration;\\n\\t\\tvotePeriod = _params.votePeriod;\\n\\t\\tfactory = _offerFactory;\\n\\t\\toracle = _oracle;\\n\\t}\\n\\n\\tmodifier onlyOracle {\\n\\t\\t_checkSender(oracle);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyWrappedToken {\\n\\t\\t_checkSender(address(wrapped));\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyOffer(){\\n\\t\\t_checkSender(address(offer));\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier checkBinding(bool expected) {\\n\\t\\tif (expected != isBinding()) {\\n\\t\\t\\tif(expected) {\\n\\t\\t\\t\\trevert Draggable_NotBinding();\\n\\t\\t\\t}\\n\\t\\t\\tif(!expected) {\\n\\t\\t\\t\\trevert Draggable_IsBinding();\\n\\t\\t\\t}\\n\\t\\t} \\n\\t\\t_;\\n\\t}\\n\\n\\tfunction onTokenTransfer(\\n\\t\\taddress from, \\n\\t\\tuint256 amount, \\n\\t\\tbytes calldata\\n\\t) external override onlyWrappedToken returns (bool) {\\n\\t\\t_mint(from, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/** Wraps additional tokens, thereby creating more ERC20Draggable tokens. */\\n\\tfunction wrap(address shareholder, uint256 amount) external {\\n\\t\\twrapped.safeTransferFrom(msg.sender, address(this), amount);\\n\\t\\t_mint(shareholder, amount);\\n\\t}\\n\\n\\t/**\\n\\t * Indicates that the token holders are bound to the token terms and that:\\n\\t * - Conversion back to the wrapped token (unwrap) is not allowed\\n\\t * - A drag-along can be performed by making an according offer\\n\\t * - They can be migrated to a new version of this contract in accordance with the terms\\n\\t */\\n\\tfunction isBinding() public view returns (bool) {\\n\\t\\treturn unwrapConversionFactor == 0;\\n\\t}\\n\\n    /**\\n\\t * Current recommended naming convention is to add the postfix \\\"SHA\\\" to the plain shares\\n\\t * in order to indicate that this token represents shares bound to a shareholder agreement.\\n\\t */\\n\\tfunction name() public view override returns (string memory) {\\n\\t\\tstring memory wrappedName = wrapped.name();\\n\\t\\tif (isBinding()) {\\n\\t\\t\\treturn string(abi.encodePacked(wrappedName, \\\" SHA\\\"));\\n\\t\\t} else {\\n\\t\\t\\treturn string(abi.encodePacked(wrappedName, \\\" (Wrapped)\\\"));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction symbol() public view override returns (string memory) {\\n\\t\\t// ticker should be less dynamic than name\\n\\t\\treturn string(abi.encodePacked(wrapped.symbol(), \\\"S\\\"));\\n\\t}\\n\\n\\t/**\\n\\t * Deactivates the drag-along mechanism and enables the unwrap function.\\n\\t */\\n\\tfunction _deactivate(uint256 factor) internal {\\n\\t\\tif (factor == 0) {\\n\\t\\t\\trevert Draggable_FactorZero();\\n\\t\\t}\\n\\t\\tunwrapConversionFactor = factor;\\n\\t}\\n\\n\\t/** Decrease the number of drag-along tokens. The user gets back their shares in return */\\n\\tfunction unwrap(uint256 amount) external override checkBinding(false) {\\n\\t\\t_unwrap(msg.sender, amount, unwrapConversionFactor);\\n\\t}\\n\\n\\tfunction _unwrap(address owner, uint256 amount, uint256 factor) internal {\\n\\t\\t_burn(owner, amount);\\n\\t\\twrapped.safeTransfer(owner, amount * factor);\\n\\t}\\n\\n\\t/**\\n\\t * Burns both the token itself as well as the wrapped token!\\n\\t * If you want to get out of the shareholder agreement, use unwrap after it has been\\n\\t * deactivated by a majority vote or acquisition.\\n\\t *\\n\\t * Burning only works if wrapped token supports burning. Also, the exact meaning of this\\n\\t * operation might depend on the circumstances. Burning and reussing the wrapped token\\n\\t * does not free the sender from the legal obligations of the shareholder agreement.\\n\\t */\\n\\tfunction burn(uint256 amount) external {\\n\\t\\t_burn(msg.sender, amount);\\n\\t\\tIShares(address(wrapped)).burn(isBinding() ? amount : amount * unwrapConversionFactor);\\n\\t}\\n\\n\\tfunction makeAcquisitionOffer(\\n\\t\\tbytes32 salt, \\n\\t\\tuint256 pricePerShare, \\n\\t\\tIERC20 currency\\n\\t) external payable checkBinding(true) {\\n\\t\\tIOffer newOffer = factory.create{value: msg.value}(\\n\\t\\t\\tsalt, msg.sender, pricePerShare, currency, quorum, votePeriod);\\n\\n\\t\\tif (_offerExists()) {\\n\\t\\t\\toffer.makeCompetingOffer(newOffer);\\n\\t\\t}\\n\\t\\toffer = newOffer;\\n\\t}\\n\\n\\tfunction drag(address buyer, IERC20 currency) external override onlyOffer {\\n\\t\\t_unwrap(buyer, balanceOf(buyer), 1);\\n\\t\\t_replaceWrapped(currency, buyer);\\n\\t}\\n\\n\\tfunction notifyOfferEnded() external override onlyOffer {\\n\\t\\toffer = IOffer(address(0));\\n\\t}\\n\\n\\tfunction _replaceWrapped(IERC20 newWrapped, address oldWrappedDestination) internal checkBinding(true) {\\n\\t\\t// Free all old wrapped tokens we have\\n\\t\\twrapped.safeTransfer(oldWrappedDestination, wrapped.balanceOf(address(this)));\\n\\t\\t// Count the new wrapped tokens\\n\\t\\twrapped = newWrapped;\\n\\t\\tif (totalSupply() > 0) // if there are no tokens, no need to deactivate\\n\\t\\t\\t_deactivate(newWrapped.balanceOf(address(this)) / totalSupply());\\n\\t\\temit NameChanged(name(), symbol());\\n\\t}\\n\\n\\tfunction setOracle(address newOracle) external override onlyOracle {\\n\\t\\toracle = newOracle;\\n\\t\\temit ChangeOracle(oracle);\\n\\t}\\n\\n\\tfunction migrateWithExternalApproval(address successor, uint256 additionalVotes) external override onlyOracle {\\n\\t\\t// Additional votes cannot be higher than the votes not represented by these tokens.\\n\\t\\t// The assumption here is that more shareholders are bound to the shareholder agreement\\n\\t\\t// that this contract helps enforce and a vote among all parties is necessary to change\\n\\t\\t// it, with an oracle counting and reporting the votes of the others.\\n\\t\\tif (totalSupply() + additionalVotes > totalVotingTokens()) {\\n\\t\\t\\trevert Draggable_TooManyVotes(totalVotingTokens(), totalSupply() + additionalVotes);\\n\\t\\t}\\n\\t\\t_migrate(successor, additionalVotes);\\n\\t}\\n\\n\\tfunction migrate() external override {\\n\\t\\t_migrate(msg.sender, 0);\\n\\t}\\n\\n\\tfunction _migrate(address successor, uint256 additionalVotes) internal {\\n\\t\\tuint256 yesVotes = additionalVotes + balanceOf(successor);\\n\\t\\tuint256 totalVotes = totalVotingTokens();\\n\\t\\tif (yesVotes > totalVotes) {\\n\\t\\t\\trevert Draggable_TooManyVotes(totalVotes, yesVotes);\\n\\t\\t}\\n\\t\\tif (_offerExists()) {\\n\\t\\t\\t// if you have the quorum, you can cancel the offer first if necessary\\n\\t\\t\\trevert Draggable_OpenOffer();\\n\\t\\t}\\n\\t\\tif (yesVotes * QUORUM_MULTIPLIER < totalVotes * quorumMigration) {\\n\\t\\t\\trevert Draggable_QuorumNotReached(totalVotes * quorumMigration, yesVotes * QUORUM_MULTIPLIER);\\n\\t\\t}\\n\\t\\t_replaceWrapped(IERC20(successor), successor);\\n\\t\\temit MigrationSucceeded(successor, yesVotes, additionalVotes, totalVotes);\\n\\t}\\n\\n\\tfunction votingPower(address voter) external view override returns (uint256) {\\n\\t\\treturn balanceOf(voter);\\n\\t}\\n\\n\\tfunction totalVotingTokens() public view override returns (uint256) {\\n\\t\\treturn IShares(address(wrapped)).totalShares();\\n\\t}\\n\\n\\tfunction _hasVoted(address voter) internal view returns (bool) {\\n\\t\\treturn hasFlagInternal(voter, FLAG_VOTE_HINT);\\n\\t}\\n\\n\\tfunction notifyVoted(address voter) external override onlyOffer {\\n\\t\\tsetFlag(voter, FLAG_VOTE_HINT, true);\\n\\t}\\n\\n\\tfunction _beforeTokenTransfer(address from, address to,\\tuint256 amount) internal virtual override {\\n\\t\\tif (_hasVoted(from) || _hasVoted(to)) {\\n\\t\\t\\tif (_offerExists()) {\\n\\t\\t\\t\\toffer.notifyMoved(from, to, amount);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tsetFlag(from, FLAG_VOTE_HINT, false);\\n\\t\\t\\t\\tsetFlag(to, FLAG_VOTE_HINT, false);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tsuper._beforeTokenTransfer(from, to, amount);\\n\\t}\\n\\n\\tfunction _offerExists() internal view returns (bool) {\\n\\t\\treturn address(offer) != address(0) && ! offer.isKilled();\\t\\t// needs to have contract deployed AND offer needs to be not in deleted state\\n\\t}\\n}\\n\",\"keccak256\":\"0x95eed29e29ceb9a20c70a2b4867b0dbe27380762c9920aac9edea2a80aa23f10\",\"license\":\"LicenseRef-Aktionariat\"},\"src/draggable/IDraggable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"./IOffer.sol\\\";\\ninterface IDraggable is IERC20 {\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n    //////////////////////////////////////////////////////////////*/\\n    /// conversion factor has to be > 0 for this transaction.\\n    error Draggable_NotBinding();\\n    /// conversion factor has to be = 0 for this transaction.\\n    error Draggable_IsBinding();\\n    /// conversion factor can't be 0 if binding gets deactivated.\\n    error Draggable_FactorZero();\\n    /// the reported votes can't be > max voting tokens.\\n    /// @param maxVotes The max voting tokens.\\n    /// @param reportedVotes The actual reported votes.\\n    error Draggable_TooManyVotes(uint256 maxVotes, uint256 reportedVotes);\\n    /// there is still an open offer that has to be canceled first\\n    error Draggable_OpenOffer();\\n    /// For migration the quorum needs to be reached.\\n    /// @param needed The needed quorum.\\n    /// @param actual The current yes votes.\\n    error Draggable_QuorumNotReached(uint256 needed, uint256 actual);\\n    \\n    function wrapped() external view returns (IERC20);\\n    function unwrap(uint256 amount) external;\\n    function offer() external view returns (IOffer);\\n    function oracle() external view returns (address);\\n    function drag(address buyer, IERC20 currency) external;\\n    function notifyOfferEnded() external;\\n    function votingPower(address voter) external returns (uint256);\\n    function totalVotingTokens() external view returns (uint256);\\n    function notifyVoted(address voter) external;\\n    function migrate() external;\\n    function setOracle(address newOracle) external;\\n    function migrateWithExternalApproval(address successor, uint256 additionalVotes) external;\\n    function setTerms(string calldata _terms) external;\\n\\n\\n}\\n\",\"keccak256\":\"0x08c41cde4752628911a4777c71477400c8321e845ebdd66054854449c4562f13\",\"license\":\"MIT\"},\"src/draggable/IOffer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\n\\ninterface IOffer {\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n  //////////////////////////////////////////////////////////////*/\\n\\t/// Invalid msg.sender.\\n\\t/// @param sender The msg.sender of the transaction.\\n\\terror Offer_InvalidSender(address sender);\\n\\t/// Offer needs to be still open.\\n\\terror Offer_AlreadyAccepted();\\n\\t/// Offer needs to be not accepted yet.\\n\\terror Offer_NotAccepted();\\n\\t/// Sender of the offer needs to have needed funds in his account.\\n\\terror Offer_NotWellFunded();\\n\\t/// New offer not valid. `newPrice` needs to be higher than `oldPrice`.\\n\\t/// @param oldPrice Price of the old offer.\\n\\t/// @param newPrice Price of the new offer.\\n\\terror Offer_OldOfferBetter(uint256 oldPrice, uint256 newPrice);\\n\\t/// Voting needs to be still open.\\n\\terror Offer_VotingEnded();\\n\\t/// Too many (External) reported votes. `reportedVotes` needs to be less or equal to `maxVotes`.\\n\\t/// @param maxVotes The max possible votes for the token.\\n\\t/// @param reportedVotes The external reported votes + circulating supply of the token.\\n\\terror Offer_TooManyVotes(uint256 maxVotes, uint256 reportedVotes);\\n\\t/// Competing offer needs to be in the same currency.\\n\\terror Offer_OfferInWrongCurrency();\\n\\t/// Offer got already killed.\\n\\terror Offer_IsKilled();\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Function Interfaces\\n\\t//////////////////////////////////////////////////////////////*/\\n\\n\\tfunction makeCompetingOffer(IOffer newOffer) external;\\n\\n\\t// if there is a token transfer while an offer is open, the votes get transfered too\\n\\tfunction notifyMoved(address from, address to, uint256 value) external;\\n\\n\\tfunction currency() external view returns (IERC20);\\n\\n\\tfunction price() external view returns (uint256);\\n\\n\\tfunction isWellFunded() external view returns (bool);\\n\\n\\tfunction voteYes() external;\\n\\n\\tfunction voteNo() external;\\n\\n\\tfunction isKilled() external view returns (bool);\\n}\",\"keccak256\":\"0x3a0f475a851e4950132ce2861723b609156e78ed76d3c12b807ee3349be5cbfd\",\"license\":\"MIT\"},\"src/draggable/IOfferFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"./IOffer.sol\\\";\\n\\ninterface IOfferFactory {\\n\\n\\tfunction create(\\n\\t\\tbytes32 salt, address buyer, uint256 pricePerShare,\\tIERC20 currency,\\tuint256 quorum,\\tuint256 votePeriod\\n\\t) external payable returns (IOffer);\\n}\",\"keccak256\":\"0x048511f24b8e4278df38ee6f5fb038d53a7964cc90761780fb1ebb2e7825a532\",\"license\":\"MIT\"},\"src/multisig/MultiSigCloneFactory.sol\":{\"content\":\"\\n/**\\n * SPDX-License-Identifier: MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./MultiSigWalletMaster.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\ncontract MultiSigCloneFactory {\\n\\n  address immutable public multiSigImplementation;\\n\\n  event ContractCreated(address indexed contractAddress, string indexed typeName);\\n\\n  constructor(address _multiSigImplementation) {\\n    multiSigImplementation = _multiSigImplementation;\\n  }\\n  \\n  function predict(bytes32 salt) external view returns (address) {\\n    return Clones.predictDeterministicAddress(multiSigImplementation, salt);\\n  }\\n\\n  function create(address owner, bytes32 salt) external returns (MultiSigWalletMaster) {\\n    address payable instance = payable(Clones.cloneDeterministic(multiSigImplementation, salt));\\n    MultiSigWalletMaster(instance).initialize(owner);\\n    emit ContractCreated(instance, \\\"MultiSigWallet\\\");\\n    return MultiSigWalletMaster(instance);\\n  }\\n}\",\"keccak256\":\"0x839ef2d9f155eeb7dd2921395642d00b7e33ea2c4ce042b3cfca3f934cb24e0c\",\"license\":\"MIT\"},\"src/multisig/MultiSigWalletMaster.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\nimport \\\"./RLPEncode.sol\\\";\\nimport \\\"./Nonce.sol\\\";\\n\\n/**\\n * Documented in ../../doc/multisig.md\\n * Version 4: include SentEth event\\n */\\ncontract MultiSigWalletMaster is Nonce, Initializable {\\n\\n  // Version history\\n  // Version 4: added event for send value\\n  // Version 5: added version field and changed chain id\\n  uint8 public constant VERSION = 0x5;\\n\\n  mapping (address => uint8) public signers; // The addresses that can co-sign transactions and the number of signatures needed\\n\\n  uint16 public signerCount;\\n  bytes public contractId; // most likely unique id of this contract\\n\\n  event SignerChange(\\n    address indexed signer,\\n    uint8 signaturesNeeded\\n  );\\n\\n  event Transacted(\\n    address indexed toAddress,  // The address the transaction was sent to\\n    bytes4 selector, // selected operation\\n    address[] signers // Addresses of the signers used to initiate the transaction\\n  );\\n\\n  event Received(address indexed sender, uint amount);\\n  event SentEth(address indexed target, uint amount);\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n\\t//////////////////////////////////////////////////////////////*/\\n  /// Call needs to provide signature data. \\n  error Multisig_SignatureMissing();\\n  /// Sinature data isn't valid for the transaction or insufficient signer have signed the transaction. \\n  /// @param signer The ecrecover'd signer.\\n  error Multisig_InvalidSignDataOrInsufficientCosigner(address signer);\\n  /// Each signature data entry has to be from a unique address. \\n  /// @param from The address which has produced more than one signature. \\n  error Multisig_DuplicateSignature(address from);\\n  /// Signer is a contract or the 0x0 address. \\n  /// @param signer The address of the invalid signer. \\n  error Multisig_InvalidSigner(address signer);\\n  /// The multisig needs to have > 0 signers. \\n  error Multisig_InsufficientSigners();\\n  /// Sender has to be single signer or the multisig itself. \\n  /// @param sender The msg.sender of the transaction. \\n  error Multisig_UnauthorizedSender(address sender);\\n  /// Migration can't override current signer. \\n  /// param destination The address to which the signer rights should be migrated. \\n  error Multisig_InvalidDestination(address destination);\\n\\n  function initialize(address owner) external initializer {\\n    // We use the gas price field to get a unique id into our transactions.\\n    // Note that 32 bits do not guarantee that no one can generate a contract with the\\n    // same id, but it practically rules out that someone accidentally creates two\\n    // two multisig contracts with the same id, and that's all we need to prevent\\n    // replay-attacks.\\n    contractId = toBytes(uint32(uint160(address(this))));\\n    signerCount = 0;\\n    _setSigner(owner, 1); // set initial owner\\n  }\\n\\n  /**\\n   * It should be possible to store ether on this address.\\n   */\\n  receive() external payable {\\n    emit Received(msg.sender, msg.value);\\n  }\\n\\n  /**\\n   * Checks if the provided signatures suffice to sign the transaction and if the nonce is correct.\\n   */\\n  function checkSignatures(uint128 nonce, address to, uint value, bytes calldata data,\\n    uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s) external view returns (address[] memory) {\\n    bytes32 transactionHash = calculateTransactionHash(nonce, contractId, to, value, data);\\n    return verifySignatures(transactionHash, v, r, s);\\n  }\\n\\n  /**\\n   * Checks if the execution of a transaction would succeed if it was properly signed.\\n   */\\n  function checkExecution(address to, uint value, bytes calldata data) external {\\n    Address.functionCallWithValue(to, data, value);\\n    revert(\\\"Test passed. Reverting.\\\");\\n  }\\n\\n  function execute(uint128 nonce, address to, uint value, bytes calldata data, uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s) external returns (bytes memory) {\\n    bytes32 transactionHash = calculateTransactionHash(nonce, contractId, to, value, data);\\n    address[] memory found = verifySignatures(transactionHash, v, r, s);\\n    bytes memory returndata = Address.functionCallWithValue(to, data, value);\\n    flagUsed(nonce);\\n    emit Transacted(to, extractSelector(data), found);\\n    if (value > 0) {emit SentEth(to, value);}\\n    return returndata;\\n  }\\n\\n  function extractSelector(bytes calldata data) private pure returns (bytes4){\\n    if (data.length < 4){\\n      return bytes4(0);\\n    } else {\\n      return bytes4(data[0]) | (bytes4(data[1]) >> 8) | (bytes4(data[2]) >> 16) | (bytes4(data[3]) >> 24);\\n    }\\n  }\\n\\n  function toBytes (uint256 x) public pure returns (bytes memory result) {\\n    uint l = 0;\\n    uint xx = x;\\n    if (x >= 0x100000000000000000000000000000000) { x >>= 128; l += 16; }\\n    if (x >= 0x10000000000000000) { x >>= 64; l += 8; }\\n    if (x >= 0x100000000) { x >>= 32; l += 4; }\\n    if (x >= 0x10000) { x >>= 16; l += 2; }\\n    if (x >= 0x100) { x >>= 8; l += 1; }\\n    if (x > 0x0) { l += 1; }\\n    assembly {\\n      result := mload (0x40)\\n      mstore (0x40, add (result, add (l, 0x20)))\\n      mstore (add (result, l), xx)\\n      mstore (result, l)\\n    }\\n  }\\n\\n  // Note: does not work with contract creation\\n  function calculateTransactionHash(uint128 sequence, bytes memory id, address to, uint value, bytes calldata data)\\n    internal view returns (bytes32){\\n    bytes[] memory all = new bytes[](9);\\n    all[0] = toBytes(sequence); // sequence number instead of nonce\\n    all[1] = id; // contract id instead of gas price\\n    all[2] = bytes(\\\"\\\\x82\\\\x52\\\\x08\\\"); // 21000 gas limitation\\n    all[3] = abi.encodePacked (bytes1 (0x94), to);\\n    all[4] = toBytes(value);\\n    all[5] = data;\\n    all[6] = toBytes(block.chainid);\\n    all[7] = new bytes(0);\\n    for (uint i = 0; i<8; i++){\\n      if (i != 2 && i!= 3) {\\n        all[i] = RLPEncode.encodeBytes(all[i]);\\n      }\\n    }\\n    all[8] = all[7];\\n    return keccak256(RLPEncode.encodeList(all));\\n  }\\n\\n  function verifySignatures(bytes32 transactionHash, uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s)\\n    public view returns (address[] memory) {\\n    address[] memory found = new address[](r.length);\\n    if (r.length == 0 ) {\\n      revert Multisig_SignatureMissing();\\n    }\\n    for (uint i = 0; i < r.length; i++) {\\n      address signer = ecrecover(transactionHash, v[i], r[i], s[i]);\\n      uint8 signaturesNeeded = signers[signer];\\n      if (signaturesNeeded == 0 || signaturesNeeded > r.length) {\\n        revert Multisig_InvalidSignDataOrInsufficientCosigner(signer);\\n      }\\n      found[i] = signer;\\n    }\\n    requireNoDuplicates(found);\\n    return found;\\n  }\\n\\n  function requireNoDuplicates(address[] memory found) private pure {\\n    for (uint i = 0; i < found.length; i++) {\\n      for (uint j = i+1; j < found.length; j++) {\\n        if (found[i] == found[j]) {\\n          revert Multisig_DuplicateSignature(found[i]);\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Call this method through execute\\n   */\\n  function setSigner(address signer, uint8 signaturesNeeded) external authorized {\\n    _setSigner(signer, signaturesNeeded);\\n    if (signerCount == 0) {\\n      revert Multisig_InsufficientSigners();\\n    }\\n  }\\n\\n  function migrate(address destination) external {\\n    _migrate(msg.sender, destination);\\n  }\\n\\n  function migrate(address source, address destination) external authorized {\\n    _migrate(source, destination);\\n  }\\n\\n  function _migrate(address source, address destination) private {\\n    // do not overwrite existing signer!\\n    if (signers[destination] > 0 ) {\\n      revert Multisig_InvalidDestination(destination);\\n    }\\n    _setSigner(destination, signers[source]);\\n    _setSigner(source, 0);\\n  }\\n\\n  function _setSigner(address signer, uint8 signaturesNeeded) private {\\n    if (Address.isContract(signer) || signer == address(0x0)) {\\n      revert Multisig_InvalidSigner(signer);\\n    }\\n    uint8 prevValue = signers[signer];\\n    signers[signer] = signaturesNeeded;\\n    if (prevValue > 0 && signaturesNeeded == 0){\\n      signerCount--;\\n    } else if (prevValue == 0 && signaturesNeeded > 0){\\n      signerCount++;\\n    }\\n    emit SignerChange(signer, signaturesNeeded);\\n  }\\n\\n  modifier authorized() {\\n    if (address(this) != msg.sender && signers[msg.sender] != 1) {\\n      revert Multisig_UnauthorizedSender(msg.sender);\\n    }\\n    _;\\n  }\\n\\n}\",\"keccak256\":\"0x19784becd152b5cf78b7951c0a53b5168c07c59af0f17cb1c51da97cbaa8a1c7\",\"license\":\"MIT\"},\"src/multisig/Nonce.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\ncontract Nonce {\\n\\n    uint256 public constant MAX_INCREASE = 100;\\n    \\n    uint256 private compound;\\n    \\n    constructor(){\\n        setBoth(128, 0);\\n    }\\n    \\n    /**\\n     * The next recommended nonce, which is the highest nonce ever used plus one.\\n     * The initial nonce is 129.\\n     */\\n    function nextNonce() external view returns (uint128){\\n        return getMax() + 1;\\n    }\\n\\n    /**\\n     * Returns whether the provided nonce can be used.\\n     * For the 100 nonces in the interval [nextNonce(), nextNonce + 99], this is always true.\\n     * For the nonces in the interval [nextNonce() - 129, nextNonce() - 1], this is true for the nonces that have not been used yet.\\n     */ \\n    function isFree(uint128 nonce) external view returns (bool){\\n        uint128 max = getMax();\\n        return isValidHighNonce(max, nonce) || isValidLowNonce(max, getRegister(), nonce);\\n    }\\n\\n    /**\\n     * Flags the given nonce as used.\\n     * Reverts if the provided nonce is not free.\\n     */\\n    function flagUsed(uint128 nonce) internal {\\n        uint256 comp = compound;\\n        uint128 max = uint128(comp);\\n        uint128 reg = uint128(comp >> 128);\\n        if (isValidHighNonce(max, nonce)){\\n            setBoth(nonce, ((reg << 1) | 0x1) << (nonce - max - 1));\\n        } else if (isValidLowNonce(max, reg, nonce)){\\n            setBoth(max, uint128(reg | 0x1 << (max - nonce - 1)));\\n        } else {\\n            revert(\\\"used\\\");\\n        }\\n    }\\n    \\n    function getMax() private view returns (uint128) {\\n        return uint128(compound);\\n    }\\n    \\n    function getRegister() private view returns (uint128) {\\n        return uint128(compound >> 128);\\n    }\\n    \\n    function setBoth(uint128 max, uint128 reg) private {\\n        compound = uint256(reg) << 128 | max;\\n    }\\n\\n    function isValidHighNonce(uint128 max, uint128 nonce) private pure returns (bool){\\n        return nonce > max && nonce <= max + MAX_INCREASE;\\n    }\\n\\n    function isValidLowNonce(uint128 max, uint128 reg, uint128 nonce) private pure returns (bool){\\n        uint256 diff = max - nonce;\\n        return diff > 0 && diff <= 128 && ((0x1 << (diff - 1)) & reg == 0);\\n    }\\n    \\n}\",\"keccak256\":\"0xa4a710e240881889df352cb42fd3399b464d66013ebefdc631a0229c6b39da1d\",\"license\":\"LicenseRef-Aktionariat\"},\"src/multisig/RLPEncode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n/**\\n * @title RLPEncode\\n * @dev A simple RLP encoding library.\\n * @author Bakaoh\\n */\\nlibrary RLPEncode {\\n    /*\\n     * Internal functions\\n     */\\n\\n    /**\\n     * @dev RLP encodes a byte string.\\n     * @param self The byte string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function encodeBytes(bytes memory self) internal pure returns (bytes memory) {\\n        bytes memory encoded;\\n        if (self.length == 1 && uint8(self[0]) < 128) {\\n            encoded = self;\\n        } else {\\n            encoded = abi.encodePacked(encodeLength(self.length, 128), self);\\n        }\\n        return encoded;\\n    }\\n\\n    /**\\n     * @dev RLP encodes a list of RLP encoded byte byte strings.\\n     * @param self The list of RLP encoded byte strings.\\n     * @return The RLP encoded list of items in bytes.\\n     */\\n    function encodeList(bytes[] memory self) internal pure returns (bytes memory) {\\n        bytes memory list = flatten(self);\\n        return abi.encodePacked(encodeLength(list.length, 192), list);\\n    }\\n\\n    /*\\n     * Private functions\\n     */\\n\\n    /**\\n     * @dev Encode the first byte, followed by the `len` in binary form if `length` is more than 55.\\n     * @param len The length of the string or the payload.\\n     * @param offset 128 if item is string, 192 if item is list.\\n     * @return RLP encoded bytes.\\n     */\\n    function encodeLength(uint len, uint offset) private pure returns (bytes memory) {\\n        bytes memory encoded;\\n        if (len < 56) {\\n            encoded = new bytes(1);\\n            encoded[0] = bytes32(len + offset)[31];\\n        } else {\\n            uint lenLen;\\n            uint i = 1;\\n            while (len >= i) {\\n                lenLen++;\\n                i <<= 8;\\n            }\\n\\n            encoded = new bytes(lenLen + 1);\\n            encoded[0] = bytes32(lenLen + offset + 55)[31];\\n            for(i = 1; i <= lenLen; i++) {\\n                encoded[i] = bytes32((len / (256**(lenLen-i))) % 256)[31];\\n            }\\n        }\\n        return encoded;\\n    }\\n\\n    /**\\n     * @dev Copies a piece of memory to another location.\\n     * @notice From: https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol.\\n     * @param _dest Destination location.\\n     * @param _src Source location.\\n     * @param _len Length of memory to copy.\\n     */\\n    function memcpy(uint _dest, uint _src, uint _len) private pure {\\n        uint dest = _dest;\\n        uint src = _src;\\n        uint len = _len;\\n\\n        for(; len >= 32; len -= 32) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        uint mask = type(uint).max >> (len << 3);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /**\\n     * @dev Flattens a list of byte strings into one byte string.\\n     * @notice From: https://github.com/sammayo/solidity-rlp-encoder/blob/master/RLPEncode.sol.\\n     * @param _list List of byte strings to flatten.\\n     * @return The flattened byte string.\\n     */\\n    function flatten(bytes[] memory _list) private pure returns (bytes memory) {\\n        if (_list.length == 0) {\\n            return new bytes(0);\\n        }\\n\\n        uint len;\\n        uint i;\\n        for (i = 0; i < _list.length; i++) {\\n            len += _list[i].length;\\n        }\\n\\n        bytes memory flattened = new bytes(len);\\n        uint flattenedPtr;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { flattenedPtr := add(flattened, 0x20) }\\n\\n        for(i = 0; i < _list.length; i++) {\\n            bytes memory item = _list[i];\\n            \\n            uint listPtr;\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly { listPtr := add(item, 0x20)}\\n\\n            memcpy(flattenedPtr, listPtr, item.length);\\n            flattenedPtr += item.length;\\n        }\\n\\n        return flattened;\\n    }\\n\\n}\",\"keccak256\":\"0x9b20150359fe4f8fe048881114ba275d2f96ae73c2ca5fcfac1101fd34d9f7a1\",\"license\":\"MIT\"},\"src/recovery/ERC20Recoverable.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/ERC20Flaggable.sol\\\";\\nimport \\\"./IRecoveryHub.sol\\\";\\nimport \\\"./IRecoverable.sol\\\";\\n\\n/**\\n * @title Recoverable\\n * In case of tokens that represent real-world assets such as shares of a company, one needs a way\\n * to handle lost private keys. With physical certificates, courts can declare share certificates as\\n * invalid so the company can issue replacements. Here, we want a solution that does not depend on\\n * third parties to resolve such cases. Instead, when someone has lost a private key, he can use the\\n * declareLost function on the recovery hub to post a deposit and claim that the shares assigned to a\\n * specific address are lost.\\n * If an attacker trying to claim shares belonging to someone else, they risk losing the deposit\\n * as it can be claimed at anytime by the rightful owner.\\n * Furthermore, if \\\"getClaimDeleter\\\" is defined in the subclass, the returned address is allowed to\\n * delete claims, returning the collateral. This can help to prevent obvious cases of abuse of the claim\\n * function, e.g. cases of front-running.\\n * Most functionality is implemented in a shared RecoveryHub.\\n */\\nabstract contract ERC20Recoverable is ERC20Flaggable, IRecoverable {\\n\\n    uint8 private constant FLAG_CLAIM_PRESENT = 10;\\n\\n    // ERC-20 token that can be used as collateral or 0x0 if disabled\\n    IERC20 public customCollateralAddress;\\n    // Rate the custom collateral currency is multiplied to be valued like one share.\\n    uint256 public customCollateralRate;\\n\\n    uint256 constant CLAIM_PERIOD = 180 days;\\n\\n    IRecoveryHub public override immutable recovery;\\n\\n    constructor(IRecoveryHub recoveryHub){\\n        recovery = recoveryHub;\\n    }\\n\\n    modifier onlyRecovery {\\n        _checkSender(address(recovery));\\n        _;\\n    }\\n\\n    /**\\n     * Returns the collateral rate for the given collateral type and 0 if that type\\n     * of collateral is not accepted. By default, only the token itself is accepted at\\n     * a rate of 1:1.\\n     *\\n     * Subclasses should override this method if they want to add additional types of\\n     * collateral.\\n     */\\n    function getCollateralRate(IERC20 collateralType) public override virtual view returns (uint256) {\\n        if (address(collateralType) == address(this)) {\\n            return 1;\\n        } else if (collateralType == customCollateralAddress) {\\n            return customCollateralRate;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function claimPeriod() external pure override returns (uint256){\\n        return CLAIM_PERIOD;\\n    }\\n\\n    /**\\n     * Allows subclasses to set a custom collateral besides the token itself.\\n     * The collateral must be an ERC-20 token that returns true on successful transfers and\\n     * throws an exception or returns false on failure.\\n     * Also, do not forget to multiply the rate in accordance with the number of decimals of the collateral.\\n     * For example, rate should be 7*10**18 for 7 units of a collateral with 18 decimals.\\n     */\\n    function _setCustomClaimCollateral(IERC20 collateral, uint256 rate) internal {\\n        customCollateralAddress = collateral;\\n        if (address(customCollateralAddress) == address(0)) {\\n            customCollateralRate = 0; // disabled\\n        } else {\\n            if (rate == 0) {\\n                revert Recoverable_RateZero();\\n            }\\n            customCollateralRate = rate;\\n        }\\n    }\\n\\n    function getClaimDeleter() virtual public view returns (address);\\n\\n    function transfer(address recipient, uint256 amount) override(ERC20Flaggable, IERC20) virtual public returns (bool) {\\n        super.transfer(recipient, amount); // no need for safe transfer, as it's our own token\\n        if (hasFlagInternal(msg.sender, FLAG_CLAIM_PRESENT)){\\n            recovery.clearClaimFromToken(msg.sender);\\n        }\\n        return true;\\n    }\\n\\n    function notifyClaimMade(address target) external override onlyRecovery {\\n        setFlag(target, FLAG_CLAIM_PRESENT, true);\\n    }\\n\\n    function notifyClaimDeleted(address target) external override onlyRecovery {\\n        setFlag(target, FLAG_CLAIM_PRESENT, false);\\n    }\\n\\n    function deleteClaim(address lostAddress) external {\\n        _checkSender(getClaimDeleter());\\n        recovery.deleteClaim(lostAddress);\\n    }\\n\\n    function recover(address oldAddress, address newAddress) external override onlyRecovery {\\n        _transfer(oldAddress, newAddress, balanceOf(oldAddress));\\n    }\\n\\n}\",\"keccak256\":\"0x2ddeefacae4bc17a7dadbe6ce0e3389d37de54ab74aed4d085c66b99e9ae62c5\",\"license\":\"LicenseRef-Aktionariat\"},\"src/recovery/IRecoverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"./IRecoveryHub.sol\\\";\\n\\ninterface IRecoverable is IERC20{\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n    //////////////////////////////////////////////////////////////*/\\n    /// The new custom claim collateral rate has to be always > 0. \\n    error Recoverable_RateZero();\\n\\n    // returns the recovery hub\\n    function recovery() external view returns (IRecoveryHub);\\n\\n    function claimPeriod() external view returns (uint256);\\n    \\n    function notifyClaimMade(address target) external;\\n\\n    function notifyClaimDeleted(address target) external;\\n\\n    function getCollateralRate(IERC20 collateral) external view returns(uint256);\\n\\n    function recover(address oldAddress, address newAddress) external;\\n\\n}\",\"keccak256\":\"0xaf83855010ac370e8651b36c899efb59ce895d77bfd9429cd4d9db1c4d32e0bf\",\"license\":\"MIT\"},\"src/recovery/IRecoveryHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IRecoverable.sol\\\";\\nimport \\\"../ERC20/IERC20.sol\\\";\\n\\ninterface IRecoveryHub {\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n    //////////////////////////////////////////////////////////////*/\\n    /// Recovery can be disabled per address.\\n    /// @param lostAddress The address for which the recovery is disabled.\\n    error RecoveryHub_RecoveryDisabled(address lostAddress);\\n    /// No valid collateral type\\n    /// @param collateralType The address of collateral type token\\n    error RecoveryHub_BadCollateral(IERC20 collateralType);\\n    /// No token to able to recover on the lost address\\n    /// @param token The token address which is checked for recovery.\\n    /// @param lostAddress The lost address.\\n    error RecoveryHub_NothingToRecover(IERC20 token, address lostAddress);\\n    /// The was already a claim for this token and address.\\n    /// @param token The token address.\\n    /// @param lostAddress The lost address.\\n    error RecoveryHub_AlreadyClaimed(IERC20 token, address lostAddress);\\n    /// Sender has to be claimant\\n    /// @param sender The msg.sender of the call\\n    error RecoveryHub_InvalidSender(address sender);\\n    /// No claim for this address exists\\n    /// @param lostAddress The checked address \\n    error RecoveryHub_ClaimNotFound(address lostAddress);\\n    /// Recover can only be called after the claim period\\n    /// @param claimPeriodEnd The timestamp when the period ends\\n    /// @param currentTimestamp The block timestamp of the call\\n    error RecoveryHub_InClaimPeriod(uint256 claimPeriodEnd, uint256 currentTimestamp);\\n\\n    function setRecoverable(bool flag) external;\\n    \\n    // deletes claim and transfers collateral back to claimer\\n    function deleteClaim(address target) external;\\n\\n    // clears claim and transfers collateral to holder\\n    function clearClaimFromToken(address holder) external;\\n\\n    function clearClaimFromUser(IRecoverable token) external;\\n\\n}\",\"keccak256\":\"0x26c74df59e64d9426903db28442f955e778f90bb737e7e5076d3ef42e2859624\",\"license\":\"MIT\"},\"src/recovery/RecoveryHub.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IRecoveryHub.sol\\\";\\nimport \\\"./IRecoverable.sol\\\";\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"../utils/SafeERC20.sol\\\";\\n\\ncontract RecoveryHub is IRecoveryHub {\\n\\n    using SafeERC20 for IERC20;\\n\\n    // A struct that represents a claim made\\n    struct Claim {\\n        address claimant; // the person who created the claim\\n        uint256 collateral; // the amount of collateral deposited\\n        uint256 timestamp;  // the timestamp of the block in which the claim was made\\n        IERC20 currencyUsed; // The currency (XCHF) can be updated, we record the currency used for every request\\n    }\\n\\n    mapping(IRecoverable => mapping (address => Claim)) public claims; // there can be at most one claim per token and claimed address\\n    mapping(address => bool) public recoveryDisabled; // disable claimability (e.g. for long term storage)\\n\\n    event ClaimMade(IRecoverable indexed token, address indexed lostAddress, address indexed claimant, uint256 balance);\\n    event ClaimCleared(IRecoverable indexed token, address indexed lostAddress, uint256 collateral);\\n    event ClaimDeleted(IRecoverable indexed token, address indexed lostAddress, address indexed claimant, uint256 collateral);\\n    event ClaimResolved(IRecoverable indexed token, address indexed lostAddress, address indexed claimant, uint256 collateral);\\n\\n    function setRecoverable(bool enabled) external override {\\n        recoveryDisabled[msg.sender] = !enabled;\\n    }\\n\\n    /**\\n     * Some users might want to disable claims for their address completely.\\n     * For example if they use a deep cold storage solution or paper wallet.\\n     */\\n    function isRecoverable(address target) public view returns (bool) {\\n        return !recoveryDisabled[target];\\n    }\\n\\n  /** Anyone can declare that the private key to a certain address was lost by calling declareLost\\n    * providing a deposit/collateral. There are three possibilities of what can happen with the claim:\\n    * 1) The claim period expires and the claimant can get the deposit and the shares back by calling recover\\n    * 2) The \\\"lost\\\" private key is used at any time to call clearClaim. In that case, the claim is deleted and\\n    *    the deposit sent to the shareholder (the owner of the private key). It is recommended to call recover\\n    *    whenever someone transfers funds to let claims be resolved automatically when the \\\"lost\\\" private key is\\n    *    used again.\\n    * 3) The owner deletes the claim and assigns the deposit to the claimant. This is intended to be used to resolve\\n    *    disputes. Generally, using this function implies that you have to trust the issuer of the tokens to handle\\n    *    the situation well. As a rule of thumb, the contract owner should assume the owner of the lost address to be the\\n    *    rightful owner of the deposit.\\n    * It is highly recommended that the owner observes the claims made and informs the owners of the claimed addresses\\n    * whenever a claim is made for their address (this of course is only possible if they are known to the owner, e.g.\\n    * through a shareholder register).\\n    */\\n    function declareLost(IRecoverable token, IERC20 collateralType, address lostAddress) external {\\n        if(recoveryDisabled[lostAddress]) {\\n            revert RecoveryHub_RecoveryDisabled(lostAddress);\\n        }\\n        uint256 collateralRate = IRecoverable(token).getCollateralRate(collateralType);\\n        if (collateralRate == 0) {\\n            // if the there is no rate the collateral isn't accepted\\n            revert RecoveryHub_BadCollateral(collateralType);\\n        }\\n        uint256 balance = IERC20(token).balanceOf(lostAddress);\\n        if (balance == 0) {\\n            // if lost address has no balance, there also nothing to recover\\n            revert RecoveryHub_NothingToRecover(token, lostAddress);\\n        }\\n        uint256 collateral = balance * collateralRate;\\n        IERC20 currency = IERC20(collateralType);\\n        if (claims[token][lostAddress].collateral > 0) {\\n            revert RecoveryHub_AlreadyClaimed(token, lostAddress);\\n        }\\n\\n        claims[token][lostAddress] = Claim({\\n            claimant: msg.sender,\\n            collateral: collateral,\\n            // rely on time stamp is ok, no exact time stamp needed\\n            // solhint-disable-next-line not-rely-on-time\\n            timestamp: block.timestamp,\\n            currencyUsed: collateralType\\n        });\\n        emit ClaimMade(token, lostAddress, msg.sender, balance);\\n        // errors like no allowance/no balance revert generally in the transferFrom\\n        currency.safeTransferFrom(msg.sender, address(this), collateral);\\n        IRecoverable(token).notifyClaimMade(lostAddress);\\n    }\\n\\n    function getClaimant(IRecoverable token, address lostAddress) external view returns (address) {\\n        return claims[token][lostAddress].claimant;\\n    }\\n\\n    function getCollateral(IRecoverable token, address lostAddress) external view returns (uint256) {\\n        return claims[token][lostAddress].collateral;\\n    }\\n\\n    function getCollateralType(IRecoverable token, address lostAddress) external view returns (IERC20) {\\n        return claims[token][lostAddress].currencyUsed;\\n    }\\n\\n    function getTimeStamp(IRecoverable token, address lostAddress) external view returns (uint256) {\\n        return claims[token][lostAddress].timestamp;\\n    }\\n\\n    /**\\n     * Clears a claim after the key has been found again and assigns the collateral to the \\\"lost\\\" address.\\n     * This is the price an adverse claimer pays for filing a false claim and makes it risky to do so.\\n     */\\n    function clearClaimFromToken(address holder) external override {\\n        clearClaim(IRecoverable(msg.sender), holder);\\n    }\\n\\n    function clearClaimFromUser(IRecoverable token) external override {\\n        clearClaim(token, msg.sender);\\n    }\\n\\n    function clearClaim(IRecoverable token, address holder) private {\\n        Claim memory claim = claims[token][holder];\\n        if (claim.collateral > 0){\\n            IERC20 currency = IERC20(claim.currencyUsed);\\n            delete claims[token][holder];\\n            currency.safeTransfer(holder, claim.collateral);\\n            emit ClaimCleared(token, holder, claim.collateral);\\n        }\\n        IRecoverable(token).notifyClaimDeleted(holder);\\n    }\\n\\n   /**\\n    * After the claim period has passed, the claimant can call this function to send the\\n    * tokens on the lost address as well as the collateral to himself.\\n    */\\n    function recover(IRecoverable token, address lostAddress) external {\\n        Claim memory claim = claims[token][lostAddress];\\n        uint256 collateral = claim.collateral;\\n        if (collateral == 0) {\\n            revert RecoveryHub_ClaimNotFound(lostAddress);\\n        }\\n        address claimant = claim.claimant;\\n        if (claimant != msg.sender) {\\n            revert RecoveryHub_InvalidSender(msg.sender);\\n        }\\n        // rely on time stamp is ok, no exact time stamp needed\\n        // solhint-disable-next-line not-rely-on-time\\n        uint256 claimPeriodEnd = claim.timestamp + IRecoverable(token).claimPeriod();\\n        if (claimPeriodEnd > block.timestamp) {\\n            revert RecoveryHub_InClaimPeriod(claimPeriodEnd, block.timestamp);\\n        }\\n        delete claims[token][lostAddress];\\n        emit ClaimResolved(token, lostAddress, claimant, collateral);\\n        IRecoverable(token).notifyClaimDeleted(lostAddress);\\n        IERC20 currency = IERC20(claim.currencyUsed);\\n        currency.safeTransfer(claimant, collateral);\\n        IRecoverable(token).recover(lostAddress, claimant);\\n    }\\n\\n    /**\\n     * The token contract can delete claims. It is the responsibility of the token contract to make sure\\n     * only authorized parties can trigger such a call.\\n     */\\n    function deleteClaim(address lostAddress) external override {\\n        IRecoverable token = IRecoverable(msg.sender);\\n        Claim memory claim = claims[token][lostAddress];\\n        IERC20 currency = IERC20(claim.currencyUsed);\\n        if (claim.collateral == 0) {\\n            revert RecoveryHub_ClaimNotFound(lostAddress);\\n        }\\n        delete claims[token][lostAddress];\\n        emit ClaimDeleted(token, lostAddress, claim.claimant, claim.collateral);\\n        IRecoverable(token).notifyClaimDeleted(lostAddress);\\n        currency.safeTransfer(claim.claimant, claim.collateral);\\n    }\\n\\n}\",\"keccak256\":\"0x41ac60e2522c14a9bb1b40989bc1dc1e1e08d57b6287f4ae4848aaacb841023f\",\"license\":\"LicenseRef-Aktionariat\"},\"src/shares/AllowlistDraggableShares.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/ERC20Allowlistable.sol\\\";\\nimport \\\"./DraggableShares.sol\\\";\\n\\ncontract AllowlistDraggableShares is DraggableShares, ERC20Allowlistable {\\n\\n  constructor(\\n    string memory _terms,\\n    DraggableParams memory _params,\\n    IRecoveryHub _recoveryHub,\\n    IOfferFactory _offerFactory,\\n    address _oracle,\\n    Permit2Hub _permit2Hub\\n  )\\n    DraggableShares(_terms, _params, _recoveryHub, _offerFactory, _oracle, _permit2Hub)\\n    Ownable(_oracle)\\n  {\\n    // initialization is done in ERC20Allowlistbale and DraggableShares\\n  }\\n\\n  function transfer(address to, uint256 value) virtual override(ERC20Flaggable, DraggableShares) public returns (bool) {\\n      return super.transfer(to, value);\\n  }\\n  \\n  function _beforeTokenTransfer(address from, address to, uint256 amount) virtual override(ERC20Allowlistable, DraggableShares) internal {\\n    super._beforeTokenTransfer(from, to, amount);\\n  }\\n\\n    function allowance(address owner, address spender) public view override(DraggableShares, ERC20Flaggable) returns (uint256) {\\n        return super.allowance(owner,spender);\\n  }\\n\\n}\",\"keccak256\":\"0xd5bca815ec6f838e24a4df1a8eed1ea63cf8a597401541807857462d4651df42\",\"license\":\"LicenseRef-Aktionariat\"},\"src/shares/DraggableShares.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"../recovery/ERC20Recoverable.sol\\\";\\nimport \\\"../draggable/ERC20Draggable.sol\\\";\\nimport \\\"../ERC20/ERC20PermitLight.sol\\\";\\nimport \\\"../ERC20/ERC20Permit2.sol\\\";\\n\\n/**\\n * @title CompanyName AG Shares SHA\\n * @author Luzius Meisser, luzius@aktionariat.com\\n *\\n * This is an ERC-20 token representing share tokens of CompanyName AG that are bound to\\n * a shareholder agreement that can be found at the URL defined in the constant 'terms'.\\n */\\ncontract DraggableShares is ERC20Draggable, ERC20Recoverable, ERC20PermitLight, ERC20Permit2 {\\n\\n    // Version history:\\n    // 1: pre permit\\n    // 2: includes permit\\n    // 3: added permit2 allowance, VERSION field\\n    uint8 public constant VERSION = 3;\\n\\n    string public terms;\\n\\n    /// Event when the terms are changed with setTerms().\\n    event ChangeTerms(string terms); \\n\\n    constructor(\\n        string memory _terms,\\n        DraggableParams memory _params,\\n        IRecoveryHub _recoveryHub,\\n        IOfferFactory _offerFactory,\\n        address _oracle,\\n        Permit2Hub _permit2Hub\\n    )\\n        ERC20Draggable(_params, _offerFactory, _oracle)\\n        ERC20Recoverable(_recoveryHub)\\n        ERC20PermitLight() \\n        ERC20Permit2(_permit2Hub)\\n\\n    {\\n        terms = _terms; // to update the terms, migrate to a new contract. That way it is ensured that the terms can only be updated when the quorom agrees.\\n        _recoveryHub.setRecoverable(false);\\n    }\\n\\n    function transfer(address to, uint256 value) virtual override(IERC20, ERC20Flaggable, ERC20Recoverable) public returns (bool) {\\n        return super.transfer(to, value);\\n    }\\n\\n    /**\\n     * Let the oracle act as deleter of invalid claims. In earlier versions, this was referring to the claim deleter\\n     * of the wrapped token. But that stops working after a successful acquisition as the acquisition currency most\\n     * likely does not have a claim deleter.\\n     */\\n    function getClaimDeleter() public view override returns (address) {\\n        return oracle;\\n    }\\n\\n    function getCollateralRate(IERC20 collateralType) public view override returns (uint256) {\\n        uint256 rate = super.getCollateralRate(collateralType);\\n        if (rate > 0) {\\n            return rate;\\n        } else {\\n            // as long as it is binding, the conversion rate is 1:1\\n            uint256 factor = isBinding() ? 1 : unwrapConversionFactor;\\n            if (address(collateralType) == address(wrapped)) {\\n                // allow wrapped token as collateral\\n                return factor;\\n            } else {\\n                // If the wrapped contract allows for a specific collateral, we should too.\\n                // If the wrapped contract is not IRecoverable, we will fail here, but would fail anyway.\\n                return IRecoverable(address(wrapped)).getCollateralRate(collateralType) * factor;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice This function allows the oracle to set the terms.\\n     * @param _terms The new terms.\\n     */\\n    function setTerms(string calldata _terms) external override onlyOracle {\\n        terms = _terms;\\n        emit ChangeTerms(terms);\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) virtual override(ERC20Flaggable, ERC20Draggable) internal {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n\\n    function allowance(address owner, address spender) public view virtual override(ERC20Permit2, ERC20Flaggable, IERC20) returns (uint256) {\\n        return super.allowance(owner, spender);\\n    }\\n\\n}\",\"keccak256\":\"0x7e28af30fa02c86186147120de279f9302423522e9b85aacac49af0c88b1e651\",\"license\":\"LicenseRef-Aktionariat\"},\"src/shares/IShares.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\n\\ninterface IShares is IERC20 {\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n\\t//////////////////////////////////////////////////////////////*/\\n\\t/// New total shares can't be below current valid supply\\n\\t/// @param totalSupply  The current valid supply. \\n\\t/// @param newTotalShares  The new max shares. \\n\\terror Shares_InvalidTotalShares(uint256 totalSupply, uint256 newTotalShares);\\n\\t/// Array lengths have to be equal. \\n\\t/// @param targets Array length of targets. \\n\\t/// @param amount Array length of amounts. \\n\\terror Shares_UnequalLength(uint256 targets, uint256 amount);\\n\\t/// It isn't possible to mint more share token than max shares in existens. \\n\\t/// @param totalShares The max amount of shares. \\n\\t/// @param needed The max amount of shares needed (current valid supply + new mint amount). \\n\\terror Shares_InsufficientTotalShares(uint256 totalShares, uint256 needed);\\n\\n\\tfunction burn(uint256) external;\\n\\n\\tfunction totalShares() external view returns (uint256);\\n}\",\"keccak256\":\"0x7d8fa5ebf42ded9015f436673842fa0a7b0c9c4393c9ab0386c82cdadefee904\",\"license\":\"MIT\"},\"src/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\\n// and modified it.\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Address {\\n\\n    /// @param target Target address to call the function on.\\n    error Address_NotTransferNorContract(address target);\\n\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n        return account.code.length > 0;\\n    }\\n    \\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 weiValue) internal returns (bytes memory) {\\n        if (data.length != 0 && !isContract(target)) {\\n            revert Address_NotTransferNorContract(target);\\n        }\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else if (returndata.length > 0) {\\n            assembly{\\n                revert (add (returndata, 0x20), mload (returndata))\\n            }\\n        } else {\\n           revert(\\\"failed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xb95d45875550203c1afb7dfc9c99ce62c77496c36e96f3adfaad2d42cb3380a2\",\"license\":\"MIT\"},\"src/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    error Initializable_AlreadyInitalized();\\n\\n    /**\\n     * @dev Modifier to protect the initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        if (_initialized) {\\n            revert Initializable_AlreadyInitalized();\\n        }\\n        _;\\n        _initialized = true;\\n    }\\n\\n}\",\"keccak256\":\"0x1e5313ca9baca269b5525c963d04aeb4b8e972e5ce7eba4f4521264b80b09240\",\"license\":\"MIT\"},\"src/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n//\\n// Modifications:\\n// - Replaced Context._msgSender() with msg.sender\\n// - Made leaner\\n// - Extracted interface\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    error Ownable_NotOwner(address sender);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor (address initialOwner) {\\n        owner = initialOwner;\\n        emit OwnershipTransferred(address(0), owner);\\n    }\\n\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    function _checkOwner() internal view {\\n        if (msg.sender != owner) {\\n            revert Ownable_NotOwner(msg.sender);\\n        }\\n    }\\n}\",\"keccak256\":\"0x9057578671d192c7891a59854cf8bab2698450c5b271f21e0696036fb65cae3b\",\"license\":\"MIT\"},\"src/utils/Permit2Hub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport \\\"../utils/Ownable.sol\\\";\\n\\n/// @title Permit2Hub\\n/// @dev This contract manages the Permit2 functionality and access control.\\ncontract Permit2Hub is Ownable {\\n  \\n  /// @dev The address of the Permit2 contract.\\n  address public immutable permit2;\\n  /// @dev Flag to indicate whether Permit2 is disabled.\\n  bool public permit2Disabled = false;\\n\\n  /// @dev Mapping to track addresses for which Permit2 is disabled.\\n  mapping(address => bool) public permit2DisabledForAddress;\\n\\n  /// @dev Emitted when the Permit2 setting is changed.\\n  event ChangedPermit2(bool newSetting);\\n\\n  /// @dev Initializes the Permit2Hub contract with the provided Permit2 address and owner address.\\n  /// @param _permit2 The address of the Permit2 contract.\\n  /// @param _owner The address of the owner.\\n  constructor(address _permit2, address _owner) Ownable(_owner) {\\n    permit2 = _permit2;\\n  }\\n\\n  /// @dev Checks if Permit2 is enabled for the given owner and spender addresses.\\n  /// @param owner The owner address.\\n  /// @param spender The spender address, needs to be the permit2 contract.\\n  /// @return A boolean indicating whether Permit2 is enabled.\\n  function isPermit2Enabled(address owner, address spender) public view returns (bool){\\n    return spender == permit2 && !permit2Disabled && !permit2DisabledForAddress[owner];\\n  }\\n\\n  /// @dev Toggles the global Permit2 setting. Can only be called by the owner.\\n  function togglePermit2() external onlyOwner {\\n    permit2Disabled = !permit2Disabled;\\n    emit ChangedPermit2(permit2Disabled);\\n  }\\n\\n  /// @dev Sets the Permit2 status for a specific address.\\n  /// @param enabled The status to set for the address.\\n  function setPermit2(bool enabled) external {\\n    permit2DisabledForAddress[msg.sender] = !enabled;\\n  }\\n}\\n\",\"keccak256\":\"0xbd98bf8add9d994846ba74e81e283ae1c60d9697a48a3810af43576e44d9d7fb\",\"license\":\"MIT\"},\"src/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// coppied and adjusted from OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../ERC20/IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../ERC20/IERC20Permit.sol\\\";\\nimport {Address} from \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        if (nonceAfter != nonceBefore + 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\",\"keccak256\":\"0xa162e550fe203915126fddc231c55d28dd3f16d39be22dd48c5fc7f5ccd6fd93\",\"license\":\"MIT\"},\"src/utils/factory/AllowlistDraggableFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { AllowlistDraggableShares, DraggableParams } from \\\"../../shares/AllowlistDraggableShares.sol\\\";\\nimport { IERC20Permit } from \\\"../../ERC20/IERC20Permit.sol\\\";\\nimport { FactoryManager } from \\\"./FactoryManager.sol\\\";\\nimport { TokenConfig } from \\\"./FactoryStructs.sol\\\";\\nimport { Ownable } from \\\"../Ownable.sol\\\";\\n\\n/**\\n * @title Allowlist draggable factory\\n * @author rube\\n * \\n * @notice This contract is responsible for creating new AllowlistDraggableShares tokens\\n * @dev Inherits from Ownable for access control\\n */\\ncontract AllowlistDraggableFactory is Ownable {\\n\\n    /// @notice The factory manager contract\\n    FactoryManager public manager;\\n\\n    /// @notice Emitted when the factory manager is updated\\n    /// @param manager The new factory manager address\\n    event FactoryManagerUpdated(FactoryManager manager);\\n\\n    /**\\n     * @notice Constructs a new AllowlistDraggableFactory\\n     * @param _owner The address that will be set as the owner of the contract\\n     */\\n    constructor(address _owner) Ownable(_owner){}\\n\\n    /**\\n     * @notice Creates a new AllowlistDraggableShares token\\n     * @param tokenConfig The configuration for the new token\\n     * @param tokenOwner The address that will own the new token\\n     * @param token The address of the ERC20Permit token to be used\\n     * @return IERC20Permit The address of the newly created AllowlistDraggableShares token\\n     */\\n    function createAllowlistDraggable(TokenConfig calldata tokenConfig, address tokenOwner, IERC20Permit token, string calldata _salt) external returns (IERC20Permit) {\\n        bytes32 salt = bytes32(keccak256(abi.encodePacked(tokenConfig.symbol, token, _salt)));\\n        DraggableParams memory params = DraggableParams(\\n            token,\\n            tokenConfig.quorumDrag,\\n            tokenConfig.quorumMigration,\\n            tokenConfig.votePeriod\\n        );\\n\\n        return new AllowlistDraggableShares{salt: salt}(\\n            tokenConfig.terms,\\n            params, \\n            manager.recoveryHub(),\\n            manager.offerFactory(),\\n            tokenOwner,\\n            manager.permit2Hub()\\n        );\\n    }\\n\\n    /**\\n     * @notice Sets a new factory manager\\n     * @dev Can only be called by the contract owner\\n     * @param _manager The address of the new factory manager\\n     */\\n    function setManager(FactoryManager _manager) external onlyOwner {\\n        manager = _manager;\\n        emit FactoryManagerUpdated(manager);\\n    }\\n\\n}\",\"keccak256\":\"0xd0726af86b7abbcce4382c8dd3e631f881aa2166c72040e12d156a3be8d204d8\",\"license\":\"MIT\"},\"src/utils/factory/FactoryManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IOfferFactory } from \\\"../../draggable/IOfferFactory.sol\\\";\\nimport { MultiSigCloneFactory } from \\\"../../multisig/MultiSigCloneFactory.sol\\\";\\nimport { Ownable } from \\\"../Ownable.sol\\\";\\nimport { PaymentHub } from \\\"../../brokerbot/PaymentHub.sol\\\";\\nimport { Permit2Hub } from \\\"../Permit2Hub.sol\\\";\\nimport { RecoveryHub } from \\\"../../recovery/RecoveryHub.sol\\\";\\n\\n/**\\n * @title Factory Mangager for common contracts\\n * @author rube\\n * \\n */\\ncontract FactoryManager is Ownable {\\n\\n  IOfferFactory public offerFactory;\\n  MultiSigCloneFactory public multisigFactory;\\n  PaymentHub public paymentHub;\\n  RecoveryHub public recoveryHub;\\n  Permit2Hub public permit2Hub;\\n\\n  event PaymentHubUpdated(PaymentHub indexed paymentHub);\\n  event OfferFactoryUpdated(IOfferFactory indexed offerFactory);\\n  event RecoveryHubUpdated(RecoveryHub indexed recoveryHub);\\n  event Permit2HubUpdated(Permit2Hub indexed permit2Hub);\\n  event MultiSigCloneFactoryUpdated(MultiSigCloneFactory indexed MultiSigCloneFactory);\\n\\n  constructor(address _owner) Ownable(_owner) {}\\n\\n\\n  function setPaymentHub(PaymentHub _paymentHub) external onlyOwner() {\\n    paymentHub = _paymentHub;\\n    emit PaymentHubUpdated(paymentHub);\\n  }\\n\\n  function setOfferFactory(IOfferFactory _offerFactory) external onlyOwner() {\\n    offerFactory = _offerFactory;\\n    emit OfferFactoryUpdated(offerFactory);\\n  }\\n\\n  function setRecoveryHub(RecoveryHub _recoveryHub) external onlyOwner() {\\n    recoveryHub = _recoveryHub;\\n    emit RecoveryHubUpdated(recoveryHub);\\n  }\\n  \\n  function setMultiSigCloneFactory(MultiSigCloneFactory _multsigFactory) external onlyOwner() {\\n    multisigFactory = _multsigFactory;\\n    emit MultiSigCloneFactoryUpdated(multisigFactory);\\n  }\\n\\n  function setPermit2Hub(Permit2Hub _permit2Hub) external onlyOwner() {\\n    permit2Hub = _permit2Hub;\\n    emit Permit2HubUpdated(permit2Hub);\\n  }\\n}\",\"keccak256\":\"0x56066d883c84de0069eaa10062dd3e9acce69d5039df8db65ac2ab807b2395fd\",\"license\":\"MIT\"},\"src/utils/factory/FactoryStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"../../ERC20/IERC20.sol\\\";\\n\\nstruct TokenConfig{\\n  string name;\\n  string symbol;\\n  string terms;\\n  bool allowlist;\\n  bool draggable;\\n  uint256 numberOfShares;\\n  uint256 quorumDrag;\\n  uint256 quorumMigration;\\n  uint256 votePeriod;\\n}\\n\\nstruct BrokerbotConfig {\\n  uint256 price;\\n  uint256 increment;\\n  IERC20 baseCurrency;\\n}\",\"keccak256\":\"0x3f80f4a1a88e6d85716aa84b862baf1e2467f304e591d7cd632b0c6bbe8b7479\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50604051613e3f380380613e3f833981016040819052602c91607a565b600080546001600160a01b0319166001600160a01b03831690811782556040518392907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3505060a8565b600060208284031215608b57600080fd5b81516001600160a01b038116811460a157600080fd5b9392505050565b613d88806100b76000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063481c6a751461005c5780634dfe44d21461008b5780638da5cb5b1461009e578063d0ebdbe7146100b1578063f2fde38b146100c6575b600080fd5b60015461006f906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b61006f61009936600461040b565b6100d9565b60005461006f906001600160a01b031681565b6100c46100bf3660046104d2565b6102f4565b005b6100c46100d43660046104d2565b610350565b6000806100e960208801886104f6565b868686604051602001610100959493929190610544565b60408051601f1981840301815282825280516020918201206080840183526001600160a01b038916845260c08b01359184019190915260e08a0135838301526101008a013560608401529250829061015a908a018a6104f6565b60015460408051639220623b60e01b8152905186926001600160a01b031691639220623b9160048083019260209291908290030181865afa1580156101a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c7919061057e565b600160009054906101000a90046001600160a01b03166001600160a01b031663ecd7cf786040518163ffffffff1660e01b8152600401602060405180830381865afa15801561021a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023e919061057e565b600154604080516318efcce560e01b815290518f926001600160a01b0316916318efcce59160048083019260209291908290030181865afa158015610287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ab919061057e565b6040516102b7906103e6565b6102c7979695949392919061059b565b8190604051809103906000f59050801580156102e7573d6000803e3d6000fd5b5098975050505050505050565b6102fc6103b3565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f7374c03893422e168ea189118b40932f7c665b7dbcd921b4d7580ca758cc1e409060200160405180910390a150565b6103586103b3565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146103e4576040516396a19be960e01b815233600482015260240160405180910390fd5b565b61370e8061064583390190565b6001600160a01b038116811461040857600080fd5b50565b60008060008060006080868803121561042357600080fd5b853567ffffffffffffffff8082111561043b57600080fd5b90870190610120828a03121561045057600080fd5b909550602087013590610462826103f3565b909450604087013590610474826103f3565b9093506060870135908082111561048a57600080fd5b818801915088601f83011261049e57600080fd5b8135818111156104ad57600080fd5b8960208285010111156104bf57600080fd5b9699959850939650602001949392505050565b6000602082840312156104e457600080fd5b81356104ef816103f3565b9392505050565b6000808335601e1984360301811261050d57600080fd5b83018035915067ffffffffffffffff82111561052857600080fd5b60200191503681900382131561053d57600080fd5b9250929050565b8486823760008582016bffffffffffffffffffffffff198660601b1681528385601483013760009301601401928352509095945050505050565b60006020828403121561059057600080fd5b81516104ef816103f3565b61012080825281018790526000610140888a828501376000818a8501015280601f19601f8b011684010191505060018060a01b03875116602083015260208701516040830152604087015160608301526060870151608083015261060a60a08301876001600160a01b03169052565b6001600160a01b03851660c08301526001600160a01b03841660e08301526001600160a01b0383166101008301529897505050505050505056fe610140604052600060045534801561001657600080fd5b5060405161370e38038061370e83398101604081905261003591610366565b6003805486516001600160a81b03199091166101006001600160a01b03928316810291909117909255602087015160c052604087015160a052606087015160e052848116608052600680546001600160a01b03191685831617905585811690915281166101205281868686868486600a6100af87826104f1565b50604051636427ed9760e01b8152600060048201526001600160a01b03851690636427ed9790602401600060405180830381600087803b1580156100f257600080fd5b505af1158015610106573d6000803e3d6000fd5b5050600b80546001600160a01b0319166001600160a01b038b16908117909155604051909850600097507f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e096508795509350505050a3506101676001610172565b5050505050506105dd565b600b805482158015600160a01b0260ff60a01b19909216919091179091556101a3576101a0600060046101aa565b50565b6101a06000805b6101bc82601460ff8416600114610225565b6101ce82601560ff8416600214610225565b6101e082601660ff8416600414610225565b60405160ff821681526001600160a01b038316907fe423d7d31023dbacefed7c937785d0012ad8f314381295efebfc0471d2c434549060200160405180910390a25050565b60006102328360e06105b0565b6001600160a01b038516600090815260208190526040902054600160ff929092169190911b9150808216821483151514610284576001600160a01b038516600090815260208190526040902081831890555b5050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156102c9576102c961028b565b604052919050565b6001600160a01b03811681146101a057600080fd5b6000608082840312156102f857600080fd5b604051608081016001600160401b038111828210171561031a5761031a61028b565b8060405250809150825161032d816102d1565b808252506020830151602082015260408301516040820152606083015160608201525092915050565b8051610361816102d1565b919050565b600080600080600080610120878903121561038057600080fd5b86516001600160401b038082111561039757600080fd5b818901915089601f8301126103ab57600080fd5b8151818111156103bd576103bd61028b565b602091506103d3601f8201601f191683016102a1565b8181528b838386010111156103e757600080fd5b60005b828110156104055784810184015182820185015283016103ea565b506000838383010152809950505061041f8a828b016102e6565b9650505061042f60a08801610356565b935061043d60c08801610356565b925061044b60e08801610356565b915061045a6101008801610356565b90509295509295509295565b600181811c9082168061047a57607f821691505b60208210810361049a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156104ec576000816000526020600020601f850160051c810160208610156104c95750805b601f850160051c820191505b818110156104e8578281556001016104d5565b5050505b505050565b81516001600160401b0381111561050a5761050a61028b565b61051e816105188454610466565b846104a0565b602080601f831160018114610553576000841561053b5750858301515b600019600386901b1c1916600185901b1785556104e8565b600085815260208120601f198616915b8281101561058257888601518255948401946001909101908401610563565b50858210156105a05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60ff81811683821601908111156105d757634e487b7160e01b600052601160045260246000fd5b92915050565b60805160a05160c05160e0516101005161012051613095610679600039600081816104b801526123ab015260008181610a1101528181610dc9015281816110150152818161137d0152818161184e01526122b1015260008181610860015261169d01526000818161046f0152611677015260008181610aa501528181611a280152611a6401526000818161095401526116c601526130956000f3fe60806040526004361061038c5760003560e01c80637ecebe00116101dc578063c45a015511610102578063de0e9a3e116100a0578063f2fde38b1161006f578063f2fde38b14610ac7578063f5c0b95f14610ae7578063fcb79a7e14610b07578063ffa1ad7414610b2757600080fd5b8063de0e9a3e14610a33578063e445d70a14610a53578063e5b824ec14610a73578063efa4051214610a9357600080fd5b8063d505accf116100dc578063d505accf146109ac578063dcc7d4ad146109cc578063dd62ed3e146109df578063ddceafa9146109ff57600080fd5b8063c45a015514610942578063d37a9bb014610976578063d50256251461099757600080fd5b8063a4c0ed361161017a578063bf376c7a11610149578063bf376c7a146108c2578063c028df06146108e2578063c07473f614610902578063c18172c41461092257600080fd5b8063a4c0ed361461082e578063a78135871461084e578063a9059cbb14610882578063b1c8db66146108a257600080fd5b806395d89b41116101b657806395d89b41146107c35780639e37878c146107d85780639e4b5745146107f8578063a49a7cb11461080e57600080fd5b80637ecebe00146107615780638da5cb5b1461078e5780638fd3ab80146107ae57600080fd5b806332bc320b116102c1578063609181171161025f57806378f86afc1161022e57806378f86afc146106eb5780637adbf9731461070b5780637dc0d1d01461072b5780637dc2cd981461074b57600080fd5b80636091811714610675578063648bf7741461068b57806370a08231146106ab57806377e071ad146106cb57600080fd5b806342966c681161029b57806342966c68146105f0578063429c66f01461061057806345c8a62b1461063057806350e70d481461065057600080fd5b806332bc320b146105a65780633644e515146105bb5780634000aea0146105d057600080fd5b806318efcce51161032e5780632a0a4ed5116103085780632a0a4ed51461051c5780632b3430991461053a578063313ce5671461055a57806332a7ae951461058657600080fd5b806318efcce5146104a657806319845354146104da57806323b872dd146104fc57600080fd5b80630a81b2de1161036a5780630a81b2de146104105780630c6f0e5d146104255780631703a0181461045d57806318160ddd1461049157600080fd5b806306fdde03146103915780630832e470146103bc578063095ea7b3146103e0575b600080fd5b34801561039d57600080fd5b506103a6610b3c565b6040516103b39190612846565b60405180910390f35b3480156103c857600080fd5b506103d260045481565b6040519081526020016103b3565b3480156103ec57600080fd5b506104006103fb36600461286e565b610c03565b60405190151581526020016103b3565b34801561041c57600080fd5b506103d2610c1a565b34801561043157600080fd5b50600754610445906001600160a01b031681565b6040516001600160a01b0390911681526020016103b3565b34801561046957600080fd5b506103d27f000000000000000000000000000000000000000000000000000000000000000081565b34801561049d57600080fd5b506002546103d2565b3480156104b257600080fd5b506104457f000000000000000000000000000000000000000000000000000000000000000081565b3480156104e657600080fd5b506104fa6104f536600461286e565b610c98565b005b34801561050857600080fd5b5061040061051736600461289a565b610d20565b34801561052857600080fd5b506006546001600160a01b0316610445565b34801561054657600080fd5b506104006105553660046128db565b610d83565b34801561056657600080fd5b506003546105749060ff1681565b60405160ff90911681526020016103b3565b34801561059257600080fd5b506104fa6105a13660046128db565b610d90565b3480156105b257600080fd5b506104fa610e29565b3480156105c757600080fd5b506103d2610e50565b3480156105dc57600080fd5b506104006105eb366004612941565b610ea9565b3480156105fc57600080fd5b506104fa61060b36600461299d565b610f3a565b34801561061c57600080fd5b506104fa61062b3660046129c7565b610f9b565b34801561063c57600080fd5b506104fa61064b3660046128db565b610fec565b34801561065c57600080fd5b506003546104459061010090046001600160a01b031681565b34801561068157600080fd5b506103d260085481565b34801561069757600080fd5b506104fa6106a6366004612a4b565b611010565b3480156106b757600080fd5b506103d26106c63660046128db565b61104c565b3480156106d757600080fd5b506103d26106e63660046128db565b611070565b3480156106f757600080fd5b506104fa610706366004612a84565b611155565b34801561071757600080fd5b506104fa6107263660046128db565b6111b4565b34801561073757600080fd5b50600654610445906001600160a01b031681565b34801561075757600080fd5b5062ed4e006103d2565b34801561076d57600080fd5b506103d261077c3660046128db565b60096020526000908152604090205481565b34801561079a57600080fd5b50600b54610445906001600160a01b031681565b3480156107ba57600080fd5b506104fa61121d565b3480156107cf57600080fd5b506103a661122a565b3480156107e457600080fd5b506104006107f33660046128db565b6112cb565b34801561080457600080fd5b5060045415610400565b34801561081a57600080fd5b506104fa610829366004612ac6565b6112d8565b34801561083a57600080fd5b50610400610849366004612941565b6112ea565b34801561085a57600080fd5b506103d27f000000000000000000000000000000000000000000000000000000000000000081565b34801561088e57600080fd5b5061040061089d36600461286e565b61131c565b3480156108ae57600080fd5b506104006108bd3660046128db565b611328565b3480156108ce57600080fd5b506104fa6108dd36600461286e565b611346565b3480156108ee57600080fd5b50600554610445906001600160a01b031681565b34801561090e57600080fd5b506103d261091d3660046128db565b61136d565b34801561092e57600080fd5b506104fa61093d3660046128db565b611378565b34801561094e57600080fd5b506104457f000000000000000000000000000000000000000000000000000000000000000081565b34801561098257600080fd5b50600b5461040090600160a01b900460ff1681565b3480156109a357600080fd5b506103a66113ae565b3480156109b857600080fd5b506104fa6109c7366004612afb565b61143c565b6104fa6109da366004612b69565b6115f1565b3480156109eb57600080fd5b506103d26109fa366004612a4b565b6117cc565b348015610a0b57600080fd5b506104457f000000000000000000000000000000000000000000000000000000000000000081565b348015610a3f57600080fd5b506104fa610a4e36600461299d565b6117d8565b348015610a5f57600080fd5b506104fa610a6e366004612bb0565b611838565b348015610a7f57600080fd5b506104fa610a8e3660046128db565b611849565b348015610a9f57600080fd5b506103d27f000000000000000000000000000000000000000000000000000000000000000081565b348015610ad357600080fd5b506104fa610ae23660046128db565b61187f565b348015610af357600080fd5b50610400610b02366004612ac6565b6118e3565b348015610b1357600080fd5b506104fa610b22366004612a4b565b6118ef565b348015610b3357600080fd5b50610574600381565b60606000600360019054906101000a90046001600160a01b03166001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610b93573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bbb9190810190612be3565b9050610bc76004541590565b15610bf25780604051602001610bdd9190612c90565b60405160208183030381529060405291505090565b80604051602001610bdd9190612cb8565b6000610c10338484611922565b5060015b92915050565b6000600360019054906101000a90046001600160a01b03166001600160a01b0316633a98ef396040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c939190612ce6565b905090565b600654610cad906001600160a01b0316611984565b610cb5610c1a565b81610cbf60025490565b610cc99190612d15565b1115610d1257610cd7610c1a565b81610ce160025490565b610ceb9190612d15565b604051630429590f60e41b8152600481019290925260248201526044015b60405180910390fd5b610d1c82826119af565b5050565b6000610d2d848484611b18565b6000610d3985336117cc565b9050600160ff1b811015610d7657610d518382612d28565b6001600160a01b03861660009081526001602090815260408083203384529091529020555b60019150505b9392505050565b6000610c14826016611b7c565b610daa610da56006546001600160a01b031690565b611984565b6040516332a7ae9560e01b81526001600160a01b0382811660048301527f000000000000000000000000000000000000000000000000000000000000000016906332a7ae95906024015b600060405180830381600087803b158015610e0e57600080fd5b505af1158015610e22573d6000803e3d6000fd5b5050505050565b600554610e3e906001600160a01b0316611984565b600580546001600160a01b0319169055565b604080517f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692186020820152469181019190915230606082015260009060800160405160208183030381529060405280519060200120905090565b6000610eb5858561131c565b8015610f315750604051635260769b60e11b81526001600160a01b0386169063a4c0ed3690610eee903390889088908890600401612d3b565b6020604051808303816000875af1158015610f0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f319190612d83565b95945050505050565b610f443382611bbc565b6003546001600160a01b03610100909104166342966c68610f656004541590565b610f7b57600454610f769084612da0565b610f7d565b825b6040518263ffffffff1660e01b8152600401610df491815260200190565b610fa3611c30565b60005b82811015610fe657610fde848483818110610fc357610fc3612db7565b9050602002016020810190610fd891906128db565b836112d8565b600101610fa6565b50505050565b600554611001906001600160a01b0316611984565b61100d81600180611c5d565b50565b6110397f0000000000000000000000000000000000000000000000000000000000000000611984565b610d1c82826110478561104c565b611b18565b6001600160a01b03166000908152602081905260409020546001600160e01b031690565b60008061107c83611cc1565b9050801561108a5792915050565b60006110966004541590565b6110a2576004546110a5565b60015b6003549091506001600160a01b036101009091048116908516036110ca579392505050565b6003546040516377e071ad60e01b81526001600160a01b0386811660048301528392610100900416906377e071ad90602401602060405180830381865afa158015611119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113d9190612ce6565b6111479190612da0565b949350505050565b50919050565b60065461116a906001600160a01b0316611984565b600a611177828483612e51565b507fe9f2468ecc8d3dff15a70a5909151e6297cee4cf05268eff3d7ef0c696ec50f2600a6040516111a89190612f11565b60405180910390a15050565b6006546111c9906001600160a01b0316611984565b600680546001600160a01b0319166001600160a01b0383169081179091556040519081527fc3977c9522c218453912bcab15964a7788968fbf3fe4d4e2965252c9f07055de9060200160405180910390a150565b6112283360006119af565b565b6060600360019054906101000a90046001600160a01b03166001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561127f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112a79190810190612be3565b6040516020016112b79190612fa1565b604051602081830303815290604052905090565b6000610c14826015611b7c565b6112e0611c30565b610d1c8282611d06565b6003546000906113079061010090046001600160a01b0316611984565b6113118585611d81565b506001949350505050565b6000610d7c8383611ded565b6000611335826014611b7c565b80610c145750610c14826016611b7c565b6003546113639061010090046001600160a01b0316333084611df9565b610d1c8282611d81565b6000610c148261104c565b6113a17f0000000000000000000000000000000000000000000000000000000000000000611984565b61100d81600a6001611c5d565b600a80546113bb90612dcd565b80601f01602080910402602001604051908101604052809291908181526020018280546113e790612dcd565b80156114345780601f1061140957610100808354040283529160200191611434565b820191906000526020600020905b81548152906001019060200180831161141757829003601f168201915b505050505081565b4284101561146657604051630b99fc4b60e31b815260048101859052426024820152604401610d09565b60006001611472610e50565b6001600160a01b038a811660008181526009602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa15801561157e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615806115b35750876001600160a01b0316816001600160a01b031614155b156115dc57604051632f52260d60e11b81526001600160a01b0382166004820152602401610d09565b6115e7818888611922565b5050505050505050565b60016115fd6004541590565b151581151514611644578015611626576040516305a34cd360e01b815260040160405180910390fd5b806116445760405163291c3d8560e01b815260040160405180910390fd5b604051634dc5e43160e01b815260048101859052336024820152604481018490526001600160a01b0383811660648301527f000000000000000000000000000000000000000000000000000000000000000060848301527f000000000000000000000000000000000000000000000000000000000000000060a48301526000917f000000000000000000000000000000000000000000000000000000000000000090911690634dc5e43190349060c40160206040518083038185885af1158015611712573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906117379190612fc6565b9050611741611e60565b156117a657600554604051637b64620f60e11b81526001600160a01b0383811660048301529091169063f6c8c41e90602401600060405180830381600087803b15801561178d57600080fd5b505af11580156117a1573d6000803e3d6000fd5b505050505b600580546001600160a01b0319166001600160a01b039290921691909117905550505050565b6000610d7c8383611ef5565b60006117e46004541590565b15158115151461182b57801561180d576040516305a34cd360e01b815260040160405180910390fd5b8061182b5760405163291c3d8560e01b815260040160405180910390fd5b610d1c3383600454611f01565b611840611c30565b61100d81611f36565b6118727f0000000000000000000000000000000000000000000000000000000000000000611984565b61100d81600a6000611c5d565b611887611c30565b600b546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000610d7c8383611b7c565b600554611904906001600160a01b0316611984565b611918826119118461104c565b6001611f01565b610d1c8183611f6f565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b336001600160a01b0382161461100d57604051634b637e8f60e11b8152336004820152602401610d09565b60006119ba8361104c565b6119c49083612d15565b905060006119d0610c1a565b9050808211156119fd57604051630429590f60e41b81526004810182905260248101839052604401610d09565b611a05611e60565b15611a23576040516331dec02560e21b815260040160405180910390fd5b611a4d7f000000000000000000000000000000000000000000000000000000000000000082612da0565b611a5961271084612da0565b1015611ab757611a897f000000000000000000000000000000000000000000000000000000000000000082612da0565b611a9561271084612da0565b604051634b2737cf60e11b815260048101929092526024820152604401610d09565b611ac18485611f6f565b604080516001600160a01b038616815260208101849052908101849052606081018290527f85e5711a70a7d2bae18e1232af474d82c98600b0e62fe079a28208520b58568e9060800160405180910390a150505050565b611b23838383612132565b611b2d838261213d565b611b3782826121da565b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161197791815260200190565b600080611b8a8360e0612fe3565b6001600160a01b038516600090815260208190526040902054600160ff929092169190911b9081161491505092915050565b611bc882600083612132565b8060026000828254611bda9190612d28565b90915550611bea9050828261213d565b6040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600b546001600160a01b03163314611228576040516396a19be960e01b8152336004820152602401610d09565b6000611c6a8360e0612fe3565b6001600160a01b038516600090815260208190526040902054600160ff929092169190911b9150808216821483151514610e22576001600160a01b0394909416600090815260208190526040902093189092555050565b6000306001600160a01b03831603611cdb57506001919050565b6007546001600160a01b0390811690831603611cf957505060085490565b506000919050565b919050565b611d1882601460ff8416600114611c5d565b611d2a82601560ff8416600214611c5d565b611d3c82601660ff8416600414611c5d565b60405160ff821681526001600160a01b038316907fe423d7d31023dbacefed7c937785d0012ad8f314381295efebfc0471d2c434549060200160405180910390a25050565b611d8d60008383612132565b8060026000828254611d9f9190612d15565b90915550611daf905082826121da565b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611c24565b6000610d7c838361227f565b6040516001600160a01b038481166024830152838116604483015260648201839052610fe69186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505061231e565b6005546000906001600160a01b031615801590610c935750600560009054906101000a90046001600160a01b03166001600160a01b0316638fe8a1016040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ecb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eef9190612d83565b15905090565b6000610d7c8383612381565b611f0b8383611bbc565b611f3183611f198385612da0565b60035461010090046001600160a01b03169190612452565b505050565b600b805482158015600160a01b0260ff60a01b1990921691909117909155611f645761100d60006004611d06565b61100d600080611d06565b6001611f7b6004541590565b151581151514611fc2578015611fa4576040516305a34cd360e01b815260040160405180910390fd5b80611fc25760405163291c3d8560e01b815260040160405180910390fd5b6003546040516370a0823160e01b81523060048201526120389184916101009091046001600160a01b0316906370a0823190602401602060405180830381865afa158015612014573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f199190612ce6565b60038054610100600160a81b0319166101006001600160a01b03861602179055600254600010156120e6576120e661206f60025490565b6040516370a0823160e01b81523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa1580156120b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d79190612ce6565b6120e19190612ffc565b612483565b7f6c20b91d1723b78732eba64ff11ebd7966a6e4af568a00fa4f6b72c20f58b02a61210f610b3c565b61211761122a565b60405161212592919061301e565b60405180910390a1505050565b611f318383836124a9565b6001600160a01b038216600090815260208190526040812054906121618383612d28565b90506001600160e01b031981166001600160e01b03198316146121b957836121888561104c565b60405163391434e360e21b81526001600160a01b039092166004830152602482015260448101849052606401610d09565b6001600160a01b039093166000908152602081905260409020929092555050565b6001600160a01b03821661220c5760405163ec442f0560e01b81526001600160a01b0383166004820152602401610d09565b6001600160a01b038216600090815260208190526040812054906122308383612d15565b90506001600160e01b031981166001600160e01b03198316146121b957604051634a2e08e560e01b81526001600160a01b03851660048201526024810183905260448101849052606401610d09565b600061228b8383612615565b5061229733600a611b7c565b15610c10576040516304d301a360e41b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634d301a3090602401600060405180830381600087803b1580156122fd57600080fd5b505af1158015612311573d6000803e3d6000fd5b5050505050600192915050565b60006123336001600160a01b03841683612622565b905080516000141580156123585750808060200190518101906123569190612d83565b155b15611f3157604051635274afe760e01b81526001600160a01b0384166004820152602401610d09565b604051632fb6b53160e11b81526001600160a01b03838116600483015282811660248301526000917f000000000000000000000000000000000000000000000000000000000000000090911690635f6d6a6290604401602060405180830381865afa1580156123f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124189190612d83565b156124265750600019610c14565b506001600160a01b03828116600090815260016020908152604080832093851683529290522054610c14565b6040516001600160a01b03838116602483015260448201839052611f3191859182169063a9059cbb90606401611e2e565b806000036124a457604051631dca7a7560e11b815260040160405180910390fd5b600455565b6124b4838383612630565b6124bd82611328565b611f31576124ca826112cb565b1561251257600b54600160a01b900460ff161561250557604051630329a43160e51b81526001600160a01b0383166004820152602401610d09565b611f318260156000611c5d565b61251b83610d83565b156125715761252d8260146001611c5d565b604051600181526001600160a01b038316907fe423d7d31023dbacefed7c937785d0012ad8f314381295efebfc0471d2c434549060200160405180910390a2505050565b61257c836014611b7c565b156125c457600b54600160a01b900460ff16156125b75760405163dd1aceed60e01b81526001600160a01b0383166004820152602401610d09565b611f318360146000611c5d565b6125cd836112cb565b15611f3157600b54600160a01b900460ff161561260857604051637882255360e11b81526001600160a01b0384166004820152602401610d09565b611f318360156000611c5d565b6000610c10338484611b18565b6060610d7c8383600061263b565b611f31838383612732565b6060825160001415801561265757506001600160a01b0384163b155b1561268057604051639eb1341360e01b81526001600160a01b0385166004820152602401610d09565b600080856001600160a01b0316848660405161269c9190613043565b60006040518083038185875af1925050503d80600081146126d9576040519150601f19603f3d011682016040523d82523d6000602084013e6126de565b606091505b509150915081156126f2579150610d7c9050565b80511561270157805160208201fd5b60405162461bcd60e51b815260206004820152600660248201526519985a5b195960d21b6044820152606401610d09565b61273b836127e9565b8061274a575061274a826127e9565b15611f3157612757611e60565b156127cf5760055460405163e1a1810f60e01b81526001600160a01b0385811660048301528481166024830152604482018490529091169063e1a1810f90606401600060405180830381600087803b1580156127b257600080fd5b505af11580156127c6573d6000803e3d6000fd5b50505050505050565b6127dc8360016000611c5d565b611f318260016000611c5d565b6000610c14826001611b7c565b60005b838110156128115781810151838201526020016127f9565b50506000910152565b600081518084526128328160208601602086016127f6565b601f01601f19169290920160200192915050565b602081526000610d7c602083018461281a565b6001600160a01b038116811461100d57600080fd5b6000806040838503121561288157600080fd5b823561288c81612859565b946020939093013593505050565b6000806000606084860312156128af57600080fd5b83356128ba81612859565b925060208401356128ca81612859565b929592945050506040919091013590565b6000602082840312156128ed57600080fd5b8135610d7c81612859565b60008083601f84011261290a57600080fd5b50813567ffffffffffffffff81111561292257600080fd5b60208301915083602082850101111561293a57600080fd5b9250929050565b6000806000806060858703121561295757600080fd5b843561296281612859565b935060208501359250604085013567ffffffffffffffff81111561298557600080fd5b612991878288016128f8565b95989497509550505050565b6000602082840312156129af57600080fd5b5035919050565b803560ff81168114611d0157600080fd5b6000806000604084860312156129dc57600080fd5b833567ffffffffffffffff808211156129f457600080fd5b818601915086601f830112612a0857600080fd5b813581811115612a1757600080fd5b8760208260051b8501011115612a2c57600080fd5b602092830195509350612a4291860190506129b6565b90509250925092565b60008060408385031215612a5e57600080fd5b8235612a6981612859565b91506020830135612a7981612859565b809150509250929050565b60008060208385031215612a9757600080fd5b823567ffffffffffffffff811115612aae57600080fd5b612aba858286016128f8565b90969095509350505050565b60008060408385031215612ad957600080fd5b8235612ae481612859565b9150612af2602084016129b6565b90509250929050565b600080600080600080600060e0888a031215612b1657600080fd5b8735612b2181612859565b96506020880135612b3181612859565b95506040880135945060608801359350612b4d608089016129b6565b925060a0880135915060c0880135905092959891949750929550565b600080600060608486031215612b7e57600080fd5b83359250602084013591506040840135612b9781612859565b809150509250925092565b801515811461100d57600080fd5b600060208284031215612bc257600080fd5b8135610d7c81612ba2565b634e487b7160e01b600052604160045260246000fd5b600060208284031215612bf557600080fd5b815167ffffffffffffffff80821115612c0d57600080fd5b818401915084601f830112612c2157600080fd5b815181811115612c3357612c33612bcd565b604051601f8201601f19908116603f01168101908382118183101715612c5b57612c5b612bcd565b81604052828152876020848701011115612c7457600080fd5b612c858360208301602088016127f6565b979650505050505050565b60008251612ca28184602087016127f6565b632053484160e01b920191825250600401919050565b60008251612cca8184602087016127f6565b692028577261707065642960b01b920191825250600a01919050565b600060208284031215612cf857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610c1457610c14612cff565b81810381811115610c1457610c14612cff565b6001600160a01b0385168152602081018490526060604082018190528101829052818360808301376000818301608090810191909152601f909201601f191601019392505050565b600060208284031215612d9557600080fd5b8151610d7c81612ba2565b8082028115828204841417610c1457610c14612cff565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680612de157607f821691505b60208210810361114f57634e487b7160e01b600052602260045260246000fd5b601f821115611f31576000816000526020600020601f850160051c81016020861015612e2a5750805b601f850160051c820191505b81811015612e4957828155600101612e36565b505050505050565b67ffffffffffffffff831115612e6957612e69612bcd565b612e7d83612e778354612dcd565b83612e01565b6000601f841160018114612eb15760008515612e995750838201355b600019600387901b1c1916600186901b178355610e22565b600083815260209020601f19861690835b82811015612ee25786850135825560209485019460019092019101612ec2565b5086821015612eff5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6000602080835260008454612f2581612dcd565b8060208701526040600180841660008114612f475760018114612f6357612f93565b60ff19851660408a0152604084151560051b8a01019550612f93565b89600052602060002060005b85811015612f8a5781548b8201860152908301908801612f6f565b8a016040019650505b509398975050505050505050565b60008251612fb38184602087016127f6565b605360f81b920191825250600101919050565b600060208284031215612fd857600080fd5b8151610d7c81612859565b60ff8181168382160190811115610c1457610c14612cff565b60008261301957634e487b7160e01b600052601260045260246000fd5b500490565b604081526000613031604083018561281a565b8281036020840152610f31818561281a565b600082516130558184602087016127f6565b919091019291505056fea26469706673582212208929d01df4aaa37b760d0a23552b06f01eda02168725ba2748fc6611ab59777764736f6c63430008190033a264697066735822122046c4d06c69f604bb806126db0cee2496e2900871e2594429b7eb647e82a2b80c64736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063481c6a751461005c5780634dfe44d21461008b5780638da5cb5b1461009e578063d0ebdbe7146100b1578063f2fde38b146100c6575b600080fd5b60015461006f906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b61006f61009936600461040b565b6100d9565b60005461006f906001600160a01b031681565b6100c46100bf3660046104d2565b6102f4565b005b6100c46100d43660046104d2565b610350565b6000806100e960208801886104f6565b868686604051602001610100959493929190610544565b60408051601f1981840301815282825280516020918201206080840183526001600160a01b038916845260c08b01359184019190915260e08a0135838301526101008a013560608401529250829061015a908a018a6104f6565b60015460408051639220623b60e01b8152905186926001600160a01b031691639220623b9160048083019260209291908290030181865afa1580156101a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c7919061057e565b600160009054906101000a90046001600160a01b03166001600160a01b031663ecd7cf786040518163ffffffff1660e01b8152600401602060405180830381865afa15801561021a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023e919061057e565b600154604080516318efcce560e01b815290518f926001600160a01b0316916318efcce59160048083019260209291908290030181865afa158015610287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ab919061057e565b6040516102b7906103e6565b6102c7979695949392919061059b565b8190604051809103906000f59050801580156102e7573d6000803e3d6000fd5b5098975050505050505050565b6102fc6103b3565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f7374c03893422e168ea189118b40932f7c665b7dbcd921b4d7580ca758cc1e409060200160405180910390a150565b6103586103b3565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146103e4576040516396a19be960e01b815233600482015260240160405180910390fd5b565b61370e8061064583390190565b6001600160a01b038116811461040857600080fd5b50565b60008060008060006080868803121561042357600080fd5b853567ffffffffffffffff8082111561043b57600080fd5b90870190610120828a03121561045057600080fd5b909550602087013590610462826103f3565b909450604087013590610474826103f3565b9093506060870135908082111561048a57600080fd5b818801915088601f83011261049e57600080fd5b8135818111156104ad57600080fd5b8960208285010111156104bf57600080fd5b9699959850939650602001949392505050565b6000602082840312156104e457600080fd5b81356104ef816103f3565b9392505050565b6000808335601e1984360301811261050d57600080fd5b83018035915067ffffffffffffffff82111561052857600080fd5b60200191503681900382131561053d57600080fd5b9250929050565b8486823760008582016bffffffffffffffffffffffff198660601b1681528385601483013760009301601401928352509095945050505050565b60006020828403121561059057600080fd5b81516104ef816103f3565b61012080825281018790526000610140888a828501376000818a8501015280601f19601f8b011684010191505060018060a01b03875116602083015260208701516040830152604087015160608301526060870151608083015261060a60a08301876001600160a01b03169052565b6001600160a01b03851660c08301526001600160a01b03841660e08301526001600160a01b0383166101008301529897505050505050505056fe610140604052600060045534801561001657600080fd5b5060405161370e38038061370e83398101604081905261003591610366565b6003805486516001600160a81b03199091166101006001600160a01b03928316810291909117909255602087015160c052604087015160a052606087015160e052848116608052600680546001600160a01b03191685831617905585811690915281166101205281868686868486600a6100af87826104f1565b50604051636427ed9760e01b8152600060048201526001600160a01b03851690636427ed9790602401600060405180830381600087803b1580156100f257600080fd5b505af1158015610106573d6000803e3d6000fd5b5050600b80546001600160a01b0319166001600160a01b038b16908117909155604051909850600097507f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e096508795509350505050a3506101676001610172565b5050505050506105dd565b600b805482158015600160a01b0260ff60a01b19909216919091179091556101a3576101a0600060046101aa565b50565b6101a06000805b6101bc82601460ff8416600114610225565b6101ce82601560ff8416600214610225565b6101e082601660ff8416600414610225565b60405160ff821681526001600160a01b038316907fe423d7d31023dbacefed7c937785d0012ad8f314381295efebfc0471d2c434549060200160405180910390a25050565b60006102328360e06105b0565b6001600160a01b038516600090815260208190526040902054600160ff929092169190911b9150808216821483151514610284576001600160a01b038516600090815260208190526040902081831890555b5050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156102c9576102c961028b565b604052919050565b6001600160a01b03811681146101a057600080fd5b6000608082840312156102f857600080fd5b604051608081016001600160401b038111828210171561031a5761031a61028b565b8060405250809150825161032d816102d1565b808252506020830151602082015260408301516040820152606083015160608201525092915050565b8051610361816102d1565b919050565b600080600080600080610120878903121561038057600080fd5b86516001600160401b038082111561039757600080fd5b818901915089601f8301126103ab57600080fd5b8151818111156103bd576103bd61028b565b602091506103d3601f8201601f191683016102a1565b8181528b838386010111156103e757600080fd5b60005b828110156104055784810184015182820185015283016103ea565b506000838383010152809950505061041f8a828b016102e6565b9650505061042f60a08801610356565b935061043d60c08801610356565b925061044b60e08801610356565b915061045a6101008801610356565b90509295509295509295565b600181811c9082168061047a57607f821691505b60208210810361049a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156104ec576000816000526020600020601f850160051c810160208610156104c95750805b601f850160051c820191505b818110156104e8578281556001016104d5565b5050505b505050565b81516001600160401b0381111561050a5761050a61028b565b61051e816105188454610466565b846104a0565b602080601f831160018114610553576000841561053b5750858301515b600019600386901b1c1916600185901b1785556104e8565b600085815260208120601f198616915b8281101561058257888601518255948401946001909101908401610563565b50858210156105a05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60ff81811683821601908111156105d757634e487b7160e01b600052601160045260246000fd5b92915050565b60805160a05160c05160e0516101005161012051613095610679600039600081816104b801526123ab015260008181610a1101528181610dc9015281816110150152818161137d0152818161184e01526122b1015260008181610860015261169d01526000818161046f0152611677015260008181610aa501528181611a280152611a6401526000818161095401526116c601526130956000f3fe60806040526004361061038c5760003560e01c80637ecebe00116101dc578063c45a015511610102578063de0e9a3e116100a0578063f2fde38b1161006f578063f2fde38b14610ac7578063f5c0b95f14610ae7578063fcb79a7e14610b07578063ffa1ad7414610b2757600080fd5b8063de0e9a3e14610a33578063e445d70a14610a53578063e5b824ec14610a73578063efa4051214610a9357600080fd5b8063d505accf116100dc578063d505accf146109ac578063dcc7d4ad146109cc578063dd62ed3e146109df578063ddceafa9146109ff57600080fd5b8063c45a015514610942578063d37a9bb014610976578063d50256251461099757600080fd5b8063a4c0ed361161017a578063bf376c7a11610149578063bf376c7a146108c2578063c028df06146108e2578063c07473f614610902578063c18172c41461092257600080fd5b8063a4c0ed361461082e578063a78135871461084e578063a9059cbb14610882578063b1c8db66146108a257600080fd5b806395d89b41116101b657806395d89b41146107c35780639e37878c146107d85780639e4b5745146107f8578063a49a7cb11461080e57600080fd5b80637ecebe00146107615780638da5cb5b1461078e5780638fd3ab80146107ae57600080fd5b806332bc320b116102c1578063609181171161025f57806378f86afc1161022e57806378f86afc146106eb5780637adbf9731461070b5780637dc0d1d01461072b5780637dc2cd981461074b57600080fd5b80636091811714610675578063648bf7741461068b57806370a08231146106ab57806377e071ad146106cb57600080fd5b806342966c681161029b57806342966c68146105f0578063429c66f01461061057806345c8a62b1461063057806350e70d481461065057600080fd5b806332bc320b146105a65780633644e515146105bb5780634000aea0146105d057600080fd5b806318efcce51161032e5780632a0a4ed5116103085780632a0a4ed51461051c5780632b3430991461053a578063313ce5671461055a57806332a7ae951461058657600080fd5b806318efcce5146104a657806319845354146104da57806323b872dd146104fc57600080fd5b80630a81b2de1161036a5780630a81b2de146104105780630c6f0e5d146104255780631703a0181461045d57806318160ddd1461049157600080fd5b806306fdde03146103915780630832e470146103bc578063095ea7b3146103e0575b600080fd5b34801561039d57600080fd5b506103a6610b3c565b6040516103b39190612846565b60405180910390f35b3480156103c857600080fd5b506103d260045481565b6040519081526020016103b3565b3480156103ec57600080fd5b506104006103fb36600461286e565b610c03565b60405190151581526020016103b3565b34801561041c57600080fd5b506103d2610c1a565b34801561043157600080fd5b50600754610445906001600160a01b031681565b6040516001600160a01b0390911681526020016103b3565b34801561046957600080fd5b506103d27f000000000000000000000000000000000000000000000000000000000000000081565b34801561049d57600080fd5b506002546103d2565b3480156104b257600080fd5b506104457f000000000000000000000000000000000000000000000000000000000000000081565b3480156104e657600080fd5b506104fa6104f536600461286e565b610c98565b005b34801561050857600080fd5b5061040061051736600461289a565b610d20565b34801561052857600080fd5b506006546001600160a01b0316610445565b34801561054657600080fd5b506104006105553660046128db565b610d83565b34801561056657600080fd5b506003546105749060ff1681565b60405160ff90911681526020016103b3565b34801561059257600080fd5b506104fa6105a13660046128db565b610d90565b3480156105b257600080fd5b506104fa610e29565b3480156105c757600080fd5b506103d2610e50565b3480156105dc57600080fd5b506104006105eb366004612941565b610ea9565b3480156105fc57600080fd5b506104fa61060b36600461299d565b610f3a565b34801561061c57600080fd5b506104fa61062b3660046129c7565b610f9b565b34801561063c57600080fd5b506104fa61064b3660046128db565b610fec565b34801561065c57600080fd5b506003546104459061010090046001600160a01b031681565b34801561068157600080fd5b506103d260085481565b34801561069757600080fd5b506104fa6106a6366004612a4b565b611010565b3480156106b757600080fd5b506103d26106c63660046128db565b61104c565b3480156106d757600080fd5b506103d26106e63660046128db565b611070565b3480156106f757600080fd5b506104fa610706366004612a84565b611155565b34801561071757600080fd5b506104fa6107263660046128db565b6111b4565b34801561073757600080fd5b50600654610445906001600160a01b031681565b34801561075757600080fd5b5062ed4e006103d2565b34801561076d57600080fd5b506103d261077c3660046128db565b60096020526000908152604090205481565b34801561079a57600080fd5b50600b54610445906001600160a01b031681565b3480156107ba57600080fd5b506104fa61121d565b3480156107cf57600080fd5b506103a661122a565b3480156107e457600080fd5b506104006107f33660046128db565b6112cb565b34801561080457600080fd5b5060045415610400565b34801561081a57600080fd5b506104fa610829366004612ac6565b6112d8565b34801561083a57600080fd5b50610400610849366004612941565b6112ea565b34801561085a57600080fd5b506103d27f000000000000000000000000000000000000000000000000000000000000000081565b34801561088e57600080fd5b5061040061089d36600461286e565b61131c565b3480156108ae57600080fd5b506104006108bd3660046128db565b611328565b3480156108ce57600080fd5b506104fa6108dd36600461286e565b611346565b3480156108ee57600080fd5b50600554610445906001600160a01b031681565b34801561090e57600080fd5b506103d261091d3660046128db565b61136d565b34801561092e57600080fd5b506104fa61093d3660046128db565b611378565b34801561094e57600080fd5b506104457f000000000000000000000000000000000000000000000000000000000000000081565b34801561098257600080fd5b50600b5461040090600160a01b900460ff1681565b3480156109a357600080fd5b506103a66113ae565b3480156109b857600080fd5b506104fa6109c7366004612afb565b61143c565b6104fa6109da366004612b69565b6115f1565b3480156109eb57600080fd5b506103d26109fa366004612a4b565b6117cc565b348015610a0b57600080fd5b506104457f000000000000000000000000000000000000000000000000000000000000000081565b348015610a3f57600080fd5b506104fa610a4e36600461299d565b6117d8565b348015610a5f57600080fd5b506104fa610a6e366004612bb0565b611838565b348015610a7f57600080fd5b506104fa610a8e3660046128db565b611849565b348015610a9f57600080fd5b506103d27f000000000000000000000000000000000000000000000000000000000000000081565b348015610ad357600080fd5b506104fa610ae23660046128db565b61187f565b348015610af357600080fd5b50610400610b02366004612ac6565b6118e3565b348015610b1357600080fd5b506104fa610b22366004612a4b565b6118ef565b348015610b3357600080fd5b50610574600381565b60606000600360019054906101000a90046001600160a01b03166001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610b93573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bbb9190810190612be3565b9050610bc76004541590565b15610bf25780604051602001610bdd9190612c90565b60405160208183030381529060405291505090565b80604051602001610bdd9190612cb8565b6000610c10338484611922565b5060015b92915050565b6000600360019054906101000a90046001600160a01b03166001600160a01b0316633a98ef396040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c939190612ce6565b905090565b600654610cad906001600160a01b0316611984565b610cb5610c1a565b81610cbf60025490565b610cc99190612d15565b1115610d1257610cd7610c1a565b81610ce160025490565b610ceb9190612d15565b604051630429590f60e41b8152600481019290925260248201526044015b60405180910390fd5b610d1c82826119af565b5050565b6000610d2d848484611b18565b6000610d3985336117cc565b9050600160ff1b811015610d7657610d518382612d28565b6001600160a01b03861660009081526001602090815260408083203384529091529020555b60019150505b9392505050565b6000610c14826016611b7c565b610daa610da56006546001600160a01b031690565b611984565b6040516332a7ae9560e01b81526001600160a01b0382811660048301527f000000000000000000000000000000000000000000000000000000000000000016906332a7ae95906024015b600060405180830381600087803b158015610e0e57600080fd5b505af1158015610e22573d6000803e3d6000fd5b5050505050565b600554610e3e906001600160a01b0316611984565b600580546001600160a01b0319169055565b604080517f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692186020820152469181019190915230606082015260009060800160405160208183030381529060405280519060200120905090565b6000610eb5858561131c565b8015610f315750604051635260769b60e11b81526001600160a01b0386169063a4c0ed3690610eee903390889088908890600401612d3b565b6020604051808303816000875af1158015610f0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f319190612d83565b95945050505050565b610f443382611bbc565b6003546001600160a01b03610100909104166342966c68610f656004541590565b610f7b57600454610f769084612da0565b610f7d565b825b6040518263ffffffff1660e01b8152600401610df491815260200190565b610fa3611c30565b60005b82811015610fe657610fde848483818110610fc357610fc3612db7565b9050602002016020810190610fd891906128db565b836112d8565b600101610fa6565b50505050565b600554611001906001600160a01b0316611984565b61100d81600180611c5d565b50565b6110397f0000000000000000000000000000000000000000000000000000000000000000611984565b610d1c82826110478561104c565b611b18565b6001600160a01b03166000908152602081905260409020546001600160e01b031690565b60008061107c83611cc1565b9050801561108a5792915050565b60006110966004541590565b6110a2576004546110a5565b60015b6003549091506001600160a01b036101009091048116908516036110ca579392505050565b6003546040516377e071ad60e01b81526001600160a01b0386811660048301528392610100900416906377e071ad90602401602060405180830381865afa158015611119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113d9190612ce6565b6111479190612da0565b949350505050565b50919050565b60065461116a906001600160a01b0316611984565b600a611177828483612e51565b507fe9f2468ecc8d3dff15a70a5909151e6297cee4cf05268eff3d7ef0c696ec50f2600a6040516111a89190612f11565b60405180910390a15050565b6006546111c9906001600160a01b0316611984565b600680546001600160a01b0319166001600160a01b0383169081179091556040519081527fc3977c9522c218453912bcab15964a7788968fbf3fe4d4e2965252c9f07055de9060200160405180910390a150565b6112283360006119af565b565b6060600360019054906101000a90046001600160a01b03166001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561127f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112a79190810190612be3565b6040516020016112b79190612fa1565b604051602081830303815290604052905090565b6000610c14826015611b7c565b6112e0611c30565b610d1c8282611d06565b6003546000906113079061010090046001600160a01b0316611984565b6113118585611d81565b506001949350505050565b6000610d7c8383611ded565b6000611335826014611b7c565b80610c145750610c14826016611b7c565b6003546113639061010090046001600160a01b0316333084611df9565b610d1c8282611d81565b6000610c148261104c565b6113a17f0000000000000000000000000000000000000000000000000000000000000000611984565b61100d81600a6001611c5d565b600a80546113bb90612dcd565b80601f01602080910402602001604051908101604052809291908181526020018280546113e790612dcd565b80156114345780601f1061140957610100808354040283529160200191611434565b820191906000526020600020905b81548152906001019060200180831161141757829003601f168201915b505050505081565b4284101561146657604051630b99fc4b60e31b815260048101859052426024820152604401610d09565b60006001611472610e50565b6001600160a01b038a811660008181526009602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa15801561157e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615806115b35750876001600160a01b0316816001600160a01b031614155b156115dc57604051632f52260d60e11b81526001600160a01b0382166004820152602401610d09565b6115e7818888611922565b5050505050505050565b60016115fd6004541590565b151581151514611644578015611626576040516305a34cd360e01b815260040160405180910390fd5b806116445760405163291c3d8560e01b815260040160405180910390fd5b604051634dc5e43160e01b815260048101859052336024820152604481018490526001600160a01b0383811660648301527f000000000000000000000000000000000000000000000000000000000000000060848301527f000000000000000000000000000000000000000000000000000000000000000060a48301526000917f000000000000000000000000000000000000000000000000000000000000000090911690634dc5e43190349060c40160206040518083038185885af1158015611712573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906117379190612fc6565b9050611741611e60565b156117a657600554604051637b64620f60e11b81526001600160a01b0383811660048301529091169063f6c8c41e90602401600060405180830381600087803b15801561178d57600080fd5b505af11580156117a1573d6000803e3d6000fd5b505050505b600580546001600160a01b0319166001600160a01b039290921691909117905550505050565b6000610d7c8383611ef5565b60006117e46004541590565b15158115151461182b57801561180d576040516305a34cd360e01b815260040160405180910390fd5b8061182b5760405163291c3d8560e01b815260040160405180910390fd5b610d1c3383600454611f01565b611840611c30565b61100d81611f36565b6118727f0000000000000000000000000000000000000000000000000000000000000000611984565b61100d81600a6000611c5d565b611887611c30565b600b546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000610d7c8383611b7c565b600554611904906001600160a01b0316611984565b611918826119118461104c565b6001611f01565b610d1c8183611f6f565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b336001600160a01b0382161461100d57604051634b637e8f60e11b8152336004820152602401610d09565b60006119ba8361104c565b6119c49083612d15565b905060006119d0610c1a565b9050808211156119fd57604051630429590f60e41b81526004810182905260248101839052604401610d09565b611a05611e60565b15611a23576040516331dec02560e21b815260040160405180910390fd5b611a4d7f000000000000000000000000000000000000000000000000000000000000000082612da0565b611a5961271084612da0565b1015611ab757611a897f000000000000000000000000000000000000000000000000000000000000000082612da0565b611a9561271084612da0565b604051634b2737cf60e11b815260048101929092526024820152604401610d09565b611ac18485611f6f565b604080516001600160a01b038616815260208101849052908101849052606081018290527f85e5711a70a7d2bae18e1232af474d82c98600b0e62fe079a28208520b58568e9060800160405180910390a150505050565b611b23838383612132565b611b2d838261213d565b611b3782826121da565b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161197791815260200190565b600080611b8a8360e0612fe3565b6001600160a01b038516600090815260208190526040902054600160ff929092169190911b9081161491505092915050565b611bc882600083612132565b8060026000828254611bda9190612d28565b90915550611bea9050828261213d565b6040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600b546001600160a01b03163314611228576040516396a19be960e01b8152336004820152602401610d09565b6000611c6a8360e0612fe3565b6001600160a01b038516600090815260208190526040902054600160ff929092169190911b9150808216821483151514610e22576001600160a01b0394909416600090815260208190526040902093189092555050565b6000306001600160a01b03831603611cdb57506001919050565b6007546001600160a01b0390811690831603611cf957505060085490565b506000919050565b919050565b611d1882601460ff8416600114611c5d565b611d2a82601560ff8416600214611c5d565b611d3c82601660ff8416600414611c5d565b60405160ff821681526001600160a01b038316907fe423d7d31023dbacefed7c937785d0012ad8f314381295efebfc0471d2c434549060200160405180910390a25050565b611d8d60008383612132565b8060026000828254611d9f9190612d15565b90915550611daf905082826121da565b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611c24565b6000610d7c838361227f565b6040516001600160a01b038481166024830152838116604483015260648201839052610fe69186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505061231e565b6005546000906001600160a01b031615801590610c935750600560009054906101000a90046001600160a01b03166001600160a01b0316638fe8a1016040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ecb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eef9190612d83565b15905090565b6000610d7c8383612381565b611f0b8383611bbc565b611f3183611f198385612da0565b60035461010090046001600160a01b03169190612452565b505050565b600b805482158015600160a01b0260ff60a01b1990921691909117909155611f645761100d60006004611d06565b61100d600080611d06565b6001611f7b6004541590565b151581151514611fc2578015611fa4576040516305a34cd360e01b815260040160405180910390fd5b80611fc25760405163291c3d8560e01b815260040160405180910390fd5b6003546040516370a0823160e01b81523060048201526120389184916101009091046001600160a01b0316906370a0823190602401602060405180830381865afa158015612014573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f199190612ce6565b60038054610100600160a81b0319166101006001600160a01b03861602179055600254600010156120e6576120e661206f60025490565b6040516370a0823160e01b81523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa1580156120b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d79190612ce6565b6120e19190612ffc565b612483565b7f6c20b91d1723b78732eba64ff11ebd7966a6e4af568a00fa4f6b72c20f58b02a61210f610b3c565b61211761122a565b60405161212592919061301e565b60405180910390a1505050565b611f318383836124a9565b6001600160a01b038216600090815260208190526040812054906121618383612d28565b90506001600160e01b031981166001600160e01b03198316146121b957836121888561104c565b60405163391434e360e21b81526001600160a01b039092166004830152602482015260448101849052606401610d09565b6001600160a01b039093166000908152602081905260409020929092555050565b6001600160a01b03821661220c5760405163ec442f0560e01b81526001600160a01b0383166004820152602401610d09565b6001600160a01b038216600090815260208190526040812054906122308383612d15565b90506001600160e01b031981166001600160e01b03198316146121b957604051634a2e08e560e01b81526001600160a01b03851660048201526024810183905260448101849052606401610d09565b600061228b8383612615565b5061229733600a611b7c565b15610c10576040516304d301a360e41b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634d301a3090602401600060405180830381600087803b1580156122fd57600080fd5b505af1158015612311573d6000803e3d6000fd5b5050505050600192915050565b60006123336001600160a01b03841683612622565b905080516000141580156123585750808060200190518101906123569190612d83565b155b15611f3157604051635274afe760e01b81526001600160a01b0384166004820152602401610d09565b604051632fb6b53160e11b81526001600160a01b03838116600483015282811660248301526000917f000000000000000000000000000000000000000000000000000000000000000090911690635f6d6a6290604401602060405180830381865afa1580156123f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124189190612d83565b156124265750600019610c14565b506001600160a01b03828116600090815260016020908152604080832093851683529290522054610c14565b6040516001600160a01b03838116602483015260448201839052611f3191859182169063a9059cbb90606401611e2e565b806000036124a457604051631dca7a7560e11b815260040160405180910390fd5b600455565b6124b4838383612630565b6124bd82611328565b611f31576124ca826112cb565b1561251257600b54600160a01b900460ff161561250557604051630329a43160e51b81526001600160a01b0383166004820152602401610d09565b611f318260156000611c5d565b61251b83610d83565b156125715761252d8260146001611c5d565b604051600181526001600160a01b038316907fe423d7d31023dbacefed7c937785d0012ad8f314381295efebfc0471d2c434549060200160405180910390a2505050565b61257c836014611b7c565b156125c457600b54600160a01b900460ff16156125b75760405163dd1aceed60e01b81526001600160a01b0383166004820152602401610d09565b611f318360146000611c5d565b6125cd836112cb565b15611f3157600b54600160a01b900460ff161561260857604051637882255360e11b81526001600160a01b0384166004820152602401610d09565b611f318360156000611c5d565b6000610c10338484611b18565b6060610d7c8383600061263b565b611f31838383612732565b6060825160001415801561265757506001600160a01b0384163b155b1561268057604051639eb1341360e01b81526001600160a01b0385166004820152602401610d09565b600080856001600160a01b0316848660405161269c9190613043565b60006040518083038185875af1925050503d80600081146126d9576040519150601f19603f3d011682016040523d82523d6000602084013e6126de565b606091505b509150915081156126f2579150610d7c9050565b80511561270157805160208201fd5b60405162461bcd60e51b815260206004820152600660248201526519985a5b195960d21b6044820152606401610d09565b61273b836127e9565b8061274a575061274a826127e9565b15611f3157612757611e60565b156127cf5760055460405163e1a1810f60e01b81526001600160a01b0385811660048301528481166024830152604482018490529091169063e1a1810f90606401600060405180830381600087803b1580156127b257600080fd5b505af11580156127c6573d6000803e3d6000fd5b50505050505050565b6127dc8360016000611c5d565b611f318260016000611c5d565b6000610c14826001611b7c565b60005b838110156128115781810151838201526020016127f9565b50506000910152565b600081518084526128328160208601602086016127f6565b601f01601f19169290920160200192915050565b602081526000610d7c602083018461281a565b6001600160a01b038116811461100d57600080fd5b6000806040838503121561288157600080fd5b823561288c81612859565b946020939093013593505050565b6000806000606084860312156128af57600080fd5b83356128ba81612859565b925060208401356128ca81612859565b929592945050506040919091013590565b6000602082840312156128ed57600080fd5b8135610d7c81612859565b60008083601f84011261290a57600080fd5b50813567ffffffffffffffff81111561292257600080fd5b60208301915083602082850101111561293a57600080fd5b9250929050565b6000806000806060858703121561295757600080fd5b843561296281612859565b935060208501359250604085013567ffffffffffffffff81111561298557600080fd5b612991878288016128f8565b95989497509550505050565b6000602082840312156129af57600080fd5b5035919050565b803560ff81168114611d0157600080fd5b6000806000604084860312156129dc57600080fd5b833567ffffffffffffffff808211156129f457600080fd5b818601915086601f830112612a0857600080fd5b813581811115612a1757600080fd5b8760208260051b8501011115612a2c57600080fd5b602092830195509350612a4291860190506129b6565b90509250925092565b60008060408385031215612a5e57600080fd5b8235612a6981612859565b91506020830135612a7981612859565b809150509250929050565b60008060208385031215612a9757600080fd5b823567ffffffffffffffff811115612aae57600080fd5b612aba858286016128f8565b90969095509350505050565b60008060408385031215612ad957600080fd5b8235612ae481612859565b9150612af2602084016129b6565b90509250929050565b600080600080600080600060e0888a031215612b1657600080fd5b8735612b2181612859565b96506020880135612b3181612859565b95506040880135945060608801359350612b4d608089016129b6565b925060a0880135915060c0880135905092959891949750929550565b600080600060608486031215612b7e57600080fd5b83359250602084013591506040840135612b9781612859565b809150509250925092565b801515811461100d57600080fd5b600060208284031215612bc257600080fd5b8135610d7c81612ba2565b634e487b7160e01b600052604160045260246000fd5b600060208284031215612bf557600080fd5b815167ffffffffffffffff80821115612c0d57600080fd5b818401915084601f830112612c2157600080fd5b815181811115612c3357612c33612bcd565b604051601f8201601f19908116603f01168101908382118183101715612c5b57612c5b612bcd565b81604052828152876020848701011115612c7457600080fd5b612c858360208301602088016127f6565b979650505050505050565b60008251612ca28184602087016127f6565b632053484160e01b920191825250600401919050565b60008251612cca8184602087016127f6565b692028577261707065642960b01b920191825250600a01919050565b600060208284031215612cf857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610c1457610c14612cff565b81810381811115610c1457610c14612cff565b6001600160a01b0385168152602081018490526060604082018190528101829052818360808301376000818301608090810191909152601f909201601f191601019392505050565b600060208284031215612d9557600080fd5b8151610d7c81612ba2565b8082028115828204841417610c1457610c14612cff565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680612de157607f821691505b60208210810361114f57634e487b7160e01b600052602260045260246000fd5b601f821115611f31576000816000526020600020601f850160051c81016020861015612e2a5750805b601f850160051c820191505b81811015612e4957828155600101612e36565b505050505050565b67ffffffffffffffff831115612e6957612e69612bcd565b612e7d83612e778354612dcd565b83612e01565b6000601f841160018114612eb15760008515612e995750838201355b600019600387901b1c1916600186901b178355610e22565b600083815260209020601f19861690835b82811015612ee25786850135825560209485019460019092019101612ec2565b5086821015612eff5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6000602080835260008454612f2581612dcd565b8060208701526040600180841660008114612f475760018114612f6357612f93565b60ff19851660408a0152604084151560051b8a01019550612f93565b89600052602060002060005b85811015612f8a5781548b8201860152908301908801612f6f565b8a016040019650505b509398975050505050505050565b60008251612fb38184602087016127f6565b605360f81b920191825250600101919050565b600060208284031215612fd857600080fd5b8151610d7c81612859565b60ff8181168382160190811115610c1457610c14612cff565b60008261301957634e487b7160e01b600052601260045260246000fd5b500490565b604081526000613031604083018561281a565b8281036020840152610f31818561281a565b600082516130558184602087016127f6565b919091019291505056fea26469706673582212208929d01df4aaa37b760d0a23552b06f01eda02168725ba2748fc6611ab59777764736f6c63430008190033a264697066735822122046c4d06c69f604bb806126db0cee2496e2900871e2594429b7eb647e82a2b80c64736f6c63430008190033",
  "devdoc": {
    "author": "rube ",
    "details": "Inherits from Ownable for access control",
    "events": {
      "FactoryManagerUpdated(address)": {
        "params": {
          "manager": "The new factory manager address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_owner": "The address that will be set as the owner of the contract"
        }
      },
      "createAllowlistDraggable((string,string,string,bool,bool,uint256,uint256,uint256,uint256),address,address,string)": {
        "params": {
          "token": "The address of the ERC20Permit token to be used",
          "tokenConfig": "The configuration for the new token",
          "tokenOwner": "The address that will own the new token"
        },
        "returns": {
          "_0": "IERC20Permit The address of the newly created AllowlistDraggableShares token"
        }
      },
      "setManager(address)": {
        "details": "Can only be called by the contract owner",
        "params": {
          "_manager": "The address of the new factory manager"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Allowlist draggable factory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "FactoryManagerUpdated(address)": {
        "notice": "Emitted when the factory manager is updated"
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructs a new AllowlistDraggableFactory"
      },
      "createAllowlistDraggable((string,string,string,bool,bool,uint256,uint256,uint256,uint256),address,address,string)": {
        "notice": "Creates a new AllowlistDraggableShares token"
      },
      "manager()": {
        "notice": "The factory manager contract"
      },
      "setManager(address)": {
        "notice": "Sets a new factory manager"
      }
    },
    "notice": "This contract is responsible for creating new AllowlistDraggableShares tokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13475,
        "contract": "src/utils/factory/AllowlistDraggableFactory.sol:AllowlistDraggableFactory",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14247,
        "contract": "src/utils/factory/AllowlistDraggableFactory.sol:AllowlistDraggableFactory",
        "label": "manager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(FactoryManager)14802"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(FactoryManager)14802": {
        "encoding": "inplace",
        "label": "contract FactoryManager",
        "numberOfBytes": "20"
      }
    }
  }
}