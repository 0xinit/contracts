{
  "address": "0x34B4f3a225057361Bfe663De0aAE77C5f6acF2ce",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_terms",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_wrappedToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quorum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_votePeriod",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recoveryHub",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_offerFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "addressType",
          "type": "uint8"
        }
      ],
      "name": "AddressTypeUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newContractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yesVotes",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oracleVotes",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalVotingPower",
          "type": "uint256"
        }
      ],
      "name": "MigrationSucceeded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "NameChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "canReceiveFromAnyone",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "customCollateralAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "customCollateralRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lostAddress",
          "type": "address"
        }
      ],
      "name": "deleteClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "drag",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IOfferFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getClaimDeleter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralType",
          "type": "address"
        }
      ],
      "name": "getCollateralRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "number",
          "type": "uint8"
        }
      ],
      "name": "hasFlag",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isBinding",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isForbidden",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPowerlisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "pricePerShare",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "makeAcquisitionOffer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "externalSupportingVotes",
          "type": "uint256"
        }
      ],
      "name": "migrateWithExternalApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "notifyClaimDeleted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "notifyClaimMade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "notifyOfferEnded",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "notifyVoted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offer",
      "outputs": [
        {
          "internalType": "contract IOffer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onTokenTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quorum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "recover",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recovery",
      "outputs": [
        {
          "internalType": "contract IRecoveryHub",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "restrictTransfers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "transferRestrictionsApplicable",
          "type": "bool"
        }
      ],
      "name": "setApplicable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addressesToAdd",
          "type": "address[]"
        },
        {
          "internalType": "uint8",
          "name": "value",
          "type": "uint8"
        }
      ],
      "name": "setType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "typeNumber",
          "type": "uint8"
        }
      ],
      "name": "setType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "terms",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalVotingTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unwrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unwrapConversionFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "votingPower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "shareholder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "wrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapped",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x33672b046da687ed6429ad874ae5e73cd395953ee916cc4453269455759decc2",
  "receipt": {
    "to": null,
    "from": "0x39E5351E6CE3c4B19B8b0a2F5C82c511782457BE",
    "contractAddress": "0x34B4f3a225057361Bfe663De0aAE77C5f6acF2ce",
    "transactionIndex": 5,
    "gasUsed": "2366568",
    "logsBloom": "0x
    "blockHash": "0xa4b2a5fb156822e60bc47d62de6621f648697e513d2f19b3781b0037e57099f6",
    "transactionHash": "0x33672b046da687ed6429ad874ae5e73cd395953ee916cc4453269455759decc2",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 11322136,
        "transactionHash": "0x33672b046da687ed6429ad874ae5e73cd395953ee916cc4453269455759decc2",
        "address": "0x34B4f3a225057361Bfe663De0aAE77C5f6acF2ce",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007507deebc41eed1f853883d4c0effc6c222fa781"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xa4b2a5fb156822e60bc47d62de6621f648697e513d2f19b3781b0037e57099f6"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 11322136,
        "transactionHash": "0x33672b046da687ed6429ad874ae5e73cd395953ee916cc4453269455759decc2",
        "address": "0x34B4f3a225057361Bfe663De0aAE77C5f6acF2ce",
        "topics": [
          "0xe423d7d31023dbacefed7c937785d0012ad8f314381295efebfc0471d2c43454",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000004",
        "logIndex": 4,
        "blockHash": "0xa4b2a5fb156822e60bc47d62de6621f648697e513d2f19b3781b0037e57099f6"
      }
    ],
    "blockNumber": 11322136,
    "cumulativeGasUsed": "2811225",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "wwww.terms.ch",
    "0xfb330379134EA1EfCE9Cf6F28E2CcB917899e007",
    10,
    36000,
    "0xfE9098d62aF73EF8a24Bf48a1d0dAD19d7D592e9",
    "0x6BE5C95F114e5e470c10Ddfb5Df8C6BF3F429Ba9",
    "0x7507deebc41eEd1F853883D4C0eFfc6c222fA781",
    "0x7507deebc41eEd1F853883D4C0eFfc6c222fA781"
  ],
  "solcInputHash": "1adf00d2401e9f71cd0c589dffe74075",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_terms\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votePeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recoveryHub\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_offerFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"addressType\",\"type\":\"uint8\"}],\"name\":\"AddressTypeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yesVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oracleVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalVotingPower\",\"type\":\"uint256\"}],\"name\":\"MigrationSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canReceiveFromAnyone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"customCollateralAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"customCollateralRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"deleteClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"drag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IOfferFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimDeleter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"}],\"name\":\"getCollateralRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"number\",\"type\":\"uint8\"}],\"name\":\"hasFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBinding\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isForbidden\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPowerlisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerShare\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"makeAcquisitionOffer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"externalSupportingVotes\",\"type\":\"uint256\"}],\"name\":\"migrateWithExternalApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"notifyClaimDeleted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"notifyClaimMade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notifyOfferEnded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"notifyVoted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offer\",\"outputs\":[{\"internalType\":\"contract IOffer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recovery\",\"outputs\":[{\"internalType\":\"contract IRecoveryHub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restrictTransfers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"transferRestrictionsApplicable\",\"type\":\"bool\"}],\"name\":\"setApplicable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addressesToAdd\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"setType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"typeNumber\",\"type\":\"uint8\"}],\"name\":\"setType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVotingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unwrapConversionFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"votingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"wrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapped\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See `IERC20.allowance`.\"},\"approve(address,uint256)\":{\"details\":\"See `IERC20.approve`. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See `IERC20.balanceOf`.\"},\"totalSupply()\":{\"details\":\"See `IERC20.totalSupply`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See `IERC20.transferFrom`. Emits an `Approval` event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of `ERC20`; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `value`. - the caller must have allowance for `sender`'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Burns both the token itself as well as the wrapped token! If you want to get out of the shareholder agreement, use unwrap after it has been deactivated by a majority vote or acquisition. Burning only works if wrapped token supports burning. Also, the exact meaning of this operation might depend on the circumstances. Burning and reussing the wrapped token does not free the sender from the legal obligations of the shareholder agreement.\"},\"canReceiveFromAnyone(address)\":{\"notice\":\"If true, this address is allowlisted and can only transfer tokens to other allowlisted addresses.\"},\"getClaimDeleter()\":{\"notice\":\"Let the oracle act as deleter of invalid claims. In earlier versions, this was referring to the claim deleter of the wrapped token. But that stops working after a successful acquisition as the acquisition currency most likely does not have a claim deleter.\"},\"getCollateralRate(address)\":{\"notice\":\"Returns the collateral rate for the given collateral type and 0 if that type of collateral is not accepted. By default, only the token itself is accepted at a rate of 1:1. Subclasses should override this method if they want to add additional types of collateral.\"},\"isBinding()\":{\"notice\":\"Indicates that the token holders are bound to the token terms and that: - Conversions back to the wrapped token (unwrap) are not allowed - The drag-along can be performed by making an according offer - They can be migrated to a new version of this contract in accordance with the terms\"},\"isForbidden(address)\":{\"notice\":\"If true, this address can only transfer tokens to allowlisted addresses and not receive from anyone.\"},\"isPowerlisted(address)\":{\"notice\":\"If true, this address can automatically allowlist target addresses if necessary.\"},\"setApplicable(bool)\":{\"notice\":\"Configures whether the allowlisting is applied. Also sets the powerlist and allowlist flags on the null address accordingly. It is recommended to also deactivate the powerlist flag on other addresses.\"},\"unwrap(uint256)\":{\"notice\":\"Decrease the number of drag-along tokens. The user gets back their shares in return \"},\"wrap(address,uint256)\":{\"notice\":\"Increases the number of drag-along tokens. Requires minter to deposit an equal amount of share tokens \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/allowlist/AllowlistDraggableShares.sol\":\"AllowlistDraggableShares\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/DraggableShares.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2020 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity >=0.8;\\n\\nimport \\\"./recovery/ERC20Recoverable.sol\\\";\\nimport \\\"./sha/ERC20Draggable.sol\\\";\\n\\n/**\\n * @title Draggable CompanyName AG Shares\\n * @author Luzius Meisser, luzius@aktionariat.com\\n *\\n * This is an ERC-20 token representing shares of CompanyName AG that are bound to\\n * a shareholder agreement that can be found at the URL defined in the constant 'terms'.\\n * The shareholder agreement is partially enforced through this smart contract. The agreement\\n * is designed to facilitate a complete acquisition of the firm even if a minority of shareholders\\n * disagree with the acquisition, to protect the interest of the minority shareholders by requiring\\n * the acquirer to offer the same conditions to everyone when acquiring the company, and to\\n * facilitate an update of the shareholder agreement even if a minority of the shareholders that\\n * are bound to this agreement disagree. The name \\\"draggable\\\" stems from the convention of calling\\n * the right to drag a minority along with a sale of the company \\\"drag-along\\\" rights. The name is\\n * chosen to ensure that token holders are aware that they are bound to such an agreement.\\n *\\n * The percentage of token holders that must agree with an update of the terms is defined by the\\n * constant UPDATE_QUORUM. The percentage of yes-votes that is needed to successfully complete an\\n * acquisition is defined in the constant ACQUISITION_QUORUM. Note that the update quorum is based\\n * on the total number of tokens in circulation. In contrast, the acquisition quorum is based on the\\n * number of votes cast during the voting period, not taking into account those who did not bother\\n * to vote.\\n */\\n\\ncontract DraggableShares is ERC20Recoverable, ERC20Draggable {\\n\\n    string public terms;\\n\\n    constructor(\\n        string memory _terms,\\n        address _wrappedToken,\\n        uint256 _quorumBps,\\n        uint256 _votePeriodSeconds,\\n        address _recoveryHub,\\n        address _offerFactory,\\n        address _oracle\\n    )\\n        ERC20Draggable(_wrappedToken, _quorumBps, _votePeriodSeconds, _offerFactory, _oracle) ERC20Flaggable(0) ERC20Recoverable(_recoveryHub) \\n    {\\n        terms = _terms; // to update the terms, migrate to a new contract. That way it is ensured that the terms can only be updated when the quorom agrees.\\n        IRecoveryHub(address(_recoveryHub)).setRecoverable(false);\\n    }\\n\\n    function transfer(address to, uint256 value) virtual override(ERC20Recoverable, ERC20Flaggable) public returns (bool) {\\n        return super.transfer(to, value);\\n    }\\n\\n    /**\\n     * Let the oracle act as deleter of invalid claims. In earlier versions, this was referring to the claim deleter\\n     * of the wrapped token. But that stops working after a successful acquisition as the acquisition currency most\\n     * likely does not have a claim deleter.\\n     */\\n    function getClaimDeleter() public view override returns (address) {\\n        return getOracle();\\n    }\\n\\n    function getCollateralRate(address collateralType) public view override returns (uint256) {\\n        uint256 rate = super.getCollateralRate(collateralType);\\n        if (rate > 0) {\\n            return rate;\\n        } else if (collateralType == address(wrapped)) {\\n            return unwrapConversionFactor;\\n        } else {\\n            // If the wrapped contract allows for a specific collateral, we should too.\\n            // If the wrapped contract is not IRecoverable, we will fail here, but would fail anyway.\\n            return IRecoverable(address(wrapped)).getCollateralRate(collateralType) * unwrapConversionFactor;\\n        }\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) virtual override(ERC20Draggable, ERC20Flaggable) internal {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n\\n}\",\"keccak256\":\"0x8b6d8a8a9bf663b7e212d65fc26cf6c9b082c9eb6c7629f2b6eb6cbda2013c84\",\"license\":\"LicenseRef-Aktionariat\"},\"src/ERC20Flaggable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied and adjusted from OpenZeppelin\\n// Adjustments:\\n// - modifications to support ERC-677\\n// - removed unnecessary require statements\\n// - removed GSN Context\\n// - upgraded to 0.8 to drop SafeMath\\n// - let name() and symbol() be implemented by subclass\\n// - infinite allowance support, with 2^255 and above considered infinite\\n// - use upper 32 bits of balance for flags\\n// - add a global settings variable\\n\\npragma solidity >=0.8;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IERC677Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the `IERC20` interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using `_mint`.\\n * For a generic mechanism see `ERC20Mintable`.\\n *\\n * *For a detailed writeup see our guide [How to implement supply\\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See `IERC20.approve`.\\n */\\n\\nabstract contract ERC20Flaggable is IERC20 {\\n\\n    uint256 private constant FLAGGING_MASK = 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant BALANCES_MASK = 0x00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    // Documentation of flags used by subclasses:\\n    // NOTE: flags denote the bit number that is being used and must be smaller than 32\\n    // ERC20Draggable: uint8 private constant FLAG_INDEX_VOTED = 1;\\n    // ERC20Recoverable: uint8 private constant FLAG_INDEX_CLAIM_PRESENT = 10;\\n    // ERCAllowlistable: uint8 private constant FLAG_INDEX_ALLOWLIST = 20;\\n    // ERCAllowlistable: uint8 private constant FLAG_INDEX_FORBIDDEN = 21;\\n    // ERCAllowlistable: uint8 private constant FLAG_INDEX_POWERLIST = 22;\\n\\n    mapping (address => uint256) private _balances; // lower 32 bits reserved for flags\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    uint8 public override decimals;\\n\\n    constructor(uint8 _decimals) {\\n        decimals = _decimals;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.totalSupply`.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.balanceOf`.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account] & BALANCES_MASK;\\n    }\\n\\n    function hasFlag(address account, uint8 number) public view returns (bool) {\\n        return hasFlagInternal(account, number);\\n    }\\n\\n    function setFlag(address account, uint8 index, bool value) internal returns (bool) {\\n        if (hasFlagInternal(account, index) != value){\\n            toggleFlag(account, index);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function hasFlagInternal(address account, uint8 number) internal view returns (bool) {\\n        uint256 flag = 0x1 << (number + 224);\\n        return _balances[account] & flag == flag;\\n    }\\n\\n    function toggleFlag(address account, uint8 number) internal {\\n        uint256 flag = 0x1 << (number + 224);\\n        _balances[account] ^= flag;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.transfer`.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.allowance`.\\n     */\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See `IERC20.approve`.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public override returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.transferFrom`.\\n     *\\n     * Emits an `Approval` event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of `ERC20`;\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `value`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\n        if (currentAllowance < (1 << 255)){\\n            // Only decrease the allowance if it was not set to 'infinite'\\n            // Documented in /doc/infiniteallowance.md\\n            _approve(sender, msg.sender, currentAllowance - amount);\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to `transfer`, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a `Transfer` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(sender, recipient, amount);\\n        _balances[sender] -= amount;\\n        increaseBalance(recipient, amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    // ERC-677 functionality, can be useful for swapping and wrapping tokens\\n    function transferAndCall(address recipient, uint amount, bytes calldata data) public returns (bool) {\\n        bool success = transfer(recipient, amount);\\n        if (success){\\n            success = IERC677Receiver(recipient).onTokenTransfer(msg.sender, amount, data);\\n        }\\n        return success;\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a `Transfer` event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address recipient, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(address(0), recipient, amount);\\n        _totalSupply += amount;\\n        increaseBalance(recipient, amount);\\n        emit Transfer(address(0), recipient, amount);\\n    }\\n\\n    function increaseBalance(address recipient, uint256 amount) private {\\n        require(recipient != address(0x0)); // use burn instead\\n        uint256 oldBalance = _balances[recipient];\\n        uint256 oldSettings = oldBalance & FLAGGING_MASK;\\n        uint256 newBalance = oldBalance + amount;\\n        uint256 newSettings = newBalance & FLAGGING_MASK;\\n        require(newSettings == oldSettings, \\\"overflow\\\");\\n        _balances[recipient] = newBalance;\\n    }\\n\\n     /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a `Transfer` event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _totalSupply -= amount;\\n        _balances[account] -= amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an `Approval` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) virtual internal {\\n    }\\n}\",\"keccak256\":\"0x154a31ba69d3823a28ed95446313061b19975163149782ee6b8592323df52b91\",\"license\":\"MIT\"},\"src/IERC20.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: MIT\\n*\\n* Copyright (c) 2016-2019 zOS Global Limited\\n*\\n*/\\npragma solidity >=0.8;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n\\n    // Optional functions\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    event NameChanged(string name, string symbol);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\",\"keccak256\":\"0x9219c4f204d62c35e41883261db400d200ccdcc1dd922122b763986f4741ff9a\",\"license\":\"MIT\"},\"src/IERC677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8;\\n\\ninterface IERC677Receiver {\\n    \\n    function onTokenTransfer(address from, uint256 amount, bytes calldata data) external returns (bool);\\n\\n}\",\"keccak256\":\"0xe6731c84b4a7acb45879abea22700c7a81493cc8e392102a379617820694c093\",\"license\":\"MIT\"},\"src/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n//\\n// Modifications:\\n// - Replaced Context._msgSender() with msg.sender\\n// - Made leaner\\n// - Extracted interface\\n\\npragma solidity >=0.8;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor (address initialOwner) {\\n        owner = initialOwner;\\n        emit OwnershipTransferred(address(0), owner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"not owner\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0xfc6407481b551f43a7f232ed5639178957e2b8e89e52d9498f92d3dad536633c\",\"license\":\"MIT\"},\"src/allowlist/AllowlistDraggableShares.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2020 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8;\\n\\nimport \\\"../recovery/ERC20Recoverable.sol\\\";\\nimport \\\"./ERC20Allowlistable.sol\\\";\\nimport \\\"../DraggableShares.sol\\\";\\n\\ncontract AllowlistDraggableShares is ERC20Allowlistable, ERC20Draggable, ERC20Recoverable {\\n\\n  string public terms;\\n\\n  constructor(\\n    string memory _terms,\\n    address _wrappedToken,\\n    uint256 _quorum,\\n    uint256 _votePeriod,\\n    address _recoveryHub,\\n    address _offerFactory,\\n    address _oracle,\\n    address _owner\\n  )\\n    ERC20Draggable(_wrappedToken, _quorum, _votePeriod, _offerFactory, _oracle) \\n    ERC20Flaggable(0)\\n    ERC20Recoverable(_recoveryHub)\\n    Ownable(_owner)\\n  {\\n    terms = _terms; // to update the terms, migrate to a new contract. That way it is ensured that the terms can only be updated when the quorom agrees.\\n    IRecoveryHub(address(_recoveryHub)).setRecoverable(false); \\n  }\\n\\n  /**\\n  * Let the oracle act as deleter of invalid claims. In earlier versions, this was referring to the claim deleter\\n  * of the wrapped token. But that stops working after a successful acquisition as the acquisition currency most\\n  * likely does not have a claim deleter.\\n  */\\n  function getClaimDeleter() public view override returns (address) {\\n      return getOracle();\\n  }\\n\\n  function transfer(address to, uint256 value) virtual override(ERC20Flaggable, ERC20Recoverable) public returns (bool) {\\n      return super.transfer(to, value);\\n  }\\n  function _beforeTokenTransfer(address from, address to, uint256 amount) virtual override(ERC20Allowlistable, ERC20Draggable, ERC20Flaggable) internal {\\n    super._beforeTokenTransfer(from, to, amount);\\n  }\\n\\n}\",\"keccak256\":\"0x11ff0795c5b28c23b5efc40eaae6f172e08c6d6adcb0c68919998bb4d84e37e0\",\"license\":\"LicenseRef-Aktionariat\"},\"src/allowlist/ERC20Allowlistable.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2020 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8;\\n\\n\\nimport \\\"../ERC20Flaggable.sol\\\";\\nimport \\\"../Ownable.sol\\\";\\n\\n/**\\n * \\n */\\nabstract contract ERC20Allowlistable is ERC20Flaggable, Ownable {\\n\\n  uint8 private constant TYPE_DEFAULT = 0x0;\\n  uint8 private constant TYPE_ALLOWLISTED = 0x1;\\n  uint8 private constant TYPE_FORBIDDEN = 0x2;\\n  uint8 private constant TYPE_POWERLISTED = 0x4;\\n\\n  uint8 private constant FLAG_INDEX_ALLOWLIST = 20;\\n  uint8 private constant FLAG_INDEX_FORBIDDEN = 21;\\n  uint8 private constant FLAG_INDEX_POWERLIST = 22;\\n\\n  event AddressTypeUpdate(address indexed account, uint8 addressType);\\n\\n  bool public restrictTransfers;\\n\\n  constructor(){\\n    setApplicableInternal(true);\\n  }\\n\\n  /**\\n   * Configures whether the allowlisting is applied.\\n   * Also sets the powerlist and allowlist flags on the null address accordingly.\\n   * It is recommended to also deactivate the powerlist flag on other addresses.\\n   */\\n  function setApplicable(bool transferRestrictionsApplicable) public onlyOwner {\\n    setApplicableInternal(transferRestrictionsApplicable);\\n  }\\n\\n  function setApplicableInternal(bool transferRestrictionsApplicable) internal {\\n    restrictTransfers = true;\\n    // if transfer restrictions are applied, we guess that should also be the case for newly minted tokens\\n    // if the admin disagrees, it is still possible to change the type of the null address\\n    if (transferRestrictionsApplicable){\\n      setTypeInternal(address(0x0), TYPE_POWERLISTED);\\n    } else {\\n      setTypeInternal(address(0x0), TYPE_DEFAULT);\\n    }\\n  }\\n\\n  function setType(address account, uint8 typeNumber) public onlyOwner {\\n    setTypeInternal(account, typeNumber);\\n  }\\n\\n  function setTypeInternal(address account, uint8 typeNumber) internal {\\n    setFlag(account, FLAG_INDEX_ALLOWLIST, typeNumber == TYPE_ALLOWLISTED);\\n    setFlag(account, FLAG_INDEX_FORBIDDEN, typeNumber == TYPE_FORBIDDEN);\\n    setFlag(account, FLAG_INDEX_POWERLIST, typeNumber == TYPE_POWERLISTED);\\n    emit AddressTypeUpdate(account, typeNumber);\\n  }\\n\\n  function setType(address[] calldata addressesToAdd, uint8 value) public onlyOwner {\\n    for (uint i=0; i<addressesToAdd.length; i++){\\n      setType(addressesToAdd, value);\\n    }\\n  }\\n\\n  /**\\n   * If true, this address is allowlisted and can only transfer tokens to other allowlisted addresses.\\n   */\\n  function canReceiveFromAnyone(address account) public view returns (bool) {\\n    return hasFlagInternal(account, FLAG_INDEX_ALLOWLIST) || hasFlagInternal(account, FLAG_INDEX_POWERLIST);\\n  }\\n\\n  /**\\n   * If true, this address can only transfer tokens to allowlisted addresses and not receive from anyone.\\n   */\\n  function isForbidden(address account) public view returns (bool){\\n    return hasFlagInternal(account, FLAG_INDEX_FORBIDDEN);\\n  }\\n\\n  /**\\n   * If true, this address can automatically allowlist target addresses if necessary.\\n   */\\n  function isPowerlisted(address account) public view returns (bool) {\\n    return hasFlagInternal(account, FLAG_INDEX_POWERLIST);\\n  }\\n\\n  /**\\n   * Cleans the allowlist and disallowlist flag under the assumption that the\\n   * allowlisting is not applicable any more.\\n   */\\n  function failOrCleanup(address account) internal {\\n    require(!restrictTransfers, \\\"not allowed\\\");\\n    setType(account, TYPE_DEFAULT);\\n  }\\n\\n  function _beforeTokenTransfer(address from, address to, uint256 amount) override virtual internal {\\n    super._beforeTokenTransfer(from, to, amount);\\n    if (canReceiveFromAnyone(to)){\\n      // ok, transfers to allowlisted addresses are always allowed\\n    } else if (isForbidden(to)){\\n      // Target is forbidden, but maybe restrictions have been removed and we can clean the flag\\n      failOrCleanup(to);\\n    } else {\\n      if (isPowerlisted(from)){\\n        // it is not allowlisted, but we can make it so\\n        setType(to, TYPE_ALLOWLISTED);\\n      }\\n      // if we made it to here, the target must be a free address and we are not powerlisted\\n      else if (hasFlagInternal(from, FLAG_INDEX_ALLOWLIST) || isForbidden(from)){\\n        // We cannot send to free addresses, but maybe the restrictions have been removed and we can clean the flag?\\n        failOrCleanup(from);\\n      }\\n    }\\n  }\\n\\n}\",\"keccak256\":\"0x5c6f024e58e77721eb72ecb80c3a9ae00b2af0541f580878e8636e8594a12bde\",\"license\":\"LicenseRef-Aktionariat\"},\"src/recovery/ERC20Recoverable.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2020 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity >=0.8;\\n\\nimport \\\"../ERC20Flaggable.sol\\\";\\nimport \\\"./IRecoveryHub.sol\\\";\\nimport \\\"./IRecoverable.sol\\\";\\n\\n/**\\n * @title Recoverable\\n * In case of tokens that represent real-world assets such as shares of a company, one needs a way\\n * to handle lost private keys. With physical certificates, courts can declare share certificates as\\n * invalid so the company can issue replacements. Here, we want a solution that does not depend on\\n * third parties to resolve such cases. Instead, when someone has lost a private key, he can use the\\n * declareLost function to post a deposit and claim that the shares assigned to a specific address are\\n * lost. To prevent front running, a commit reveal scheme is used. If he actually is the owner of the shares,\\n * he needs to wait for a certain period and can then reclaim the lost shares as well as the deposit.\\n * If he is an attacker trying to claim shares belonging to someone else, he risks losing the deposit\\n * as it can be claimed at anytime by the rightful owner.\\n * Furthermore, if \\\"getClaimDeleter\\\" is defined in the subclass, the returned address is allowed to\\n * delete claims, returning the collateral. This can help to prevent obvious cases of abuse of the claim\\n * function.\\n */\\n\\nabstract contract ERC20Recoverable is ERC20Flaggable, IRecoverable {\\n\\n    uint8 private constant FLAG_CLAIM_PRESENT = 10;\\n\\n    // ERC-20 token that can be used as collateral or 0x0 if disabled\\n    address public customCollateralAddress;\\n    uint256 public customCollateralRate;\\n\\n    IRecoveryHub public immutable recovery;\\n\\n    constructor(address recoveryHub){\\n        recovery = IRecoveryHub(recoveryHub);\\n    }\\n\\n    /**\\n     * Returns the collateral rate for the given collateral type and 0 if that type\\n     * of collateral is not accepted. By default, only the token itself is accepted at\\n     * a rate of 1:1.\\n     *\\n     * Subclasses should override this method if they want to add additional types of\\n     * collateral.\\n     */\\n    function getCollateralRate(address collateralType) public override virtual view returns (uint256) {\\n        if (collateralType == address(this)) {\\n            return 1;\\n        } else if (collateralType == customCollateralAddress) {\\n            return customCollateralRate;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function claimPeriod() public pure override returns (uint256){\\n        return 180 days;\\n    }\\n\\n    /**\\n     * Allows subclasses to set a custom collateral besides the token itself.\\n     * The collateral must be an ERC-20 token that returns true on successful transfers and\\n     * throws an exception or returns false on failure.\\n     * Also, do not forget to multiply the rate in accordance with the number of decimals of the collateral.\\n     * For example, rate should be 7*10**18 for 7 units of a collateral with 18 decimals.\\n     */\\n    function _setCustomClaimCollateral(address collateral, uint256 rate) internal {\\n        customCollateralAddress = collateral;\\n        if (customCollateralAddress == address(0)) {\\n            customCollateralRate = 0; // disabled\\n        } else {\\n            require(rate > 0, \\\"zero\\\");\\n            customCollateralRate = rate;\\n        }\\n    }\\n\\n    function getClaimDeleter() virtual public view returns (address);\\n\\n    function transfer(address recipient, uint256 amount) override virtual public returns (bool) {\\n        require(super.transfer(recipient, amount));\\n        if (hasFlagInternal(msg.sender, FLAG_CLAIM_PRESENT)){\\n            recovery.clearClaimFromToken(msg.sender);\\n        }\\n        return true;\\n    }\\n\\n    function notifyClaimMade(address target) public override {\\n        require(msg.sender == address(recovery));\\n        setFlag(target, FLAG_CLAIM_PRESENT, true);\\n    }\\n\\n    function notifyClaimDeleted(address target) public override {\\n        require(msg.sender == address(recovery));\\n        setFlag(target, FLAG_CLAIM_PRESENT, false);\\n    }\\n\\n    function deleteClaim(address lostAddress) public {\\n        require(msg.sender == getClaimDeleter(), \\\"no access\\\");\\n        recovery.deleteClaim(lostAddress);\\n    }\\n\\n    function recover(address oldAddress, address newAddress) public override {\\n        require(msg.sender == address(recovery));\\n        _transfer(oldAddress, newAddress, balanceOf(oldAddress));\\n    }\\n\\n}\",\"keccak256\":\"0xe7d50243cc4608f34f098f88c50722220062b0f5d0dce68889c16cf0c3ac5b6a\",\"license\":\"LicenseRef-Aktionariat\"},\"src/recovery/IRecoverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8;\\n\\nabstract contract IRecoverable {\\n\\n    function claimPeriod() public view virtual returns (uint256);\\n    \\n    function notifyClaimMade(address target) public virtual;\\n\\n    function notifyClaimDeleted(address target) public virtual;\\n\\n    function getCollateralRate(address collateral) public view virtual returns(uint256);\\n\\n    function recover(address oldAddress, address newAddress) public virtual;\\n\\n}\",\"keccak256\":\"0xa9210b5b54d0d397c2a42872bc23d78eed7e71a316ff76b4df8b718381b2288b\",\"license\":\"MIT\"},\"src/recovery/IRecoveryHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8;\\n\\nabstract contract IRecoveryHub {\\n\\n    function setRecoverable(bool flag) public virtual;\\n    \\n    function deleteClaim(address target) public virtual;\\n\\n    function clearClaimFromToken(address holder) public virtual;\\n\\n}\",\"keccak256\":\"0x0a1312e8bfe9a1f75923809750d79a41bcb36781f50ca8574245f4a9a40c689b\",\"license\":\"MIT\"},\"src/sha/ERC20Draggable.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: LicenseRef-Aktionariat\\n *\\n * MIT License with Automated License Fee Payments\\n *\\n * Copyright (c) 2020 Aktionariat AG (aktionariat.com)\\n *\\n * Permission is hereby granted to any person obtaining a copy of this software\\n * and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n * without restriction, including without limitation the rights to use, copy,\\n * modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n * Software, and to permit persons to whom the Software is furnished to do so,\\n * subject to the following conditions:\\n *\\n * - The above copyright notice and this permission notice shall be included in\\n *   all copies or substantial portions of the Software.\\n * - All automated license fee payments integrated into this and related Software\\n *   are preserved.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\npragma solidity >=0.8;\\n\\n/**\\n * @title CompanyName Shareholder Agreement\\n * @author Luzius Meisser, luzius@aktionariat.com\\n * @dev These tokens are based on the ERC20 standard and the open-zeppelin library.\\n *\\n * This is an ERC-20 token representing shares of CompanyName AG that are bound to\\n * a shareholder agreement that can be found at the URL defined in the constant 'terms'\\n * of the 'DraggableCompanyNameShares' contract. The agreement is partially enforced\\n * through the Swiss legal system, and partially enforced through this smart contract.\\n * In particular, this smart contract implements a drag-along clause which allows the\\n * majority of token holders to force the minority sell their shares along with them in\\n * case of an acquisition. That's why the tokens are called \\\"Draggable CompanyName AG Shares.\\\"\\n */\\n\\nimport \\\"./IDraggable.sol\\\";\\nimport \\\"../ERC20Flaggable.sol\\\";\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../IERC677Receiver.sol\\\";\\n\\nabstract contract ERC20Draggable is ERC20Flaggable, IERC677Receiver, IDraggable {\\n    \\n\\tuint8 private constant FLAG_VOTED = 1;\\n\\n\\tIERC20 public wrapped; // The wrapped contract\\n\\tIOfferFactory public immutable factory;\\n\\n\\t// If the wrapped tokens got replaced in an acquisition, unwrapping might yield many currency tokens\\n\\tuint256 public unwrapConversionFactor = 0;\\n\\n\\t// The current acquisition attempt, if any. See initiateAcquisition to see the requirements to make a public offer.\\n\\tIOffer public offer;\\n\\n\\tuint256 public immutable quorum; // BPS (out of 10'000)\\n\\tuint256 public immutable votePeriod; // Seconds\\n\\n\\taddress private oracle;\\n\\n\\tevent MigrationSucceeded(\\n\\t\\taddress newContractAddress,\\n\\t\\tuint256 yesVotes,\\n\\t\\tuint256 oracleVotes,\\n\\t\\tuint256 totalVotingPower\\n\\t);\\n\\n\\tconstructor(\\n\\t\\taddress _wrappedToken,\\n\\t\\tuint256 _quorum,\\n\\t\\tuint256 _votePeriod,\\n\\t\\taddress _offerFactory,\\n\\t\\taddress _oracle\\n\\t) {\\n\\t\\twrapped = IERC20(_wrappedToken);\\n\\t\\tquorum = _quorum;\\n\\t\\tvotePeriod = _votePeriod;\\n\\t\\tfactory = IOfferFactory(_offerFactory);\\n\\t\\toracle = _oracle;\\n\\t}\\n\\n\\tfunction onTokenTransfer(\\n\\t\\taddress from,\\n\\t\\tuint256 amount,\\n\\t\\tbytes calldata\\n\\t) public override returns (bool) {\\n\\t\\trequire(msg.sender == address(wrapped));\\n\\t\\t_mint(from, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/** Increases the number of drag-along tokens. Requires minter to deposit an equal amount of share tokens */\\n\\tfunction wrap(address shareholder, uint256 amount) public {\\n\\t\\trequire(wrapped.transferFrom(msg.sender, address(this), amount));\\n\\t\\t_mint(shareholder, amount);\\n\\t}\\n\\n\\t/**\\n\\t * Indicates that the token holders are bound to the token terms and that:\\n\\t * - Conversions back to the wrapped token (unwrap) are not allowed\\n\\t * - The drag-along can be performed by making an according offer\\n\\t * - They can be migrated to a new version of this contract in accordance with the terms\\n\\t */\\n\\tfunction isBinding() public view returns (bool) {\\n\\t\\treturn unwrapConversionFactor == 0;\\n\\t}\\n\\n\\tfunction name() public view override returns (string memory) {\\n\\t\\tif (isBinding()) {\\n\\t\\t\\treturn string(abi.encodePacked(wrapped.name(), \\\" SHA\\\"));\\n\\t\\t} else {\\n\\t\\t\\treturn string(abi.encodePacked(wrapped.name(), \\\" (Wrapped)\\\"));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction symbol() public view override returns (string memory) {\\n\\t\\t// ticker should be less dynamic than name\\n\\t\\treturn string(abi.encodePacked(wrapped.symbol(), \\\"S\\\"));\\n\\t}\\n\\n\\t/**\\n\\t * Deactivates the drag-along mechanism and enables the unwrap function.\\n\\t */\\n\\tfunction deactivate(uint256 factor) internal {\\n\\t\\trequire(factor >= 1, \\\"factor\\\");\\n\\t\\tunwrapConversionFactor = factor;\\n\\t\\temit NameChanged(name(), symbol());\\n\\t}\\n\\n\\t/** Decrease the number of drag-along tokens. The user gets back their shares in return */\\n\\tfunction unwrap(uint256 amount) public {\\n\\t\\trequire(!isBinding());\\n\\t\\tunwrap(msg.sender, amount, unwrapConversionFactor);\\n\\t}\\n\\n\\tfunction unwrap(\\n\\t\\taddress owner,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 factor\\n\\t) internal {\\n\\t\\t_burn(owner, amount);\\n\\t\\trequire(wrapped.transfer(owner, amount * factor));\\n\\t}\\n\\n\\t/**\\n\\t * Burns both the token itself as well as the wrapped token!\\n\\t * If you want to get out of the shareholder agreement, use unwrap after it has been\\n\\t * deactivated by a majority vote or acquisition.\\n\\t *\\n\\t * Burning only works if wrapped token supports burning. Also, the exact meaning of this\\n\\t * operation might depend on the circumstances. Burning and reussing the wrapped token\\n\\t * does not free the sender from the legal obligations of the shareholder agreement.\\n\\t */\\n\\tfunction burn(uint256 amount) public {\\n\\t\\t_burn(msg.sender, amount);\\n\\t\\tuint256 factor = isBinding() ? 1 : unwrapConversionFactor;\\n\\t\\tIShares(address(wrapped)).burn(amount * factor);\\n\\t}\\n\\n\\tfunction makeAcquisitionOffer(\\n\\t\\tbytes32 salt,\\n\\t\\tuint256 pricePerShare,\\n\\t\\taddress currency\\n\\t) public payable {\\n\\t\\trequire(isBinding());\\n\\t\\taddress newOffer = factory.create{value: msg.value}(\\n\\t\\t\\tsalt,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tpricePerShare,\\n\\t\\t\\tcurrency,\\n\\t\\t\\tquorum,\\n\\t\\t\\tvotePeriod\\n\\t\\t);\\n\\n\\t\\tif (offerExists()) {\\n\\t\\t\\toffer.makeCompetingOffer(newOffer);\\n\\t\\t}\\n\\t\\toffer = IOffer(newOffer);\\n\\t}\\n\\n\\tfunction drag(address buyer, address currency) public override {\\n\\t\\trequire(msg.sender == address(offer));\\n\\t\\tunwrap(buyer, balanceOf(buyer), 1);\\n\\t\\treplaceWrapped(currency, buyer);\\n\\t}\\n\\n\\tfunction notifyOfferEnded() public override {\\n\\t\\tif (msg.sender == address(offer)) {\\n\\t\\t\\toffer = IOffer(address(0));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction replaceWrapped(address newWrapped, address oldWrappedDestination) internal {\\n\\t\\trequire(isBinding());\\n\\t\\t// Free all old wrapped tokens we have\\n\\t\\trequire(wrapped.transfer(oldWrappedDestination, wrapped.balanceOf(address(this))));\\n\\t\\t// Count the new wrapped tokens\\n\\t\\twrapped = IERC20(newWrapped);\\n\\t\\tdeactivate(wrapped.balanceOf(address(this)) / totalSupply());\\n\\t}\\n\\n\\tfunction getOracle() public view override returns (address) {\\n\\t\\treturn oracle;\\n\\t}\\n\\n\\tfunction setOracle(address newOracle) public {\\n\\t\\trequire(msg.sender == oracle, \\\"not oracle\\\");\\n\\t\\toracle = newOracle;\\n\\t}\\n\\n\\tfunction migrateWithExternalApproval(address target, uint256 externalSupportingVotes) public {\\n\\t\\trequire(msg.sender == oracle);\\n\\t\\t// Additional votes cannot be higher than the votes not represented by these tokens.\\n\\t\\t// The assumption here is that more shareholders are bound to the shareholder agreement\\n\\t\\t// that this contract helps enforce and a vote among all parties is necessary to change\\n\\t\\t// it, with an oracle counting and reporting the votes of the others.\\n\\t\\trequire(totalSupply() + externalSupportingVotes <= totalVotingTokens());\\n\\t\\tmigrate(target, externalSupportingVotes);\\n\\t}\\n\\n\\tfunction migrate() public {\\n\\t\\tmigrate(msg.sender, 0);\\n\\t}\\n\\n\\tfunction migrate(address successor, uint256 additionalVotes) internal {\\n\\t\\tuint256 yesVotes = additionalVotes + balanceOf(successor);\\n\\t\\tuint256 totalVotes = totalVotingTokens();\\n\\t\\trequire(yesVotes < totalVotes);\\n\\t\\trequire(!offerExists()); // if you have the quorum, you can cancel the offer first if necessary\\n\\t\\trequire(yesVotes * 10000 >= totalVotes * quorum, \\\"quorum\\\");\\n\\t\\treplaceWrapped(successor, successor);\\n\\t\\temit MigrationSucceeded(successor, yesVotes, additionalVotes, totalVotes);\\n\\t}\\n\\n\\tfunction votingPower(address voter) public view override returns (uint256) {\\n\\t\\treturn balanceOf(voter);\\n\\t}\\n\\n\\tfunction totalVotingTokens() public view override returns (uint256) {\\n\\t\\treturn IShares(address(wrapped)).totalShares();\\n\\t}\\n\\n\\tfunction hasVoted(address voter) internal view returns (bool) {\\n\\t\\treturn hasFlagInternal(voter, FLAG_VOTED);\\n\\t}\\n\\n\\tfunction notifyVoted(address voter) public override {\\n\\t\\tsetFlag(voter, FLAG_VOTED, true);\\n\\t}\\n\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) internal virtual override {\\n\\t\\tif (hasVoted(from) || hasVoted(to)) {\\n\\t\\t\\tif (offerExists()) {\\n\\t\\t\\t\\toffer.notifyMoved(from, to, amount);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tsetFlag(from, FLAG_VOTED, false);\\n\\t\\t\\t\\tsetFlag(to, FLAG_VOTED, false);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tsuper._beforeTokenTransfer(from, to, amount);\\n\\t}\\n\\n\\tfunction offerExists() internal view returns (bool) {\\n\\t\\treturn address(offer) != address(0);\\n\\t}\\n}\\n\\nabstract contract IShares {\\n\\tfunction burn(uint256) public virtual;\\n\\n\\tfunction totalShares() public view virtual returns (uint256);\\n}\\n\\nabstract contract IOffer {\\n\\tfunction makeCompetingOffer(address newOffer) public virtual;\\n\\n\\tfunction notifyMoved(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 value\\n\\t) public virtual;\\n}\\n\\nabstract contract IOfferFactory {\\n\\tfunction create(\\n\\t\\tbytes32 salt,\\n\\t\\taddress buyer,\\n\\t\\tuint256 pricePerShare,\\n\\t\\taddress currency,\\n\\t\\tuint256 quorum,\\n\\t\\tuint256 votePeriod\\n\\t) public payable virtual returns (address);\\n}\\n\",\"keccak256\":\"0x326772da439f770afe82000d8d5e380638351ce345fc215c09898247604dd478\",\"license\":\"LicenseRef-Aktionariat\"},\"src/sha/IDraggable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8;\\n\\nabstract contract IDraggable {\\n    \\n    function getOracle() public virtual returns (address);\\n    function drag(address buyer, address currency) public virtual;\\n    function notifyOfferEnded() public virtual;\\n    function votingPower(address voter) public virtual returns (uint256);\\n    function totalVotingTokens() public virtual view returns (uint256);\\n    function notifyVoted(address voter) public virtual;\\n\\n}\",\"keccak256\":\"0x7a21ed8714d105341e8e0928f3c466702240810c959ce5abf42173b3e19f78e1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61010060405260006005553480156200001757600080fd5b5060405162002ce938038062002ce98339810160408190526200003a91620003b8565b600380546001600160a81b0319166101006001600160a01b038481168202929092179283905560405187938b938b938b938a938a938a9390910416906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350620000ab600162000183565b600480546001600160a01b039687166001600160a01b03199182161790915560a09490945260c0929092526001600160601b0319606091821b81166080526007805493909516929093169190911790925591901b1660e05287516200011890600a9060208b0190620002f5565b50604051636427ed9760e01b8152600060048201526001600160a01b03851690636427ed9790602401600060405180830381600087803b1580156200015c57600080fd5b505af115801562000171573d6000803e3d6000fd5b5050505050505050505050506200058e565b6003805460ff60a81b1916600160a81b1790558015620001ae57620001ab60006004620001b6565b50565b620001ab6000805b620001ca82601460ff84166001146200023a565b50620001df82601560ff84166002146200023a565b50620001f482601660ff84166004146200023a565b5060405160ff821681526001600160a01b038316907fe423d7d31023dbacefed7c937785d0012ad8f314381295efebfc0471d2c434549060200160405180910390a25050565b60008115156200024b858562000273565b15151462000268576200025f8484620002b5565b5060016200026c565b5060005b9392505050565b600080620002838360e062000507565b6001600160a01b038516600090815260208190526040902054600160ff929092169190911b9081161491505092915050565b6000620002c48260e062000507565b6001600160a01b039390931660009081526020819052604090208054600160ff9095169490941b9093189092555050565b82805462000303906200053b565b90600052602060002090601f01602090048101928262000327576000855562000372565b82601f106200034257805160ff191683800117855562000372565b8280016001018555821562000372579182015b828111156200037257825182559160200191906001019062000355565b506200038092915062000384565b5090565b5b8082111562000380576000815560010162000385565b80516001600160a01b0381168114620003b357600080fd5b919050565b600080600080600080600080610100898b031215620003d657600080fd5b88516001600160401b0380821115620003ee57600080fd5b818b0191508b601f8301126200040357600080fd5b81518181111562000418576200041862000578565b604051601f8201601f19908116603f0116810190838211818310171562000443576200044362000578565b81604052828152602093508e848487010111156200046057600080fd5b600091505b8282101562000484578482018401518183018501529083019062000465565b82821115620004965760008484830101525b9b50620004a89150508b82016200039b565b985050506040890151955060608901519450620004c860808a016200039b565b9350620004d860a08a016200039b565b9250620004e860c08a016200039b565b9150620004f860e08a016200039b565b90509295985092959890939650565b600060ff821660ff84168060ff038211156200053357634e487b7160e01b600052601160045260246000fd5b019392505050565b600181811c908216806200055057607f821691505b602082108114156200057257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160601c60a05160c05160e05160601c6126dc6200060d600039600081816108e901528181610cf801528181610f2d015281816112370152818161150a0152611a3f01526000818161073201526113620152600081816103e20152818161133c01526116c4015260008181610826015261138b01526126dc6000f3fe6080604052600436106102ff5760003560e01c80638da5cb5b11610190578063c18172c4116100dc578063ddceafa911610095578063e5b824ec1161006f578063e5b824ec1461094b578063f2fde38b1461096b578063f5c0b95f1461098b578063fcb79a7e146109ab57600080fd5b8063ddceafa9146108d7578063de0e9a3e1461090b578063e445d70a1461092b57600080fd5b8063c18172c4146107f4578063c45a015514610814578063d37a9bb014610848578063d502562514610869578063dcc7d4ad1461087e578063dd62ed3e1461089157600080fd5b8063a4c0ed3611610149578063b1c8db6611610123578063b1c8db6614610774578063bf376c7a14610794578063c028df06146107b4578063c07473f6146107d457600080fd5b8063a4c0ed3614610700578063a781358714610720578063a9059cbb1461075457600080fd5b80638da5cb5b1461065b5780638fd3ab801461068057806395d89b41146106955780639e37878c146106aa5780639e4b5745146106ca578063a49a7cb1146106e057600080fd5b806332bc320b1161024f578063609181171161020857806377e071ad116101e257806377e071ad146105e75780637adbf973146106075780637dc2cd9814610627578063833b1fce1461063d57600080fd5b80636091811714610591578063648bf774146105a757806370a08231146105c757600080fd5b806332bc320b146104dc5780634000aea0146104f157806342966c6814610511578063429c66f01461053157806345c8a62b1461055157806350e70d481461057157600080fd5b806318160ddd116102bc5780632a0a4ed5116102965780632a0a4ed51461045b5780632b34309914610470578063313ce5671461049057806332a7ae95146104bc57600080fd5b806318160ddd14610404578063198453541461041957806323b872dd1461043b57600080fd5b806306fdde03146103045780630832e4701461032f578063095ea7b3146103535780630a81b2de146103835780630c6f0e5d146103985780631703a018146103d0575b600080fd5b34801561031057600080fd5b506103196109cb565b60405161032691906124e5565b60405180910390f35b34801561033b57600080fd5b5061034560055481565b604051908152602001610326565b34801561035f57600080fd5b5061037361036e366004612136565b610b0c565b6040519015158152602001610326565b34801561038f57600080fd5b50610345610b22565b3480156103a457600080fd5b506008546103b8906001600160a01b031681565b6040516001600160a01b039091168152602001610326565b3480156103dc57600080fd5b506103457f000000000000000000000000000000000000000000000000000000000000000081565b34801561041057600080fd5b50600254610345565b34801561042557600080fd5b50610439610434366004612136565b610baf565b005b34801561044757600080fd5b506103736104563660046120f5565b610bfb565b34801561046757600080fd5b506103b8610c59565b34801561047c57600080fd5b5061037361048b366004612082565b610c6d565b34801561049c57600080fd5b506003546104aa9060ff1681565b60405160ff9091168152602001610326565b3480156104c857600080fd5b506104396104d7366004612082565b610c80565b3480156104e857600080fd5b50610439610d57565b3480156104fd57600080fd5b5061037361050c366004612162565b610d7d565b34801561051d57600080fd5b5061043961052c3660046123c4565b610e22565b34801561053d57600080fd5b5061043961054c366004612220565b610eb9565b34801561055d57600080fd5b5061043961056c366004612082565b610f16565b34801561057d57600080fd5b506004546103b8906001600160a01b031681565b34801561059d57600080fd5b5061034560095481565b3480156105b357600080fd5b506104396105c23660046120bc565b610f22565b3480156105d357600080fd5b506103456105e2366004612082565b610f6a565b3480156105f357600080fd5b50610345610602366004612082565b610f8e565b34801561061357600080fd5b50610439610622366004612082565b610fd4565b34801561063357600080fd5b5062ed4e00610345565b34801561064957600080fd5b506007546001600160a01b03166103b8565b34801561066757600080fd5b506003546103b89061010090046001600160a01b031681565b34801561068c57600080fd5b5061043961103d565b3480156106a157600080fd5b50610319611048565b3480156106b657600080fd5b506103736106c5366004612082565b6110e4565b3480156106d657600080fd5b5060055415610373565b3480156106ec57600080fd5b506104396106fb3660046121eb565b6110f1565b34801561070c57600080fd5b5061037361071b366004612162565b61112a565b34801561072c57600080fd5b506103457f000000000000000000000000000000000000000000000000000000000000000081565b34801561076057600080fd5b5061037361076f366004612136565b611159565b34801561078057600080fd5b5061037361078f366004612082565b611165565b3480156107a057600080fd5b506104396107af366004612136565b611183565b3480156107c057600080fd5b506006546103b8906001600160a01b031681565b3480156107e057600080fd5b506103456107ef366004612082565b611221565b34801561080057600080fd5b5061043961080f366004612082565b61122c565b34801561082057600080fd5b506103b87f000000000000000000000000000000000000000000000000000000000000000081565b34801561085457600080fd5b5060035461037390600160a81b900460ff1681565b34801561087557600080fd5b5061031961126e565b61043961088c3660046122de565b6112fc565b34801561089d57600080fd5b506103456108ac3660046120bc565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3480156108e357600080fd5b506103b87f000000000000000000000000000000000000000000000000000000000000000081565b34801561091757600080fd5b506104396109263660046123c4565b6114ab565b34801561093757600080fd5b506104396109463660046122a4565b6114c7565b34801561095757600080fd5b50610439610966366004612082565b6114ff565b34801561097757600080fd5b50610439610986366004612082565b611541565b34801561099757600080fd5b506103736109a63660046121eb565b6115d7565b3480156109b757600080fd5b506104396109c63660046120bc565b6115e3565b60606109d76005541590565b15610a7e5760048054604080516306fdde0360e01b815290516001600160a01b03909216926306fdde03928282019260009290829003018186803b158015610a1e57600080fd5b505afa158015610a32573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a5a9190810190612317565b604051602001610a6a9190612450565b604051602081830303815290604052905090565b60048054604080516306fdde0360e01b815290516001600160a01b03909216926306fdde03928282019260009290829003018186803b158015610ac057600080fd5b505afa158015610ad4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610afc9190810190612317565b604051602001610a6a9190612422565b6000610b19338484611618565b50600192915050565b6000600460009054906101000a90046001600160a01b03166001600160a01b0316633a98ef396040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7257600080fd5b505afa158015610b86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610baa91906123dd565b905090565b6007546001600160a01b03163314610bc657600080fd5b610bce610b22565b81610bd860025490565b610be29190612540565b1115610bed57600080fd5b610bf7828261167a565b5050565b6000610c0884848461178d565b6001600160a01b0384166000908152600160209081526040808320338452909152902054600160ff1b811015610c4c57610c4c8533610c4786856125be565b611618565b60019150505b9392505050565b6000610baa6007546001600160a01b031690565b6000610c7a826016611815565b92915050565b610c88610c59565b6001600160a01b0316336001600160a01b031614610cd95760405162461bcd60e51b81526020600482015260096024820152686e6f2061636365737360b81b60448201526064015b60405180910390fd5b6040516332a7ae9560e01b81526001600160a01b0382811660048301527f000000000000000000000000000000000000000000000000000000000000000016906332a7ae9590602401600060405180830381600087803b158015610d3c57600080fd5b505af1158015610d50573d6000803e3d6000fd5b5050505050565b6006546001600160a01b0316331415610d7b57600680546001600160a01b03191690555b565b600080610d8a8686611159565b90508015610e1957604051635260769b60e11b81526001600160a01b0387169063a4c0ed3690610dc490339089908990899060040161249d565b602060405180830381600087803b158015610dde57600080fd5b505af1158015610df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1691906122c1565b90505b95945050505050565b610e2c3382611855565b6000610e386005541590565b610e4457600554610e47565b60015b6004549091506001600160a01b03166342966c68610e65838561259f565b6040518263ffffffff1660e01b8152600401610e8391815260200190565b600060405180830381600087803b158015610e9d57600080fd5b505af1158015610eb1573d6000803e3d6000fd5b505050505050565b60035461010090046001600160a01b03163314610ee85760405162461bcd60e51b8152600401610cd09061251d565b60005b82811015610f1057610efe848484610eb9565b80610f088161263c565b915050610eeb565b50505050565b610bf7816001806118eb565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f5757600080fd5b610bf78282610f6585610f6a565b61178d565b6001600160a01b03166000908152602081905260409020546001600160e01b031690565b60006001600160a01b038216301415610fa957506001919050565b6008546001600160a01b0383811691161415610fc757505060095490565b506000919050565b919050565b6007546001600160a01b0316331461101b5760405162461bcd60e51b815260206004820152600a6024820152696e6f74206f7261636c6560b01b6044820152606401610cd0565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b610d7b33600061167a565b6060600460009054906101000a90046001600160a01b03166001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561109857600080fd5b505afa1580156110ac573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110d49190810190612317565b604051602001610a6a9190612478565b6000610c7a826015611815565b60035461010090046001600160a01b031633146111205760405162461bcd60e51b8152600401610cd09061251d565b610bf7828261191b565b6004546000906001600160a01b0316331461114457600080fd5b61114e8585611999565b506001949350505050565b6000610c528383611a05565b6000611172826014611815565b80610c7a5750610c7a826016611815565b600480546040516323b872dd60e01b81523392810192909252306024830152604482018390526001600160a01b0316906323b872dd90606401602060405180830381600087803b1580156111d657600080fd5b505af11580156111ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120e91906122c1565b61121757600080fd5b610bf78282611999565b6000610c7a82610f6a565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461126157600080fd5b610bf781600a60016118eb565b600a805461127b90612601565b80601f01602080910402602001604051908101604052809291908181526020018280546112a790612601565b80156112f45780601f106112c9576101008083540402835291602001916112f4565b820191906000526020600020905b8154815290600101906020018083116112d757829003601f168201915b505050505081565b6005541561130957600080fd5b604051634dc5e43160e01b815260048101849052336024820152604481018390526001600160a01b0382811660648301527f000000000000000000000000000000000000000000000000000000000000000060848301527f000000000000000000000000000000000000000000000000000000000000000060a48301526000917f000000000000000000000000000000000000000000000000000000000000000090911690634dc5e43190349060c4016020604051808303818588803b1580156113d257600080fd5b505af11580156113e6573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061140b919061209f565b90506114216006546001600160a01b0316151590565b1561148657600654604051637b64620f60e11b81526001600160a01b0383811660048301529091169063f6c8c41e90602401600060405180830381600087803b15801561146d57600080fd5b505af1158015611481573d6000803e3d6000fd5b505050505b600680546001600160a01b0319166001600160a01b0392909216919091179055505050565b6005546114b757600080fd5b6114c43382600554611aac565b50565b60035461010090046001600160a01b031633146114f65760405162461bcd60e51b8152600401610cd09061251d565b6114c481611b5e565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461153457600080fd5b610bf781600a60006118eb565b60035461010090046001600160a01b031633146115705760405162461bcd60e51b8152600401610cd09061251d565b6003546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6000610c528383611815565b6006546001600160a01b031633146115fa57600080fd5b61160e8261160784610f6a565b6001611aac565b610bf78183611b8e565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600061168583610f6a565b61168f9083612540565b9050600061169b610b22565b90508082106116a957600080fd5b6006546001600160a01b0316156116bf57600080fd5b6116e97f00000000000000000000000000000000000000000000000000000000000000008261259f565b6116f58361271061259f565b101561172c5760405162461bcd60e51b815260206004820152600660248201526571756f72756d60d01b6044820152606401610cd0565b6117368485611b8e565b604080516001600160a01b038616815260208101849052908101849052606081018290527f85e5711a70a7d2bae18e1232af474d82c98600b0e62fe079a28208520b58568e9060800160405180910390a150505050565b611798838383611d55565b6001600160a01b038316600090815260208190526040812080548392906117c09084906125be565b909155506117d090508282611d60565b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161166d91815260200190565b6000806118238360e0612558565b6001600160a01b038516600090815260208190526040902054600160ff929092169190911b9081161491505092915050565b61186182600083611d55565b806002600082825461187391906125be565b90915550506001600160a01b038216600090815260208190526040812080548392906118a09084906125be565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b60008115156118fa8585611815565b1515146119135761190b8484611e0d565b506001610c52565b506000610c52565b61192d82601460ff84166001146118eb565b5061194082601560ff84166002146118eb565b5061195382601660ff84166004146118eb565b5060405160ff821681526001600160a01b038316907fe423d7d31023dbacefed7c937785d0012ad8f314381295efebfc0471d2c434549060200160405180910390a25050565b6119a560008383611d55565b80600260008282546119b79190612540565b909155506119c790508282611d60565b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016118df565b6000611a118383611e4b565b611a1a57600080fd5b611a2533600a611815565b15610b19576040516304d301a360e41b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634d301a3090602401600060405180830381600087803b158015611a8b57600080fd5b505af1158015611a9f573d6000803e3d6000fd5b5050505050600192915050565b611ab68383611855565b6004546001600160a01b031663a9059cbb84611ad2848661259f565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015611b1857600080fd5b505af1158015611b2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5091906122c1565b611b5957600080fd5b505050565b6003805460ff60a81b1916600160a81b1790558015611b83576114c46000600461191b565b6114c460008061191b565b60055415611b9b57600080fd5b600480546040516370a0823160e01b815230928101929092526001600160a01b03169063a9059cbb90839083906370a082319060240160206040518083038186803b158015611be957600080fd5b505afa158015611bfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2191906123dd565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015611c6757600080fd5b505af1158015611c7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9f91906122c1565b611ca857600080fd5b600480546001600160a01b0319166001600160a01b038416179055600254610bf790600480546040516370a0823160e01b815230928101929092526001600160a01b0316906370a082319060240160206040518083038186803b158015611d0e57600080fd5b505afa158015611d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4691906123dd565b611d50919061257d565b611e58565b611b59838383611ee1565b6001600160a01b038216611d7357600080fd5b6001600160a01b038216600090815260208190526040812054906001600160e01b0319821690611da38484612540565b90506001600160e01b03198116828114611dea5760405162461bcd60e51b81526020600482015260086024820152676f766572666c6f7760c01b6044820152606401610cd0565b506001600160a01b03909416600090815260208190526040902093909355505050565b6000611e1a8260e0612558565b6001600160a01b039390931660009081526020819052604090208054600160ff9095169490941b9093189092555050565b6000610b1933848461178d565b6001811015611e925760405162461bcd60e51b81526020600482015260066024820152653330b1ba37b960d11b6044820152606401610cd0565b60058190557f6c20b91d1723b78732eba64ff11ebd7966a6e4af568a00fa4f6b72c20f58b02a611ec06109cb565b611ec8611048565b604051611ed69291906124f8565b60405180910390a150565b611eea83611faa565b80611ef95750611ef982611faa565b15611f9f576006546001600160a01b031615611f825760065460405163e1a1810f60e01b81526001600160a01b0385811660048301528481166024830152604482018490529091169063e1a1810f90606401600060405180830381600087803b158015611f6557600080fd5b505af1158015611f79573d6000803e3d6000fd5b50505050611f9f565b611f8f83600160006118eb565b50611f9d82600160006118eb565b505b611b59838383611fb7565b6000610c7a826001611815565b611fc082611165565b15611fca57505050565b611fd3826110e4565b15611fe157611b598261201e565b611fea83610c6d565b15611ffa57611b598260016110f1565b612005836014611815565b806120145750612014836110e4565b15611b5957611b59835b600354600160a81b900460ff16156120665760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd08185b1b1bddd95960aa1b6044820152606401610cd0565b6114c48160006110f1565b803560ff81168114610fcf57600080fd5b60006020828403121561209457600080fd5b8135610c5281612683565b6000602082840312156120b157600080fd5b8151610c5281612683565b600080604083850312156120cf57600080fd5b82356120da81612683565b915060208301356120ea81612683565b809150509250929050565b60008060006060848603121561210a57600080fd5b833561211581612683565b9250602084013561212581612683565b929592945050506040919091013590565b6000806040838503121561214957600080fd5b823561215481612683565b946020939093013593505050565b6000806000806060858703121561217857600080fd5b843561218381612683565b935060208501359250604085013567ffffffffffffffff808211156121a757600080fd5b818701915087601f8301126121bb57600080fd5b8135818111156121ca57600080fd5b8860208285010111156121dc57600080fd5b95989497505060200194505050565b600080604083850312156121fe57600080fd5b823561220981612683565b915061221760208401612071565b90509250929050565b60008060006040848603121561223557600080fd5b833567ffffffffffffffff8082111561224d57600080fd5b818601915086601f83011261226157600080fd5b81358181111561227057600080fd5b8760208260051b850101111561228557600080fd5b60209283019550935061229b9186019050612071565b90509250925092565b6000602082840312156122b657600080fd5b8135610c5281612698565b6000602082840312156122d357600080fd5b8151610c5281612698565b6000806000606084860312156122f357600080fd5b8335925060208401359150604084013561230c81612683565b809150509250925092565b60006020828403121561232957600080fd5b815167ffffffffffffffff8082111561234157600080fd5b818401915084601f83011261235557600080fd5b8151818111156123675761236761266d565b604051601f8201601f19908116603f0116810190838211818310171561238f5761238f61266d565b816040528281528760208487010111156123a857600080fd5b6123b98360208301602088016125d5565b979650505050505050565b6000602082840312156123d657600080fd5b5035919050565b6000602082840312156123ef57600080fd5b5051919050565b6000815180845261240e8160208601602086016125d5565b601f01601f19169290920160200192915050565b600082516124348184602087016125d5565b692028577261707065642960b01b920191825250600a01919050565b600082516124628184602087016125d5565b632053484160e01b920191825250600401919050565b6000825161248a8184602087016125d5565b605360f81b920191825250600101919050565b6001600160a01b0385168152602081018490526060604082018190528101829052818360808301376000818301608090810191909152601f909201601f191601019392505050565b602081526000610c5260208301846123f6565b60408152600061250b60408301856123f6565b8281036020840152610e1981856123f6565b6020808252600990820152683737ba1037bbb732b960b91b604082015260600190565b6000821982111561255357612553612657565b500190565b600060ff821660ff84168060ff0382111561257557612575612657565b019392505050565b60008261259a57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156125b9576125b9612657565b500290565b6000828210156125d0576125d0612657565b500390565b60005b838110156125f05781810151838201526020016125d8565b83811115610f105750506000910152565b600181811c9082168061261557607f821691505b6020821081141561263657634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561265057612650612657565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146114c457600080fd5b80151581146114c457600080fdfea2646970667358221220085fb9135fa52aa81f5253be7ae87ab79c986d9616c5d6616b1ef99257a3ec5864736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106102ff5760003560e01c80638da5cb5b11610190578063c18172c4116100dc578063ddceafa911610095578063e5b824ec1161006f578063e5b824ec1461094b578063f2fde38b1461096b578063f5c0b95f1461098b578063fcb79a7e146109ab57600080fd5b8063ddceafa9146108d7578063de0e9a3e1461090b578063e445d70a1461092b57600080fd5b8063c18172c4146107f4578063c45a015514610814578063d37a9bb014610848578063d502562514610869578063dcc7d4ad1461087e578063dd62ed3e1461089157600080fd5b8063a4c0ed3611610149578063b1c8db6611610123578063b1c8db6614610774578063bf376c7a14610794578063c028df06146107b4578063c07473f6146107d457600080fd5b8063a4c0ed3614610700578063a781358714610720578063a9059cbb1461075457600080fd5b80638da5cb5b1461065b5780638fd3ab801461068057806395d89b41146106955780639e37878c146106aa5780639e4b5745146106ca578063a49a7cb1146106e057600080fd5b806332bc320b1161024f578063609181171161020857806377e071ad116101e257806377e071ad146105e75780637adbf973146106075780637dc2cd9814610627578063833b1fce1461063d57600080fd5b80636091811714610591578063648bf774146105a757806370a08231146105c757600080fd5b806332bc320b146104dc5780634000aea0146104f157806342966c6814610511578063429c66f01461053157806345c8a62b1461055157806350e70d481461057157600080fd5b806318160ddd116102bc5780632a0a4ed5116102965780632a0a4ed51461045b5780632b34309914610470578063313ce5671461049057806332a7ae95146104bc57600080fd5b806318160ddd14610404578063198453541461041957806323b872dd1461043b57600080fd5b806306fdde03146103045780630832e4701461032f578063095ea7b3146103535780630a81b2de146103835780630c6f0e5d146103985780631703a018146103d0575b600080fd5b34801561031057600080fd5b506103196109cb565b60405161032691906124e5565b60405180910390f35b34801561033b57600080fd5b5061034560055481565b604051908152602001610326565b34801561035f57600080fd5b5061037361036e366004612136565b610b0c565b6040519015158152602001610326565b34801561038f57600080fd5b50610345610b22565b3480156103a457600080fd5b506008546103b8906001600160a01b031681565b6040516001600160a01b039091168152602001610326565b3480156103dc57600080fd5b506103457f000000000000000000000000000000000000000000000000000000000000000081565b34801561041057600080fd5b50600254610345565b34801561042557600080fd5b50610439610434366004612136565b610baf565b005b34801561044757600080fd5b506103736104563660046120f5565b610bfb565b34801561046757600080fd5b506103b8610c59565b34801561047c57600080fd5b5061037361048b366004612082565b610c6d565b34801561049c57600080fd5b506003546104aa9060ff1681565b60405160ff9091168152602001610326565b3480156104c857600080fd5b506104396104d7366004612082565b610c80565b3480156104e857600080fd5b50610439610d57565b3480156104fd57600080fd5b5061037361050c366004612162565b610d7d565b34801561051d57600080fd5b5061043961052c3660046123c4565b610e22565b34801561053d57600080fd5b5061043961054c366004612220565b610eb9565b34801561055d57600080fd5b5061043961056c366004612082565b610f16565b34801561057d57600080fd5b506004546103b8906001600160a01b031681565b34801561059d57600080fd5b5061034560095481565b3480156105b357600080fd5b506104396105c23660046120bc565b610f22565b3480156105d357600080fd5b506103456105e2366004612082565b610f6a565b3480156105f357600080fd5b50610345610602366004612082565b610f8e565b34801561061357600080fd5b50610439610622366004612082565b610fd4565b34801561063357600080fd5b5062ed4e00610345565b34801561064957600080fd5b506007546001600160a01b03166103b8565b34801561066757600080fd5b506003546103b89061010090046001600160a01b031681565b34801561068c57600080fd5b5061043961103d565b3480156106a157600080fd5b50610319611048565b3480156106b657600080fd5b506103736106c5366004612082565b6110e4565b3480156106d657600080fd5b5060055415610373565b3480156106ec57600080fd5b506104396106fb3660046121eb565b6110f1565b34801561070c57600080fd5b5061037361071b366004612162565b61112a565b34801561072c57600080fd5b506103457f000000000000000000000000000000000000000000000000000000000000000081565b34801561076057600080fd5b5061037361076f366004612136565b611159565b34801561078057600080fd5b5061037361078f366004612082565b611165565b3480156107a057600080fd5b506104396107af366004612136565b611183565b3480156107c057600080fd5b506006546103b8906001600160a01b031681565b3480156107e057600080fd5b506103456107ef366004612082565b611221565b34801561080057600080fd5b5061043961080f366004612082565b61122c565b34801561082057600080fd5b506103b87f000000000000000000000000000000000000000000000000000000000000000081565b34801561085457600080fd5b5060035461037390600160a81b900460ff1681565b34801561087557600080fd5b5061031961126e565b61043961088c3660046122de565b6112fc565b34801561089d57600080fd5b506103456108ac3660046120bc565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3480156108e357600080fd5b506103b87f000000000000000000000000000000000000000000000000000000000000000081565b34801561091757600080fd5b506104396109263660046123c4565b6114ab565b34801561093757600080fd5b506104396109463660046122a4565b6114c7565b34801561095757600080fd5b50610439610966366004612082565b6114ff565b34801561097757600080fd5b50610439610986366004612082565b611541565b34801561099757600080fd5b506103736109a63660046121eb565b6115d7565b3480156109b757600080fd5b506104396109c63660046120bc565b6115e3565b60606109d76005541590565b15610a7e5760048054604080516306fdde0360e01b815290516001600160a01b03909216926306fdde03928282019260009290829003018186803b158015610a1e57600080fd5b505afa158015610a32573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a5a9190810190612317565b604051602001610a6a9190612450565b604051602081830303815290604052905090565b60048054604080516306fdde0360e01b815290516001600160a01b03909216926306fdde03928282019260009290829003018186803b158015610ac057600080fd5b505afa158015610ad4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610afc9190810190612317565b604051602001610a6a9190612422565b6000610b19338484611618565b50600192915050565b6000600460009054906101000a90046001600160a01b03166001600160a01b0316633a98ef396040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7257600080fd5b505afa158015610b86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610baa91906123dd565b905090565b6007546001600160a01b03163314610bc657600080fd5b610bce610b22565b81610bd860025490565b610be29190612540565b1115610bed57600080fd5b610bf7828261167a565b5050565b6000610c0884848461178d565b6001600160a01b0384166000908152600160209081526040808320338452909152902054600160ff1b811015610c4c57610c4c8533610c4786856125be565b611618565b60019150505b9392505050565b6000610baa6007546001600160a01b031690565b6000610c7a826016611815565b92915050565b610c88610c59565b6001600160a01b0316336001600160a01b031614610cd95760405162461bcd60e51b81526020600482015260096024820152686e6f2061636365737360b81b60448201526064015b60405180910390fd5b6040516332a7ae9560e01b81526001600160a01b0382811660048301527f000000000000000000000000000000000000000000000000000000000000000016906332a7ae9590602401600060405180830381600087803b158015610d3c57600080fd5b505af1158015610d50573d6000803e3d6000fd5b5050505050565b6006546001600160a01b0316331415610d7b57600680546001600160a01b03191690555b565b600080610d8a8686611159565b90508015610e1957604051635260769b60e11b81526001600160a01b0387169063a4c0ed3690610dc490339089908990899060040161249d565b602060405180830381600087803b158015610dde57600080fd5b505af1158015610df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1691906122c1565b90505b95945050505050565b610e2c3382611855565b6000610e386005541590565b610e4457600554610e47565b60015b6004549091506001600160a01b03166342966c68610e65838561259f565b6040518263ffffffff1660e01b8152600401610e8391815260200190565b600060405180830381600087803b158015610e9d57600080fd5b505af1158015610eb1573d6000803e3d6000fd5b505050505050565b60035461010090046001600160a01b03163314610ee85760405162461bcd60e51b8152600401610cd09061251d565b60005b82811015610f1057610efe848484610eb9565b80610f088161263c565b915050610eeb565b50505050565b610bf7816001806118eb565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f5757600080fd5b610bf78282610f6585610f6a565b61178d565b6001600160a01b03166000908152602081905260409020546001600160e01b031690565b60006001600160a01b038216301415610fa957506001919050565b6008546001600160a01b0383811691161415610fc757505060095490565b506000919050565b919050565b6007546001600160a01b0316331461101b5760405162461bcd60e51b815260206004820152600a6024820152696e6f74206f7261636c6560b01b6044820152606401610cd0565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b610d7b33600061167a565b6060600460009054906101000a90046001600160a01b03166001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561109857600080fd5b505afa1580156110ac573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110d49190810190612317565b604051602001610a6a9190612478565b6000610c7a826015611815565b60035461010090046001600160a01b031633146111205760405162461bcd60e51b8152600401610cd09061251d565b610bf7828261191b565b6004546000906001600160a01b0316331461114457600080fd5b61114e8585611999565b506001949350505050565b6000610c528383611a05565b6000611172826014611815565b80610c7a5750610c7a826016611815565b600480546040516323b872dd60e01b81523392810192909252306024830152604482018390526001600160a01b0316906323b872dd90606401602060405180830381600087803b1580156111d657600080fd5b505af11580156111ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120e91906122c1565b61121757600080fd5b610bf78282611999565b6000610c7a82610f6a565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461126157600080fd5b610bf781600a60016118eb565b600a805461127b90612601565b80601f01602080910402602001604051908101604052809291908181526020018280546112a790612601565b80156112f45780601f106112c9576101008083540402835291602001916112f4565b820191906000526020600020905b8154815290600101906020018083116112d757829003601f168201915b505050505081565b6005541561130957600080fd5b604051634dc5e43160e01b815260048101849052336024820152604481018390526001600160a01b0382811660648301527f000000000000000000000000000000000000000000000000000000000000000060848301527f000000000000000000000000000000000000000000000000000000000000000060a48301526000917f000000000000000000000000000000000000000000000000000000000000000090911690634dc5e43190349060c4016020604051808303818588803b1580156113d257600080fd5b505af11580156113e6573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061140b919061209f565b90506114216006546001600160a01b0316151590565b1561148657600654604051637b64620f60e11b81526001600160a01b0383811660048301529091169063f6c8c41e90602401600060405180830381600087803b15801561146d57600080fd5b505af1158015611481573d6000803e3d6000fd5b505050505b600680546001600160a01b0319166001600160a01b0392909216919091179055505050565b6005546114b757600080fd5b6114c43382600554611aac565b50565b60035461010090046001600160a01b031633146114f65760405162461bcd60e51b8152600401610cd09061251d565b6114c481611b5e565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461153457600080fd5b610bf781600a60006118eb565b60035461010090046001600160a01b031633146115705760405162461bcd60e51b8152600401610cd09061251d565b6003546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6000610c528383611815565b6006546001600160a01b031633146115fa57600080fd5b61160e8261160784610f6a565b6001611aac565b610bf78183611b8e565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600061168583610f6a565b61168f9083612540565b9050600061169b610b22565b90508082106116a957600080fd5b6006546001600160a01b0316156116bf57600080fd5b6116e97f00000000000000000000000000000000000000000000000000000000000000008261259f565b6116f58361271061259f565b101561172c5760405162461bcd60e51b815260206004820152600660248201526571756f72756d60d01b6044820152606401610cd0565b6117368485611b8e565b604080516001600160a01b038616815260208101849052908101849052606081018290527f85e5711a70a7d2bae18e1232af474d82c98600b0e62fe079a28208520b58568e9060800160405180910390a150505050565b611798838383611d55565b6001600160a01b038316600090815260208190526040812080548392906117c09084906125be565b909155506117d090508282611d60565b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161166d91815260200190565b6000806118238360e0612558565b6001600160a01b038516600090815260208190526040902054600160ff929092169190911b9081161491505092915050565b61186182600083611d55565b806002600082825461187391906125be565b90915550506001600160a01b038216600090815260208190526040812080548392906118a09084906125be565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b60008115156118fa8585611815565b1515146119135761190b8484611e0d565b506001610c52565b506000610c52565b61192d82601460ff84166001146118eb565b5061194082601560ff84166002146118eb565b5061195382601660ff84166004146118eb565b5060405160ff821681526001600160a01b038316907fe423d7d31023dbacefed7c937785d0012ad8f314381295efebfc0471d2c434549060200160405180910390a25050565b6119a560008383611d55565b80600260008282546119b79190612540565b909155506119c790508282611d60565b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016118df565b6000611a118383611e4b565b611a1a57600080fd5b611a2533600a611815565b15610b19576040516304d301a360e41b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634d301a3090602401600060405180830381600087803b158015611a8b57600080fd5b505af1158015611a9f573d6000803e3d6000fd5b5050505050600192915050565b611ab68383611855565b6004546001600160a01b031663a9059cbb84611ad2848661259f565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015611b1857600080fd5b505af1158015611b2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5091906122c1565b611b5957600080fd5b505050565b6003805460ff60a81b1916600160a81b1790558015611b83576114c46000600461191b565b6114c460008061191b565b60055415611b9b57600080fd5b600480546040516370a0823160e01b815230928101929092526001600160a01b03169063a9059cbb90839083906370a082319060240160206040518083038186803b158015611be957600080fd5b505afa158015611bfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2191906123dd565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015611c6757600080fd5b505af1158015611c7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9f91906122c1565b611ca857600080fd5b600480546001600160a01b0319166001600160a01b038416179055600254610bf790600480546040516370a0823160e01b815230928101929092526001600160a01b0316906370a082319060240160206040518083038186803b158015611d0e57600080fd5b505afa158015611d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4691906123dd565b611d50919061257d565b611e58565b611b59838383611ee1565b6001600160a01b038216611d7357600080fd5b6001600160a01b038216600090815260208190526040812054906001600160e01b0319821690611da38484612540565b90506001600160e01b03198116828114611dea5760405162461bcd60e51b81526020600482015260086024820152676f766572666c6f7760c01b6044820152606401610cd0565b506001600160a01b03909416600090815260208190526040902093909355505050565b6000611e1a8260e0612558565b6001600160a01b039390931660009081526020819052604090208054600160ff9095169490941b9093189092555050565b6000610b1933848461178d565b6001811015611e925760405162461bcd60e51b81526020600482015260066024820152653330b1ba37b960d11b6044820152606401610cd0565b60058190557f6c20b91d1723b78732eba64ff11ebd7966a6e4af568a00fa4f6b72c20f58b02a611ec06109cb565b611ec8611048565b604051611ed69291906124f8565b60405180910390a150565b611eea83611faa565b80611ef95750611ef982611faa565b15611f9f576006546001600160a01b031615611f825760065460405163e1a1810f60e01b81526001600160a01b0385811660048301528481166024830152604482018490529091169063e1a1810f90606401600060405180830381600087803b158015611f6557600080fd5b505af1158015611f79573d6000803e3d6000fd5b50505050611f9f565b611f8f83600160006118eb565b50611f9d82600160006118eb565b505b611b59838383611fb7565b6000610c7a826001611815565b611fc082611165565b15611fca57505050565b611fd3826110e4565b15611fe157611b598261201e565b611fea83610c6d565b15611ffa57611b598260016110f1565b612005836014611815565b806120145750612014836110e4565b15611b5957611b59835b600354600160a81b900460ff16156120665760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd08185b1b1bddd95960aa1b6044820152606401610cd0565b6114c48160006110f1565b803560ff81168114610fcf57600080fd5b60006020828403121561209457600080fd5b8135610c5281612683565b6000602082840312156120b157600080fd5b8151610c5281612683565b600080604083850312156120cf57600080fd5b82356120da81612683565b915060208301356120ea81612683565b809150509250929050565b60008060006060848603121561210a57600080fd5b833561211581612683565b9250602084013561212581612683565b929592945050506040919091013590565b6000806040838503121561214957600080fd5b823561215481612683565b946020939093013593505050565b6000806000806060858703121561217857600080fd5b843561218381612683565b935060208501359250604085013567ffffffffffffffff808211156121a757600080fd5b818701915087601f8301126121bb57600080fd5b8135818111156121ca57600080fd5b8860208285010111156121dc57600080fd5b95989497505060200194505050565b600080604083850312156121fe57600080fd5b823561220981612683565b915061221760208401612071565b90509250929050565b60008060006040848603121561223557600080fd5b833567ffffffffffffffff8082111561224d57600080fd5b818601915086601f83011261226157600080fd5b81358181111561227057600080fd5b8760208260051b850101111561228557600080fd5b60209283019550935061229b9186019050612071565b90509250925092565b6000602082840312156122b657600080fd5b8135610c5281612698565b6000602082840312156122d357600080fd5b8151610c5281612698565b6000806000606084860312156122f357600080fd5b8335925060208401359150604084013561230c81612683565b809150509250925092565b60006020828403121561232957600080fd5b815167ffffffffffffffff8082111561234157600080fd5b818401915084601f83011261235557600080fd5b8151818111156123675761236761266d565b604051601f8201601f19908116603f0116810190838211818310171561238f5761238f61266d565b816040528281528760208487010111156123a857600080fd5b6123b98360208301602088016125d5565b979650505050505050565b6000602082840312156123d657600080fd5b5035919050565b6000602082840312156123ef57600080fd5b5051919050565b6000815180845261240e8160208601602086016125d5565b601f01601f19169290920160200192915050565b600082516124348184602087016125d5565b692028577261707065642960b01b920191825250600a01919050565b600082516124628184602087016125d5565b632053484160e01b920191825250600401919050565b6000825161248a8184602087016125d5565b605360f81b920191825250600101919050565b6001600160a01b0385168152602081018490526060604082018190528101829052818360808301376000818301608090810191909152601f909201601f191601019392505050565b602081526000610c5260208301846123f6565b60408152600061250b60408301856123f6565b8281036020840152610e1981856123f6565b6020808252600990820152683737ba1037bbb732b960b91b604082015260600190565b6000821982111561255357612553612657565b500190565b600060ff821660ff84168060ff0382111561257557612575612657565b019392505050565b60008261259a57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156125b9576125b9612657565b500290565b6000828210156125d0576125d0612657565b500390565b60005b838110156125f05781810151838201526020016125d8565b83811115610f105750506000910152565b600181811c9082168061261557607f821691505b6020821081141561263657634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561265057612650612657565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146114c457600080fd5b80151581146114c457600080fdfea2646970667358221220085fb9135fa52aa81f5253be7ae87ab79c986d9616c5d6616b1ef99257a3ec5864736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See `IERC20.allowance`."
      },
      "approve(address,uint256)": {
        "details": "See `IERC20.approve`. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See `IERC20.balanceOf`."
      },
      "totalSupply()": {
        "details": "See `IERC20.totalSupply`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See `IERC20.transferFrom`. Emits an `Approval` event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of `ERC20`; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `value`. - the caller must have allowance for `sender`'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "Burns both the token itself as well as the wrapped token! If you want to get out of the shareholder agreement, use unwrap after it has been deactivated by a majority vote or acquisition. Burning only works if wrapped token supports burning. Also, the exact meaning of this operation might depend on the circumstances. Burning and reussing the wrapped token does not free the sender from the legal obligations of the shareholder agreement."
      },
      "canReceiveFromAnyone(address)": {
        "notice": "If true, this address is allowlisted and can only transfer tokens to other allowlisted addresses."
      },
      "getClaimDeleter()": {
        "notice": "Let the oracle act as deleter of invalid claims. In earlier versions, this was referring to the claim deleter of the wrapped token. But that stops working after a successful acquisition as the acquisition currency most likely does not have a claim deleter."
      },
      "getCollateralRate(address)": {
        "notice": "Returns the collateral rate for the given collateral type and 0 if that type of collateral is not accepted. By default, only the token itself is accepted at a rate of 1:1. Subclasses should override this method if they want to add additional types of collateral."
      },
      "isBinding()": {
        "notice": "Indicates that the token holders are bound to the token terms and that: - Conversions back to the wrapped token (unwrap) are not allowed - The drag-along can be performed by making an according offer - They can be migrated to a new version of this contract in accordance with the terms"
      },
      "isForbidden(address)": {
        "notice": "If true, this address can only transfer tokens to allowlisted addresses and not receive from anyone."
      },
      "isPowerlisted(address)": {
        "notice": "If true, this address can automatically allowlist target addresses if necessary."
      },
      "setApplicable(bool)": {
        "notice": "Configures whether the allowlisting is applied. Also sets the powerlist and allowlist flags on the null address accordingly. It is recommended to also deactivate the powerlist flag on other addresses."
      },
      "unwrap(uint256)": {
        "notice": "Decrease the number of drag-along tokens. The user gets back their shares in return "
      },
      "wrap(address,uint256)": {
        "notice": "Increases the number of drag-along tokens. Requires minter to deposit an equal amount of share tokens "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2444,
        "contract": "src/allowlist/AllowlistDraggableShares.sol:AllowlistDraggableShares",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2450,
        "contract": "src/allowlist/AllowlistDraggableShares.sol:AllowlistDraggableShares",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2452,
        "contract": "src/allowlist/AllowlistDraggableShares.sol:AllowlistDraggableShares",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2455,
        "contract": "src/allowlist/AllowlistDraggableShares.sol:AllowlistDraggableShares",
        "label": "decimals",
        "offset": 0,
        "slot": "3",
        "type": "t_uint8"
      },
      {
        "astId": 5292,
        "contract": "src/allowlist/AllowlistDraggableShares.sol:AllowlistDraggableShares",
        "label": "owner",
        "offset": 1,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6861,
        "contract": "src/allowlist/AllowlistDraggableShares.sol:AllowlistDraggableShares",
        "label": "restrictTransfers",
        "offset": 21,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 8804,
        "contract": "src/allowlist/AllowlistDraggableShares.sol:AllowlistDraggableShares",
        "label": "wrapped",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)3169"
      },
      {
        "astId": 8810,
        "contract": "src/allowlist/AllowlistDraggableShares.sol:AllowlistDraggableShares",
        "label": "unwrapConversionFactor",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 8813,
        "contract": "src/allowlist/AllowlistDraggableShares.sol:AllowlistDraggableShares",
        "label": "offer",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IOffer)9512"
      },
      {
        "astId": 8819,
        "contract": "src/allowlist/AllowlistDraggableShares.sol:AllowlistDraggableShares",
        "label": "oracle",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 7959,
        "contract": "src/allowlist/AllowlistDraggableShares.sol:AllowlistDraggableShares",
        "label": "customCollateralAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 7961,
        "contract": "src/allowlist/AllowlistDraggableShares.sol:AllowlistDraggableShares",
        "label": "customCollateralRate",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 6602,
        "contract": "src/allowlist/AllowlistDraggableShares.sol:AllowlistDraggableShares",
        "label": "terms",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)3169": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IOffer)9512": {
        "encoding": "inplace",
        "label": "contract IOffer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}