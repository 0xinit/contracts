{
  "address": "0x6BE5C95F114e5e470c10Ddfb5Df8C6BF3F429Ba9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "typeName",
          "type": "string"
        }
      ],
      "name": "OfferCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pricePerShare",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quorum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votePeriod",
          "type": "uint256"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pricePerShare",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quorum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votePeriod",
          "type": "uint256"
        }
      ],
      "name": "predict",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3e5e8fb747f55cfbba8176563d13f7d59e4885a279da383fb1a4ebcfc64bee74",
  "receipt": {
    "to": null,
    "from": "0x39E5351E6CE3c4B19B8b0a2F5C82c511782457BE",
    "contractAddress": "0x6BE5C95F114e5e470c10Ddfb5Df8C6BF3F429Ba9",
    "transactionIndex": 2,
    "gasUsed": "1733237",
    "logsBloom": "0x
    "blockHash": "0xb5f023a4e71f2045277bb10ea124591f2a716ff7d32966c597dd32b9804304a9",
    "transactionHash": "0x3e5e8fb747f55cfbba8176563d13f7d59e4885a279da383fb1a4ebcfc64bee74",
    "logs": [],
    "blockNumber": 11322129,
    "cumulativeGasUsed": "1912951",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1adf00d2401e9f71cd0c589dffe74075",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"typeName\",\"type\":\"string\"}],\"name\":\"OfferCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerShare\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votePeriod\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerShare\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votePeriod\",\"type\":\"uint256\"}],\"name\":\"predict\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/sha/OfferFactory.sol\":\"OfferFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/IERC20.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: MIT\\n*\\n* Copyright (c) 2016-2019 zOS Global Limited\\n*\\n*/\\npragma solidity >=0.8;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n\\n    // Optional functions\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    event NameChanged(string name, string symbol);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\",\"keccak256\":\"0x9219c4f204d62c35e41883261db400d200ccdcc1dd922122b763986f4741ff9a\",\"license\":\"MIT\"},\"src/sha/IDraggable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8;\\n\\nabstract contract IDraggable {\\n    \\n    function getOracle() public virtual returns (address);\\n    function drag(address buyer, address currency) public virtual;\\n    function notifyOfferEnded() public virtual;\\n    function votingPower(address voter) public virtual returns (uint256);\\n    function totalVotingTokens() public virtual view returns (uint256);\\n    function notifyVoted(address voter) public virtual;\\n\\n}\",\"keccak256\":\"0x7a21ed8714d105341e8e0928f3c466702240810c959ce5abf42173b3e19f78e1\",\"license\":\"MIT\"},\"src/sha/Offer.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2020 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity >=0.8;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"./IDraggable.sol\\\";\\n/**\\n * @title Acquisition Attempt\\n * @author Luzius Meisser, luzius@aktionariat.com\\n */\\n\\ncontract Offer {\\n\\n    uint256 public immutable quorum;                    // Percentage of votes needed to start drag-along process in BPS, i.e. 10'000 = 100%\\n\\n    IDraggable public immutable token;\\n    address public immutable buyer;                     // who made the offer\\n    \\n    IERC20 public immutable currency;\\n    uint256 public immutable price;                               // the price offered per share\\n\\n    enum Vote { NONE, YES, NO }                         // Used internally, represents not voted yet or yes/no vote.\\n    mapping (address => Vote) private votes;            // Who votes what\\n    uint256 public yesVotes;                            // total number of yes votes, including external votes\\n    uint256 public noVotes;                             // total number of no votes, including external votes\\n    uint256 public noExternal;                          // number of external no votes reported by oracle\\n    uint256 public yesExternal;                         // number of external yes votes reported by oracle\\n\\n    uint256 public immutable voteEnd;                             // end of vote period in block time (seconds after 1.1.1970)\\n\\n    event VotesChanged(uint256 newYesVotes, uint256 newNoVotes);\\n    event OfferCreated(address indexed buyer, address token, uint256 pricePerShare, address currency);\\n    event OfferEnded(address indexed buyer, bool success, string message);\\n\\n    // Not checked here, but buyer should make sure it is well funded from the beginning\\n    constructor(\\n        address _buyer,\\n        address _token,\\n        uint256 _price,\\n        address _currency,\\n        uint256 _quorum,\\n        uint256 votePeriod\\n        ) payable {\\n        buyer = _buyer;\\n        token = IDraggable(_token);\\n        currency = IERC20(_currency);\\n        price = _price;\\n        quorum = _quorum;\\n        voteEnd = block.timestamp + votePeriod;\\n        // License Fee to Aktionariat AG, also ensures that offer is serious.\\n        // Any circumvention of this license fee payment is a violation of the copyright terms.\\n        payable(0x29Fe8914e76da5cE2d90De98a64d0055f199d06D).transfer(3 ether);\\n        emit OfferCreated(_buyer, address(_token), _price, address(_currency));\\n    }\\n\\n    function makeCompetingOffer(address betterOffer) public {\\n        require(msg.sender == address(token));\\n        Offer better = Offer(betterOffer);\\n        require(!isAccepted(), \\\"old already accepted\\\");\\n        require(currency == better.currency() && better.price() > price, \\\"old offer better\\\");\\n        require(better.isWellFunded(), \\\"not funded\\\");\\n        kill(false, \\\"replaced\\\");\\n    }\\n\\n    function hasExpired() internal view returns (bool) {\\n        return block.timestamp > voteEnd + 30 days; // buyer has thirty days to complete acquisition after voting ends\\n    }\\n\\n    function contest() public {\\n        if (hasExpired()) {\\n            kill(false, \\\"expired\\\");\\n        } else if (isDeclined()) {\\n            kill(false, \\\"declined\\\");\\n        } else if (!isWellFunded()) {\\n            kill(false, \\\"lack of funds\\\");\\n        }\\n    }\\n\\n    function cancel() public {\\n        require(msg.sender == buyer);\\n        kill(false, \\\"cancelled\\\");\\n    }\\n\\n    function execute() public {\\n        require(msg.sender == buyer, \\\"not buyer\\\");\\n        require(isAccepted(), \\\"not accepted\\\");\\n        uint256 totalPrice = getTotalPrice();\\n        require(currency.transferFrom(buyer, address(token), totalPrice));\\n        token.drag(buyer, address(currency));\\n        kill(true, \\\"success\\\");\\n    }\\n\\n    function getTotalPrice() internal view returns (uint256) {\\n        IERC20 tok = IERC20(address(token));\\n        return (tok.totalSupply() - tok.balanceOf(buyer)) * price;\\n    }\\n\\n    function isWellFunded() public view returns (bool) {\\n        uint256 buyerBalance = currency.balanceOf(buyer);\\n        uint256 totalPrice = getTotalPrice();\\n        return totalPrice <= buyerBalance;\\n    }\\n\\n    function isAccepted() public view returns (bool) {\\n        if (isVotingOpen()) {\\n            // is it already clear that 75% will vote yes even though the vote is not over yet?\\n            return yesVotes * 10000  >= quorum * IDraggable(token).totalVotingTokens();\\n        } else {\\n            // did 75% of all cast votes say 'yes'?\\n            return yesVotes * 10000 >= quorum * (yesVotes + noVotes);\\n        }\\n    }\\n\\n    function isDeclined() public view returns (bool) {\\n        if (isVotingOpen()) {\\n            // is it already clear that 25% will vote no even though the vote is not over yet?\\n            uint256 supply = token.totalVotingTokens();\\n            return (supply - noVotes) * 10000 < quorum * supply;\\n        } else {\\n            // did quorum% of all cast votes say 'no'?\\n            return 10000 * yesVotes < quorum * (yesVotes + noVotes);\\n        }\\n    }\\n\\n    function notifyMoved(address from, address to, uint256 value) public {\\n        require(msg.sender == address(token));\\n        if (isVotingOpen()) {\\n            Vote fromVoting = votes[from];\\n            Vote toVoting = votes[to];\\n            update(fromVoting, toVoting, value);\\n        }\\n    }\\n\\n    function update(Vote previousVote, Vote newVote, uint256 votes_) internal {\\n        if (previousVote != newVote) {\\n            if (previousVote == Vote.NO) {\\n                noVotes = noVotes - votes_;\\n            } else if (previousVote == Vote.YES) {\\n                yesVotes = yesVotes - votes_;\\n            }\\n            if (newVote == Vote.NO) {\\n                noVotes = noVotes + votes_;\\n            } else if (newVote == Vote.YES) {\\n                yesVotes = yesVotes + votes_;\\n            }\\n            emit VotesChanged(yesVotes, noVotes);\\n        }\\n    }\\n\\n    function isVotingOpen() public view returns (bool) {\\n        return block.timestamp <= voteEnd;\\n    }\\n\\n    modifier votingOpen() {\\n        require(isVotingOpen(), \\\"vote ended\\\");\\n        _;\\n    }\\n\\n    /**\\n     * Function to allow the oracle to report the votes of external votes (e.g. shares tokenized on other blockchains).\\n     * This functions is idempotent and sets the number of external yes and no votes. So when more votes come in, the\\n     * oracle should always report the total number of yes and no votes. Abstentions are not counted.\\n     */\\n    function reportExternalVotes(uint256 yes, uint256 no) public {\\n        require(msg.sender == token.getOracle(), \\\"not oracle\\\");\\n        require(yes + no + IERC20(address(token)).totalSupply() <= token.totalVotingTokens(), \\\"too many votes\\\");\\n        // adjust total votes taking into account that the oralce might have reported different counts before\\n        yesVotes = yesVotes - yesExternal + yes;\\n        noVotes = noVotes - noExternal + no;\\n        // remember how the oracle voted in case the oracle later reports updated numbers\\n        yesExternal = yes;\\n        noExternal = no;\\n    }\\n\\n    function voteYes() public {\\n        vote(Vote.YES);\\n    }\\n\\n    function voteNo() public { \\n        vote(Vote.NO);\\n    }\\n\\n    function vote(Vote newVote) internal votingOpen() {\\n        Vote previousVote = votes[msg.sender];\\n        votes[msg.sender] = newVote;\\n        if(previousVote == Vote.NONE){\\n            IDraggable(token).notifyVoted(msg.sender);\\n        }\\n        update(previousVote, newVote, IDraggable(token).votingPower(msg.sender));\\n    }\\n\\n    function hasVotedYes(address voter) public view returns (bool) {\\n        return votes[voter] == Vote.YES;\\n    }\\n\\n    function hasVotedNo(address voter) public view returns (bool) {\\n        return votes[voter] == Vote.NO;\\n    }\\n\\n    function kill(bool success, string memory message) internal {\\n        IDraggable(token).notifyOfferEnded();\\n        emit OfferEnded(buyer, success, message);\\n        selfdestruct(payable(buyer));\\n    }\\n\\n}\",\"keccak256\":\"0xa49f6a1a219ec980535d6f14e5cdb6f41fd42584e1bc2e351de91cd8120e2b24\",\"license\":\"LicenseRef-Aktionariat\"},\"src/sha/OfferFactory.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2020 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity >=0.8;\\n\\nimport \\\"./Offer.sol\\\";\\n\\ncontract OfferFactory {\\n    \\n    event OfferCreated(address contractAddress, string typeName);\\n\\n    // It must be possible to predict the address of the offer so one can pre-fund the allowance.\\n    function predict(bytes32 salt, address buyer, address token, uint256 pricePerShare, address currency, uint256 quorum, uint256 votePeriod) public view returns (address) {\\n        bytes32 initCodeHash = keccak256(abi.encodePacked(type(Offer).creationCode, abi.encode(buyer, token, pricePerShare, currency, quorum, votePeriod)));\\n        bytes32 hashResult = keccak256(abi.encodePacked(bytes1(0xff), address(this), salt, initCodeHash));\\n        return address(uint160(uint256(hashResult)));\\n    }\\n\\n    // Do not call directly, msg.sender must be the token to be acquired\\n    function create(bytes32 salt, address buyer, uint256 pricePerShare, address currency, uint256 quorum, uint256 votePeriod) public payable returns (address) {\\n        Offer offer = new Offer{value: msg.value, salt: salt}(buyer, msg.sender, pricePerShare, currency, quorum, votePeriod);\\n        return address(offer);\\n    }\\n}\",\"keccak256\":\"0x6159a170f3a3eb955c92c954877e9dcd9389bb9b5b7b7c2dfa813c94ab4fe2e5\",\"license\":\"LicenseRef-Aktionariat\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611eaf806100206000396000f3fe6080604052600436106100295760003560e01c80634dc5e4311461002e578063a80104301461005d575b600080fd5b61004161003c366004610235565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b34801561006957600080fd5b506100416100783660046101cb565b6100d1565b600080348890883389898989604051610095906101a2565b6100a4969594939291906102e5565b82906040518091039083f5915050801580156100c4573d6000803e3d6000fd5b5098975050505050505050565b600080604051806020016100e4906101a2565b601f1982820381018352601f909101166040819052610111908a908a908a908a908a908a906020016102e5565b60408051601f198184030181529082905261012f92916020016102c8565b60408051601f1981840301815282825280516020918201206001600160f81b0319828501523060601b6bffffffffffffffffffffffff19166021850152603584019c909c5260558084019c909c528151808403909c018c5260759092019052895199019890982098975050505050505050565b611b5a8061032083390190565b80356001600160a01b03811681146101c657600080fd5b919050565b600080600080600080600060e0888a0312156101e657600080fd5b873596506101f6602089016101af565b9550610204604089016101af565b945060608801359350610219608089016101af565b925060a0880135915060c0880135905092959891949750929550565b60008060008060008060c0878903121561024e57600080fd5b8635955061025e602088016101af565b945060408701359350610273606088016101af565b92506080870135915060a087013590509295509295509295565b6000815160005b818110156102ae5760208185018101518683015201610294565b818111156102bd576000828601525b509290920192915050565b60006102dd6102d7838661028d565b8461028d565b949350505050565b6001600160a01b0396871681529486166020860152604085019390935293166060830152608082019290925260a081019190915260c0019056fe61014060405260405162001b5a38038062001b5a833981016040819052620000279162000122565b6001600160601b0319606087811b821660c05286811b821660a05284901b1660e052610100849052608082905262000060814262000188565b610120526040517329fe8914e76da5ce2d90de98a64d0055f199d06d906000906729a2241af62c00009082818181858883f19350505050158015620000a9573d6000803e3d6000fd5b50604080516001600160a01b03878116825260208201879052858116828401529151918816917f4f05be72ad7f57c27e555ace8452f56d8b1e82c9e6e1cd4fd282f34518b7729a9181900360600190a2505050505050620001af565b80516001600160a01b03811681146200011d57600080fd5b919050565b60008060008060008060c087890312156200013c57600080fd5b620001478762000105565b9550620001576020880162000105565b9450604087015193506200016e6060880162000105565b92506080870151915060a087015190509295509295509295565b60008219821115620001aa57634e487b7160e01b600052601160045260246000fd5b500190565b60805160a05160601c60c05160601c60e05160601c61010051610120516118566200030460003960008181610298015281816103190152818161048e0152818161084901528181610c6f01528181611225015261162401526000818161025501528181610f0d015261111b0152600081816102da015281816103b4015281816106bb015281816107810152610edb0152600081816101f3015281816103870152818161059f015281816106610152818161075901528181610d87015281816110ce0152818161146401526114c701526000818161034e015281816104b501528181610689015281816107a9015281816108720152818161099e01528181610a7e01528181610b0f01528181610c4301528181610de8015281816110f9015281816112e40152818161136e01526113f101526000818161017e0152818161054a01528181610909015261096301526118566000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c8063a035b1fe116100c3578063e5a6b10f1161007c578063e5a6b10f146102d5578063ea8a1af0146102fc578063f6c8c41e14610304578063fa7f1bae14610317578063fb286c6514610340578063fc0c546a1461034957600080fd5b8063a035b1fe14610250578063b5b47f4214610277578063bd3bc1d314610280578063ddbe8f0914610293578063e1a1810f146102ba578063e3ac83da146102cd57600080fd5b80635051a5ec116101155780635051a5ec146101de57806361461954146101e65780637150d8ae146101ee5780638f1b4c6f1461022d57806390cf581c146102405780639b4e88aa1461024857600080fd5b806311a439a01461015d5780631703a01814610179578063354e5629146101a05780633f5e3e7f146101a957806341c12a70146101c1578063448ab4c6146101cb575b600080fd5b61016660045481565b6040519081526020015b60405180910390f35b6101667f000000000000000000000000000000000000000000000000000000000000000081565b61016660035481565b6101b1610370565b6040519015158152602001610170565b6101c9610445565b005b6101b16101d9366004611653565b610451565b6101b161048a565b6101c9610594565b6102157f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610170565b6101b161023b366004611653565b610832565b6101c961083b565b6101b1610845565b6101667f000000000000000000000000000000000000000000000000000000000000000081565b61016660025481565b6101c961028e366004611710565b61099c565b6101667f000000000000000000000000000000000000000000000000000000000000000081565b6101c96102c8366004611694565b610c38565b6101c9610cd1565b6102157f000000000000000000000000000000000000000000000000000000000000000081565b6101c9610d7c565b6101c9610312366004611653565b610ddd565b7f00000000000000000000000000000000000000000000000000000000000000004211156101b1565b61016660015481565b6102157f000000000000000000000000000000000000000000000000000000000000000081565b6040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156103f657600080fd5b505afa15801561040a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042e91906116f7565b9050600061043a6110b7565b919091111592915050565b61044f6002611223565b565b600060015b6001600160a01b03831660009081526020819052604090205460ff166002811115610483576104836117f5565b1492915050565b60007f00000000000000000000000000000000000000000000000000000000000000004211610584577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630a81b2de6040518163ffffffff1660e01b815260040160206040518083038186803b15801561050c57600080fd5b505afa158015610520573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054491906116f7565b61056e907f00000000000000000000000000000000000000000000000000000000000000006117a9565b60015461057d906127106117a9565b1015905090565b6002546001546105449190611791565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105fd5760405162461bcd60e51b81526020600482015260096024820152683737ba10313abcb2b960b91b60448201526064015b60405180910390fd5b61060561048a565b6106405760405162461bcd60e51b815260206004820152600c60248201526b1b9bdd081858d8d95c1d195960a21b60448201526064016105f4565b600061064a6110b7565b6040516323b872dd60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f000000000000000000000000000000000000000000000000000000000000000081166024830152604482018390529192507f0000000000000000000000000000000000000000000000000000000000000000909116906323b872dd90606401602060405180830381600087803b15801561070157600080fd5b505af1158015610715573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073991906116d5565b61074257600080fd5b604051637e5bcd3f60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063fcb79a7e90604401600060405180830381600087803b1580156107ed57600080fd5b505af1158015610801573d6000803e3d6000fd5b5050505061082f6001604051806040016040528060078152602001667375636365737360c81b8152506113ef565b50565b60006002610456565b61044f6001611223565b60007f0000000000000000000000000000000000000000000000000000000000000000421161094d5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630a81b2de6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108c957600080fd5b505afa1580156108dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090191906116f7565b905061092d817f00000000000000000000000000000000000000000000000000000000000000006117a9565b60025461093a90836117c8565b610946906127106117a9565b1091505090565b60025460015461095d9190611791565b610987907f00000000000000000000000000000000000000000000000000000000000000006117a9565b600154610996906127106117a9565b10905090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663833b1fce6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156109f757600080fd5b505af1158015610a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2f9190611677565b6001600160a01b0316336001600160a01b031614610a7c5760405162461bcd60e51b815260206004820152600a6024820152696e6f74206f7261636c6560b01b60448201526064016105f4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630a81b2de6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ad557600080fd5b505afa158015610ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0d91906116f7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b6657600080fd5b505afa158015610b7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9e91906116f7565b610ba88385611791565b610bb29190611791565b1115610bf15760405162461bcd60e51b815260206004820152600e60248201526d746f6f206d616e7920766f74657360901b60448201526064016105f4565b81600454600154610c0291906117c8565b610c0c9190611791565b6001556003546002548291610c20916117c8565b610c2a9190611791565b600255600491909155600355565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c6d57600080fd5b7f00000000000000000000000000000000000000000000000000000000000000004211610ccc576001600160a01b0380841660009081526020819052604080822054928516825290205460ff9182169116610cc98282856114f1565b50505b505050565b610cd961161d565b15610d085761044f600060405180604001604052806007815260200166195e1c1a5c995960ca1b8152506113ef565b610d10610845565b15610d405761044f600060405180604001604052806008815260200167191958db1a5b995960c21b8152506113ef565b610d48610370565b61044f5761044f60006040518060400160405280600d81526020016c6c61636b206f662066756e647360981b8152506113ef565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610db157600080fd5b61044f60006040518060400160405280600981526020016818d85b98d95b1b195960ba1b8152506113ef565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e1257600080fd5b80610e1b61048a565b15610e5f5760405162461bcd60e51b81526020600482015260146024820152731bdb1908185b1c9958591e481858d8d95c1d195960621b60448201526064016105f4565b806001600160a01b031663e5a6b10f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e9857600080fd5b505afa158015610eac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed09190611677565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316148015610f9f57507f0000000000000000000000000000000000000000000000000000000000000000816001600160a01b031663a035b1fe6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f6557600080fd5b505afa158015610f79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9d91906116f7565b115b610fde5760405162461bcd60e51b815260206004820152601060248201526f37b6321037b33332b9103132ba3a32b960811b60448201526064016105f4565b806001600160a01b0316633f5e3e7f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561101757600080fd5b505afa15801561102b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104f91906116d5565b6110885760405162461bcd60e51b815260206004820152600a6024820152691b9bdd08199d5b99195960b21b60448201526064016105f4565b6110b36000604051806040016040528060088152602001671c995c1b1858d95960c21b8152506113ef565b5050565b6040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000917f000000000000000000000000000000000000000000000000000000000000000091908316906370a082319060240160206040518083038186803b15801561116057600080fd5b505afa158015611174573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119891906116f7565b826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111d157600080fd5b505afa1580156111e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120991906116f7565b61121391906117c8565b61121d91906117a9565b91505090565b7f00000000000000000000000000000000000000000000000000000000000000004211156112805760405162461bcd60e51b815260206004820152600a6024820152691d9bdd1948195b99195960b21b60448201526064016105f4565b336000908152602081905260409020805460ff811691839160ff191660018360028111156112b0576112b06117f5565b021790555060008160028111156112c9576112c96117f5565b1415611349576040516345c8a62b60e01b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906345c8a62b90602401600060405180830381600087803b15801561133057600080fd5b505af1158015611344573d6000803e3d6000fd5b505050505b60405163603a39fb60e11b81523360048201526110b390829084906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c07473f690602401602060405180830381600087803b1580156113b257600080fd5b505af11580156113c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ea91906116f7565b6114f1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166332bc320b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561144a57600080fd5b505af115801561145e573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167fba01adb1638f647e6baa43cb5d8d3a05ed7e59ac18415bf4c64adba235c5b2b083836040516114bd929190611732565b60405180910390a27f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316ff5b816002811115611503576115036117f5565b836002811115611515576115156117f5565b14610ccc57600283600281111561152e5761152e6117f5565b141561154a578060025461154291906117c8565b600255611576565b600183600281111561155e5761155e6117f5565b1415611576578060015461157291906117c8565b6001555b600282600281111561158a5761158a6117f5565b14156115a6578060025461159e9190611791565b6002556115d2565b60018260028111156115ba576115ba6117f5565b14156115d257806001546115ce9190611791565b6001555b7f8fcc50c2c4edd06d51ae66e9e21ed76b32a1766c57f491788e1aa24a1b58c256600154600254604051611610929190918252602082015260400190565b60405180910390a1505050565b600061164c7f000000000000000000000000000000000000000000000000000000000000000062278d00611791565b4211905090565b60006020828403121561166557600080fd5b81356116708161180b565b9392505050565b60006020828403121561168957600080fd5b81516116708161180b565b6000806000606084860312156116a957600080fd5b83356116b48161180b565b925060208401356116c48161180b565b929592945050506040919091013590565b6000602082840312156116e757600080fd5b8151801515811461167057600080fd5b60006020828403121561170957600080fd5b5051919050565b6000806040838503121561172357600080fd5b50508035926020909101359150565b821515815260006020604081840152835180604085015260005b818110156117685785810183015185820160600152820161174c565b8181111561177a576000606083870101525b50601f01601f191692909201606001949350505050565b600082198211156117a4576117a46117df565b500190565b60008160001904831182151516156117c3576117c36117df565b500290565b6000828210156117da576117da6117df565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b6001600160a01b038116811461082f57600080fdfea2646970667358221220f6368d49f6268667eb225e884ae0eaca3a6eea36dd39b3c8ba59b012dbddb00364736f6c63430008070033a2646970667358221220b0602fc26a7a1d6ca2e6462d070e9c6d80aae3c53ad9c817280a953adc331e9b64736f6c63430008070033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}