{
  "address": "0x331e15Ea9304c2B2A1A8f9f3d56047a8895DeCb0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "contract DraggableTokenFactory",
          "name": "_draggableFactory",
          "type": "address"
        },
        {
          "internalType": "contract AllowlistDraggableFactory",
          "name": "_allowlistDraggableFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Ownable_NotOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract AllowlistDraggableFactory",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "AllowlistDraggableFactoryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20Permit",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allowlist",
          "type": "bool"
        }
      ],
      "name": "BaseTokenCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20Permit",
          "name": "draggable",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20Permit",
          "name": "baseToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allowlist",
          "type": "bool"
        }
      ],
      "name": "DraggableTokenCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract DraggableTokenFactory",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "DraggableTokenFactoryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "FactoryManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "allowlistDraggableFactory",
      "outputs": [
        {
          "internalType": "contract AllowlistDraggableFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "terms",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "allowlist",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "draggable",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "numberOfShares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quorumDrag",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quorumMigration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votePeriod",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenConfig",
          "name": "tokenConfig",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "salt",
          "type": "string"
        }
      ],
      "name": "createToken",
      "outputs": [
        {
          "internalType": "contract IERC20Permit",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "draggableFactory",
      "outputs": [
        {
          "internalType": "contract DraggableTokenFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllDraggableShares",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllShares",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "contract FactoryManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AllowlistDraggableFactory",
          "name": "_allowlistDraggableFactory",
          "type": "address"
        }
      ],
      "name": "setAllowlistDraggableFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract DraggableTokenFactory",
          "name": "_draggableFactory",
          "type": "address"
        }
      ],
      "name": "setDraggableTokenFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract FactoryManager",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x255224826fe3e816490c2e9b6604a716fad1bd53b3c792d12156b9f5a711399b",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x39E5351E6CE3c4B19B8b0a2F5C82c511782457BE",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "5248406",
    "logsBloom": "0x
    "blockHash": "0x32b21caf316b4cf82d9e0976ec85153fb53bd2ed785654ce062ae59ea5a7e91f",
    "transactionHash": "0x255224826fe3e816490c2e9b6604a716fad1bd53b3c792d12156b9f5a711399b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 20318279,
        "transactionHash": "0x255224826fe3e816490c2e9b6604a716fad1bd53b3c792d12156b9f5a711399b",
        "address": "0x331e15Ea9304c2B2A1A8f9f3d56047a8895DeCb0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000039e5351e6ce3c4b19b8b0a2f5c82c511782457be"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x32b21caf316b4cf82d9e0976ec85153fb53bd2ed785654ce062ae59ea5a7e91f"
      }
    ],
    "blockNumber": 20318279,
    "cumulativeGasUsed": "5248406",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x39E5351E6CE3c4B19B8b0a2F5C82c511782457BE",
    "0x312E5D57c05604726107369D9AA9a6e00836DF59",
    "0x8fb463D5a601b02Ce3Fb4B93253a10fe6f9105A3"
  ],
  "numDeployments": 2,
  "solcInputHash": "84fcf43a3cf19c826709a737ca49661c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract DraggableTokenFactory\",\"name\":\"_draggableFactory\",\"type\":\"address\"},{\"internalType\":\"contract AllowlistDraggableFactory\",\"name\":\"_allowlistDraggableFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Ownable_NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract AllowlistDraggableFactory\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"AllowlistDraggableFactoryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20Permit\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowlist\",\"type\":\"bool\"}],\"name\":\"BaseTokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20Permit\",\"name\":\"draggable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20Permit\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowlist\",\"type\":\"bool\"}],\"name\":\"DraggableTokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract DraggableTokenFactory\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"DraggableTokenFactoryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"FactoryManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allowlistDraggableFactory\",\"outputs\":[{\"internalType\":\"contract AllowlistDraggableFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"terms\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"allowlist\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"draggable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numberOfShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorumDrag\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorumMigration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votePeriod\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenConfig\",\"name\":\"tokenConfig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"salt\",\"type\":\"string\"}],\"name\":\"createToken\",\"outputs\":[{\"internalType\":\"contract IERC20Permit\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"draggableFactory\",\"outputs\":[{\"internalType\":\"contract DraggableTokenFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllDraggableShares\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllShares\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract FactoryManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AllowlistDraggableFactory\",\"name\":\"_allowlistDraggableFactory\",\"type\":\"address\"}],\"name\":\"setAllowlistDraggableFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract DraggableTokenFactory\",\"name\":\"_draggableFactory\",\"type\":\"address\"}],\"name\":\"setDraggableTokenFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FactoryManager\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"rube \",\"details\":\"Factory to deploy shares contracts\",\"events\":{\"AllowlistDraggableFactoryUpdated(address)\":{\"params\":{\"factory\":\"The new allowlist draggable token factory\"}},\"BaseTokenCreated(address,address,bool)\":{\"params\":{\"allowlist\":\"Indicates if the token has an allowlist\",\"owner\":\"The owner of the token\",\"token\":\"The created token\"}},\"DraggableTokenCreated(address,address,address,bool)\":{\"params\":{\"allowlist\":\"Indicates if the token has an allowlist\",\"baseToken\":\"The base token associated with the draggable token\",\"draggable\":\"The created draggable token\",\"owner\":\"The owner of the draggable token\"}},\"DraggableTokenFactoryUpdated(address)\":{\"params\":{\"factory\":\"The new draggable token factory\"}},\"FactoryManagerUpdated(address)\":{\"params\":{\"manager\":\"The new factory manager\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_allowlistDraggableFactory\":\"The address of the allowlist draggable token factory\",\"_draggableFactory\":\"The address of the draggable token factory\",\"_owner\":\"The address of the contract owner\"}},\"createToken((string,string,string,bool,bool,uint256,uint256,uint256,uint256),address,string)\":{\"params\":{\"tokenConfig\":\"Configuration of the token to be created\",\"tokenOwner\":\"The owner of the new token\"},\"returns\":{\"_0\":\"The address of the created token\"}},\"getAllDraggableShares()\":{\"returns\":{\"_0\":\"An array of addresses of created draggable share tokens\"}},\"getAllShares()\":{\"returns\":{\"_0\":\"An array of addresses of created share tokens\"}},\"setAllowlistDraggableFactory(address)\":{\"params\":{\"_allowlistDraggableFactory\":\"The new allowlist draggable token factory\"}},\"setDraggableTokenFactory(address)\":{\"params\":{\"_draggableFactory\":\"The new draggable token factory\"}},\"setManager(address)\":{\"params\":{\"_manager\":\"The new factory manager\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_draggableSet\":{\"details\":\"Set of addresses for created draggable tokens\"},\"_sharesSet\":{\"details\":\"Set of addresses for created share tokens\"}},\"title\":\"TokenFactory\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidOwner()\":[{\"notice\":\"Error for invalid owner address\"}]},\"events\":{\"AllowlistDraggableFactoryUpdated(address)\":{\"notice\":\"Emitted when the allowlist draggable token factory is updated\"},\"BaseTokenCreated(address,address,bool)\":{\"notice\":\"Emitted when a base token is created\"},\"DraggableTokenCreated(address,address,address,bool)\":{\"notice\":\"Emitted when a draggable token is created\"},\"DraggableTokenFactoryUpdated(address)\":{\"notice\":\"Emitted when the draggable token factory is updated\"},\"FactoryManagerUpdated(address)\":{\"notice\":\"Emitted when the factory manager is updated\"}},\"kind\":\"user\",\"methods\":{\"allowlistDraggableFactory()\":{\"notice\":\"Allowlist draggable token factory contract\"},\"constructor\":{\"notice\":\"Constructor for TokenFactory\"},\"createToken((string,string,string,bool,bool,uint256,uint256,uint256,uint256),address,string)\":{\"notice\":\"Creates a new token\"},\"draggableFactory()\":{\"notice\":\"Draggable token factory contract\"},\"getAllDraggableShares()\":{\"notice\":\"Gets all created draggable share tokens\"},\"getAllShares()\":{\"notice\":\"Gets all created share tokens\"},\"manager()\":{\"notice\":\"Factory manager contract\"},\"setAllowlistDraggableFactory(address)\":{\"notice\":\"Sets the allowlist draggable token factory\"},\"setDraggableTokenFactory(address)\":{\"notice\":\"Sets the draggable token factory\"},\"setManager(address)\":{\"notice\":\"Sets the factory manager\"}},\"notice\":\"This contract allows the creation of share tokens with optional draggable functionality and allowlist features.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/utils/factory/TokenFactory.sol\":\"TokenFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"src/ERC20/ERC20Allowlistable.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"./ERC20Flaggable.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\n\\n/**\\n * A very flexible and efficient form to subject ERC-20 tokens to an allowlisting.\\n * See ../../doc/allowlist.md for more information.\\n */\\nabstract contract ERC20Allowlistable is ERC20Flaggable, Ownable {\\n\\n  uint8 private constant TYPE_DEFAULT = 0x0;\\n  uint8 private constant TYPE_ALLOWLISTED = 0x1;\\n  uint8 private constant TYPE_FORBIDDEN = 0x2;\\n  uint8 private constant TYPE_POWERLISTED = 0x4;\\n  // I think TYPE_POWERLISTED should have been 0x3. :) But MOP was deployed like this so we keep it. Does not hurt.\\n\\n  uint8 private constant FLAG_INDEX_ALLOWLIST = 20;\\n  uint8 private constant FLAG_INDEX_FORBIDDEN = 21;\\n  uint8 private constant FLAG_INDEX_POWERLIST = 22;\\n\\n  event AddressTypeUpdate(address indexed account, uint8 addressType);\\n\\n  /// Receiver has flag forbidden.\\n  /// @param receiver the address of the forbidden receiver.\\n  error Allowlist_ReceiverIsForbidden(address receiver);\\n  /// Sender has flag forbidden.\\n  /// @param sender the address of the forbidden sender.\\n  error Allowlist_SenderIsForbidden(address sender);\\n  /// Receiver has no allowlist flag.\\n  /// @param receiver the address which isn't allowlisted.\\n  error Allowlist_ReceiverNotAllowlisted(address receiver);\\n\\n  bool public restrictTransfers;\\n\\n  constructor(){\\n    setApplicableInternal(true);\\n  }\\n\\n  /**\\n   * Configures whether the allowlisting is applied.\\n   * Also sets the powerlist and allowlist flags on the null address accordingly.\\n   * It is recommended to also deactivate the powerlist flag on other addresses.\\n   */\\n  function setApplicable(bool transferRestrictionsApplicable) external onlyOwner {\\n    setApplicableInternal(transferRestrictionsApplicable);\\n  }\\n\\n  function setApplicableInternal(bool transferRestrictionsApplicable) internal {\\n    restrictTransfers = transferRestrictionsApplicable;\\n    // if transfer restrictions are applied, we guess that should also be the case for newly minted tokens\\n    // if the admin disagrees, it is still possible to change the type of the null address\\n    if (transferRestrictionsApplicable){\\n      setTypeInternal(address(0x0), TYPE_POWERLISTED);\\n    } else {\\n      setTypeInternal(address(0x0), TYPE_DEFAULT);\\n    }\\n  }\\n\\n  function setType(address account, uint8 typeNumber) public onlyOwner {\\n    setTypeInternal(account, typeNumber);\\n  }\\n\\n  /**\\n   * If TYPE_DEFAULT all flags are set to 0\\n   */\\n  function setTypeInternal(address account, uint8 typeNumber) internal {\\n    setFlag(account, FLAG_INDEX_ALLOWLIST, typeNumber == TYPE_ALLOWLISTED);\\n    setFlag(account, FLAG_INDEX_FORBIDDEN, typeNumber == TYPE_FORBIDDEN);\\n    setFlag(account, FLAG_INDEX_POWERLIST, typeNumber == TYPE_POWERLISTED);\\n    emit AddressTypeUpdate(account, typeNumber);\\n  }\\n\\n  function setType(address[] calldata addressesToAdd, uint8 value) public onlyOwner {\\n    for (uint i=0; i<addressesToAdd.length; i++){\\n      setType(addressesToAdd[i], value);\\n    }\\n  }\\n\\n  /**\\n   * If true, this address is allowlisted and can only transfer tokens to other allowlisted addresses.\\n   */\\n  function canReceiveFromAnyone(address account) public view returns (bool) {\\n    return hasFlagInternal(account, FLAG_INDEX_ALLOWLIST) || hasFlagInternal(account, FLAG_INDEX_POWERLIST);\\n  }\\n\\n  /**\\n   * If true, this address can only transfer tokens to allowlisted addresses and not receive from anyone.\\n   */\\n  function isForbidden(address account) public view returns (bool){\\n    return hasFlagInternal(account, FLAG_INDEX_FORBIDDEN);\\n  }\\n\\n  /**\\n   * If true, this address can automatically allowlist target addresses if necessary.\\n   */\\n  function isPowerlisted(address account) public view returns (bool) {\\n    return hasFlagInternal(account, FLAG_INDEX_POWERLIST);\\n  }\\n\\n  function _beforeTokenTransfer(address from, address to, uint256 amount) override virtual internal {\\n    super._beforeTokenTransfer(from, to, amount);\\n    // empty block for gas saving fall through\\n    // solhint-disable-next-line no-empty-blocks\\n    if (canReceiveFromAnyone(to)){\\n      // ok, transfers to allowlisted addresses are always allowed\\n    } else if (isForbidden(to)){\\n      // Target is forbidden, but maybe restrictions have been removed and we can clean the flag\\n      if (restrictTransfers) {\\n        revert Allowlist_ReceiverIsForbidden(to);\\n      }\\n      setFlag(to, FLAG_INDEX_FORBIDDEN, false);\\n    } else {\\n      if (isPowerlisted(from)){\\n        // it is not allowlisted, but we can make it so\\n        // we know the recipient is neither forbidden, allowlisted or powerlisted, so we can set flag directly\\n        setFlag(to, FLAG_INDEX_ALLOWLIST, true);\\n        emit AddressTypeUpdate(to, TYPE_ALLOWLISTED);\\n      }\\n      // if we made it to here, the target must be a free address and we are not powerlisted\\n      else if (hasFlagInternal(from, FLAG_INDEX_ALLOWLIST)){\\n        // We cannot send to free addresses, but maybe the restrictions have been removed and we can clean the flag?\\n        if (restrictTransfers) {\\n          revert Allowlist_ReceiverNotAllowlisted(to);\\n        }\\n        setFlag(from, FLAG_INDEX_ALLOWLIST, false);\\n      } else if (isForbidden(from)){\\n        if (restrictTransfers) {\\n          revert Allowlist_SenderIsForbidden(from);\\n        }\\n        setFlag(from, FLAG_INDEX_FORBIDDEN, false);\\n      }\\n    }\\n  }\\n\\n}\\n\",\"keccak256\":\"0xfbc2956ca01b3653efbe04842d3dbbe4b4d033e8e71f0173a35eacbe21768011\",\"license\":\"LicenseRef-Aktionariat\"},\"src/ERC20/ERC20Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n/// @title Standard ERC20 Errors\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n///  https://eips.ethereum.org/EIPS/eip-6093\\ninterface ERC20Errors {\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n    error ERC20InvalidSender(address sender);\\n    error ERC20InvalidReceiver(address receiver);\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n    error ERC20InvalidApprover(address approver);\\n    error ERC20InvalidSpender(address spender);\\n}\",\"keccak256\":\"0x16e67c149b323aa08a12378b1697305e12dd48a9997549d56f140e26317e6c14\",\"license\":\"MIT\"},\"src/ERC20/ERC20Flaggable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied and adjusted from OpenZeppelin\\n// Adjustments:\\n// - modifications to support ERC-677\\n// - removed unnecessary require statements\\n// - removed GSN Context\\n// - upgraded to 0.8 to drop SafeMath\\n// - let name() and symbol() be implemented by subclass\\n// - infinite allowance support, with 2^255 and above considered infinite\\n// - use upper 32 bits of balance for flags\\n// - add a global settings variable\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./ERC20Errors.sol\\\";\\nimport \\\"./IERC677Receiver.sol\\\";\\n/**\\n * @dev Implementation of the `IERC20` interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using `_mint`.\\n * For a generic mechanism see `ERC20Mintable`.\\n *\\n * *For a detailed writeup see our guide [How to implement supply\\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See `IERC20.approve`.\\n */\\n\\nabstract contract ERC20Flaggable is IERC20, ERC20Errors {\\n\\n    // as Documented in /doc/infiniteallowance.md\\n    // 0x8000000000000000000000000000000000000000000000000000000000000000\\n    uint256 constant private INFINITE_ALLOWANCE = 2**255;\\n\\n    uint256 private constant FLAGGING_MASK = 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000;\\n\\n    // Documentation of flags used by subclasses:\\n    // NOTE: flags denote the bit number that is being used and must be smaller than 32\\n    // ERC20Draggable: uint8 private constant FLAG_INDEX_VOTED = 1;\\n    // ERC20Recoverable: uint8 private constant FLAG_INDEX_CLAIM_PRESENT = 10;\\n    // ERCAllowlistable: uint8 private constant FLAG_INDEX_ALLOWLIST = 20;\\n    // ERCAllowlistable: uint8 private constant FLAG_INDEX_FORBIDDEN = 21;\\n    // ERCAllowlistable: uint8 private constant FLAG_INDEX_POWERLIST = 22;\\n\\n    mapping (address => uint256) private _balances; // upper 32 bits reserved for flags\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    uint8 public override decimals;\\n\\n    event NameChanged(string name, string symbol);\\n\\n    /// Overflow on minting, transfer. \\n    /// @param receiver The address were the balance overflows. \\n    /// @param balance The current balance of the receiver. \\n    /// @param amount The amount added, which result in the overflow. \\n    error ERC20BalanceOverflow(address receiver, uint256 balance, uint256 amount);\\n\\n    constructor(uint8 _decimals) {\\n        decimals = _decimals;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.totalSupply`.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.balanceOf`.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return uint224 (_balances [account]);\\n    }\\n\\n    function hasFlag(address account, uint8 number) external view returns (bool) {\\n        return hasFlagInternal(account, number);\\n    }\\n\\n    function setFlag(address account, uint8 index, bool value) internal {\\n        uint256 flagMask = 1 << (index + 224);\\n        uint256 balance = _balances [account];\\n        if ((balance & flagMask == flagMask) != value) {\\n            _balances [account] = balance ^ flagMask;\\n        }\\n    }\\n\\n    function hasFlagInternal(address account, uint8 number) internal view returns (bool) {\\n        uint256 flag = 0x1 << (number + 224);\\n        return _balances[account] & flag == flag;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.transfer`.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.allowance`.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See `IERC20.approve`.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) external override returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.transferFrom`.\\n     *\\n     * Emits an `Approval` event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of `ERC20`;\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `value`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        uint256 currentAllowance = allowance(sender, msg.sender);\\n        if (currentAllowance < INFINITE_ALLOWANCE){\\n            // Only decrease the allowance if it was not set to 'infinite'\\n            // Documented in /doc/infiniteallowance.md\\n            _allowances[sender][msg.sender] = currentAllowance - amount;\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to `transfer`, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a `Transfer` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(sender, recipient, amount);\\n        decreaseBalance(sender, amount);\\n        increaseBalance(recipient, amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    // ERC-677 functionality, can be useful for swapping and wrapping tokens\\n    function transferAndCall(address recipient, uint amount, bytes calldata data) external virtual returns (bool) {\\n        return transfer (recipient, amount) \\n            && IERC677Receiver (recipient).onTokenTransfer (msg.sender, amount, data);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a `Transfer` event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address recipient, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(address(0), recipient, amount);\\n        _totalSupply += amount;\\n        increaseBalance(recipient, amount);\\n        emit Transfer(address(0), recipient, amount);\\n    }\\n\\n    function increaseBalance(address recipient, uint256 amount) private {\\n        if (recipient == address(0x0)) {\\n            revert ERC20InvalidReceiver(recipient); //use burn instead\\n        }\\n        uint256 oldBalance = _balances[recipient];\\n        uint256 newBalance = oldBalance + amount;\\n        if (oldBalance & FLAGGING_MASK != newBalance & FLAGGING_MASK) {\\n            revert ERC20BalanceOverflow(recipient, oldBalance, amount);\\n        }\\n        _balances[recipient] = newBalance;\\n    }\\n\\n     /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a `Transfer` event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _totalSupply -= amount;\\n        decreaseBalance(account, amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function decreaseBalance(address sender, uint256 amount) private {\\n        uint256 oldBalance = _balances[sender];\\n        uint256 newBalance = oldBalance - amount;\\n        if (oldBalance & FLAGGING_MASK != newBalance & FLAGGING_MASK) {\\n            revert ERC20InsufficientBalance(sender, balanceOf(sender), amount);\\n        }\\n        _balances[sender] = newBalance;\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an `Approval` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n     // solhint-disable-next-line no-empty-blocks\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) virtual internal {\\n        // intentionally left blank\\n    }\\n\\n    /**\\n     * Checks if msg.sender is an authorized address.\\n     * @param validSender The authorized address.\\n     */\\n    function _checkSender(address validSender) internal view {\\n        if (msg.sender != validSender) {\\n            revert ERC20InvalidSender(msg.sender);\\n        }\\n    }\\n\\n}\",\"keccak256\":\"0x89c6b8556441955b2c2ab4a79c51839f9d346ed6110397ca4f5ca06d29ee31b6\",\"license\":\"MIT\"},\"src/ERC20/ERC20Named.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20Flaggable.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\n\\ncontract ERC20Named is ERC20Flaggable, Ownable {\\n\\n    string public override name;\\n    string public override symbol;\\n\\n    constructor(string memory _symbol, string memory _name, uint8 _decimals, address _admin) ERC20Flaggable(_decimals) Ownable(_admin) {\\n        setNameInternal(_symbol, _name);\\n    }\\n\\n    function setName(string memory _symbol, string memory _name) external onlyOwner {\\n        setNameInternal(_symbol, _name);\\n    }\\n\\n    function setNameInternal(string memory _symbol, string memory _name) internal {\\n        symbol = _symbol;\\n        name = _name;\\n        emit NameChanged(_name, _symbol);\\n    }\\n\\n}\",\"keccak256\":\"0x33e4e786ce3701f1d9c61efa564af612c5ac9f8818159a3ec7f4209006859239\",\"license\":\"MIT\"},\"src/ERC20/ERC20Permit2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport \\\"./ERC20Flaggable.sol\\\";\\nimport \\\"../utils/Permit2Hub.sol\\\";\\n\\n/// @title ERC20Permit2\\n/// @dev This abstract contract extends the ERC20Flaggable contract and introduces the Permit2Hub.\\nabstract contract ERC20Permit2 is ERC20Flaggable {\\n    \\n    /// @dev The Permit2Hub contract instance.\\n    Permit2Hub public immutable permit2Hub;\\n\\n    /// @dev Initializes the ERC20Permit2 contract.\\n    /// @param _permit2Hub The address of the Permit2Hub contract.\\n    constructor(Permit2Hub _permit2Hub) {\\n        permit2Hub = _permit2Hub;\\n    }\\n\\n    /// @inheritdoc ERC20Flaggable\\n    function allowance(address owner, address spender) public view virtual override(ERC20Flaggable) returns (uint256) {\\n        if (permit2Hub.isPermit2Enabled(owner, spender)) \\n            return type(uint256).max;  // If permit is enabled, return the maximum value of uint256\\n        else \\n            return super.allowance(owner, spender);  // Otherwise, call the parent(ERC20Flaggable) allowance function\\n    }\\n}\\n\",\"keccak256\":\"0x26175bcd9fa0bd3bc257b08c50f8e8d5451d9d9cca1cd6fe42a93dd3a36ac784\",\"license\":\"MIT\"},\"src/ERC20/ERC20PermitLight.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied from https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol\\n// and modified it.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20Flaggable.sol\\\";\\nimport \\\"./IERC20Permit.sol\\\";\\nabstract contract ERC20PermitLight is ERC20Flaggable, IERC20Permit {\\n\\n   /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => uint256) public override nonces;\\n\\n  /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public override {\\n        if (deadline < block.timestamp) {\\n            revert Permit_DeadlineExpired(deadline, block.timestamp);\\n        }\\n\\n        unchecked { // unchecked to save a little gas with the nonce increment...\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"),\\n                                bytes32(0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            if (recoveredAddress == address(0) || recoveredAddress != owner) {\\n                revert Permit_InvalidSigner(recoveredAddress);\\n            }\\n            _approve(recoveredAddress, spender, value);\\n        }\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view override returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    //keccak256(\\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\");\\n                    bytes32(0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n}\",\"keccak256\":\"0x408c5d31d84153fc963bb08cd1f10df1b2c1acc186497f348492c5a60b330ff0\",\"license\":\"MIT\"},\"src/ERC20/IERC20.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: MIT\\n*\\n* Copyright (c) 2016-2019 zOS Global Limited\\n*\\n*/\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n\\n    // Optional functions\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\",\"keccak256\":\"0x2224189bcdeb28cbadfdb8d126c278df60ec39875c7929e7ffa9e2055cded960\",\"license\":\"MIT\"},\"src/ERC20/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit is IERC20 {\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n\\t//////////////////////////////////////////////////////////////*/\\n    /// Block timestamp must to be before deadline.\\n    /// @param deadline The deadline of the permit.\\n    /// @param blockTimestamp The timestamp of the execution block.\\n    error Permit_DeadlineExpired(uint256 deadline, uint256 blockTimestamp);\\n    /// Recovered address must be owner and not zero address.\\n    /// @param signerAddress The recovered signer address.\\n    error Permit_InvalidSigner(address signerAddress);\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\",\"keccak256\":\"0x9c6c4c49deffc8176f13b34150dd580526b45dd85ce1b71fe2ed340ff0489ebd\",\"license\":\"MIT\"},\"src/ERC20/IERC677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Given that development on ERC 677 has stalled, we should consider supporting EIP 1363: https://eips.ethereum.org/EIPS/eip-1363\\ninterface IERC677Receiver {\\n\\n    error IERC677_OnTokenTransferFailed();\\n    \\n    function onTokenTransfer(address from, uint256 amount, bytes calldata data) external returns (bool);\\n\\n}\",\"keccak256\":\"0xcca2937791e78a77e83f586e21a84fcc46fa910062f929145bf4159ef3f9d73c\",\"license\":\"MIT\"},\"src/brokerbot/IBrokerbot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"../ERC20/IERC20Permit.sol\\\";\\n\\ninterface IBrokerbot {\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n  //////////////////////////////////////////////////////////////*/\\n  error Brokerbot_BuyingDisabled();\\n  error Brokerbot_SellingDisabled();\\n  /// Sender(msg.sender) has to be incoming token or paymenthub.\\n  /// @param sender The msg.sender.\\n  error Brokerbot_InvalidSender(address sender);\\n  /// target.call() wasn't successful.\\n  /// @param target The receiver of the Eth.\\n  /// @param amount The withdraw amount.\\n  error Brokerbot_WithdrawFailed(address target, uint256 amount);\\n  /// Sender(msg.sender) needs to be owner or paymenthub.\\n  /// @param sender The msg.sender.\\n  error Brokerbot_NotAuthorized(address sender);\\n\\n  function paymenthub() external view returns (address);\\n\\n  function base() external view returns (IERC20);\\n\\n  function token() external view returns (IERC20Permit);\\n  \\n  function settings() external view returns (uint256);\\n\\n  // @return The amount of shares bought on buying or how much in the base currency is transfered on selling\\n  function processIncoming(IERC20 token_, address from, uint256 amount, bytes calldata ref) external payable returns (uint256);\\n\\n  function getBuyPrice(uint256 shares) external view returns (uint256);\\n\\n  function getSellPrice(uint256 shares) external view returns (uint256);\\n\\n}\",\"keccak256\":\"0xb41ad02c5b587309ecd6c84d4677d457e4cdb9f993447e97a605b10ec24de7b5\",\"license\":\"MIT\"},\"src/brokerbot/IUniswapV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied from \\n// https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoter.sol\\n// https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/ISwapRouter.sol\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\n\\ninterface IQuoter {\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountOut The desired output amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountIn The desired input amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountOut);\\n    \\n    // solhint-disable-next-line func-name-mixedcase\\n    function WETH9() external view returns (address);\\n}\\n\\ninterface ISwapRouter {\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n    \\n    function refundETH() external payable;\\n}\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xd1fe06efa70710c24624abbfe0ed5ab69a47e9d3ec70734ea6e813711ff69784\",\"license\":\"MIT\"},\"src/brokerbot/PaymentHub.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"../ERC20/IERC20Permit.sol\\\";\\nimport \\\"./IUniswapV3.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"./IBrokerbot.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"../utils/SafeERC20.sol\\\";\\n\\n/**\\n * A hub for payments. This allows tokens that do not support ERC 677 to enjoy similar functionality,\\n * namely interacting with a token-handling smart contract in one transaction, without having to set an allowance first.\\n * Instead, an allowance needs to be set only once, namely for this contract.\\n * Further, it supports automatic conversion from Ether to the payment currency through Uniswap or the reception of Ether\\n * using the current exchange rate as found in the chainlink oracle.\\n */\\ncontract PaymentHub {\\n\\n    using SafeERC20 for IERC20;\\n\\n    // Version history\\n    // Version 4: added path to pay with any ecr20 via uniswap\\n    // Version 5: added sell via permit\\n    // Version 6: added transferEther function\\n    // Version 7: added sell against eth and erc20, version, add permitinfo/swapinfo struct\\n    // Version 8: use SafeERC20 for transfers\\n    // Version 9: change payFromEther to include a swap path\\n    uint256 public constant VERSION = 9;\\n\\n    uint256 private constant KEEP_ETHER = 0x4; // copied from brokerbot\\n\\n    uint256 private constant DENOMINATOR = 1e8;\\n    address private constant XCHF_TOKEN = 0xB4272071eCAdd69d933AdcD19cA99fe80664fc08;\\n    address private constant ZCHF_TOKEN = 0xB58E61C3098d85632Df34EecfB899A1Ed80921cB;\\n\\n    IQuoter private immutable uniswapQuoter;\\n    ISwapRouter private immutable uniswapRouter;\\n    AggregatorV3Interface internal immutable priceFeedCHFUSD;\\n    AggregatorV3Interface internal immutable priceFeedETHUSD;\\n\\n    address public trustedForwarder;\\n\\n    struct PermitInfo {\\n        uint256 exFee;\\n        uint256 deadline;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    // event to when new forwarder is set\\n    event ForwarderChanged(address indexed _oldForwarder, address indexed _newForwarder);\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n    //////////////////////////////////////////////////////////////*/\\n    /// Failguard when an erc20 transfer returns false. \\n    error PaymentHub_TransferFailed();\\n    /// Sender not trusted.\\n    /// @param sender The msg.sender of this transaction.\\n    error PaymentHub_InvalidSender(address sender);\\n    /// swap with less base token as required.\\n    /// @param amountBase Required amount.\\n    /// @param swappedAmount Swapped amount.\\n    error PaymentHub_SwapError(uint256 amountBase, uint256 swappedAmount);\\n\\n    constructor(address _trustedForwarder, IQuoter _quoter, ISwapRouter swapRouter, AggregatorV3Interface _aggregatorCHFUSD, AggregatorV3Interface _aggregatorETHUSD) {\\n        trustedForwarder = _trustedForwarder;\\n        uniswapQuoter = _quoter;\\n        uniswapRouter = swapRouter;\\n        priceFeedCHFUSD = _aggregatorCHFUSD;\\n        priceFeedETHUSD = _aggregatorETHUSD;\\n    }\\n\\n    modifier onlySellerAndForwarder(address seller) {\\n        if (msg.sender != trustedForwarder && msg.sender != seller) {\\n            revert PaymentHub_InvalidSender(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyForwarder() {\\n        if (msg.sender != trustedForwarder) {\\n            revert PaymentHub_InvalidSender(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Change the trusted forwarder.\\n     * @param newForwarder The new trusted forwarder.\\n     */\\n     function changeForwarder(address newForwarder) external onlyForwarder {\\n        trustedForwarder = newForwarder;\\n        emit ForwarderChanged(msg.sender, newForwarder);\\n    }\\n\\n    /**  \\n     * Get price in ERC20\\n     * This is the method that the Brokerbot widget should use to quote the price to the user.\\n     * @param amountInBase The amount of the base currency for the exact output.\\n     * @param path The encoded path of the swap from erc20 to base.\\n     * @return amount quoted to pay\\n     */\\n    function getPriceInERC20(uint256 amountInBase, bytes memory path) public returns (uint256) {\\n        return getPriceERC20(amountInBase, path, true);\\n    }\\n    \\n    /**\\n     * @notice Get price for given amount and path swapped via uniswap. \\n     * @param amount The exact amount which you want get out (exactOutput) or you put in (exactInput).\\n     * @param path The path of the swap (inreverse order for exactOutput).\\n     * @param exactOutput True if exactOutput should be used or false if exactInput should be used.\\n     */\\n    function getPriceERC20(uint256 amount, bytes memory path, bool exactOutput) public returns (uint256) {\\n        if (exactOutput) {\\n            return uniswapQuoter.quoteExactOutput(\\n                path,\\n                amount\\n            );\\n        } else {\\n            return uniswapQuoter.quoteExactInput(\\n                path,\\n                amount\\n            );\\n        }\\n    }\\n\\n    /**\\n     * Get price in Ether depding on brokerbot setting.\\n     * If keep ETH is set price is from oracle.\\n     * This is the method that the Brokerbot widget should use to quote the price to the user.\\n     * @return The price in wei.\\n     */\\n    function getPriceInEther(uint256 amountInBase, IBrokerbot brokerBot, bytes calldata path) public returns (uint256) {\\n        if ((address(brokerBot) != address(0)) && hasSettingKeepEther(brokerBot)) {\\n            return getPriceInEtherFromOracle(amountInBase, IBrokerbot(brokerBot).base());\\n        } else {\\n            return getPriceERC20(amountInBase, path, true);\\n        }\\n    }\\n\\n    /**\\n     * Price in ETH with 18 decimals\\n     */\\n    function getPriceInEtherFromOracle(uint256 amountInBase, IERC20 base) public view returns (uint256) {\\n        if(address(base) == XCHF_TOKEN || address(base) == ZCHF_TOKEN) {\\n            return getLatestPriceCHFUSD() * amountInBase / getLatestPriceETHUSD();\\n        } else {\\n            return amountInBase * DENOMINATOR / getLatestPriceETHUSD();\\n        }\\n    }\\n\\n    /**\\n     * Returns the latest price of eth/usd pair from chainlink with 8 decimals\\n     */\\n    function getLatestPriceETHUSD() public view returns (uint256) {\\n        (, int256 price, , , ) = priceFeedETHUSD.latestRoundData();\\n        return uint256(price);\\n    }\\n\\n    /**\\n     * Returns the latest price of chf/usd pair from chainlink with 8 decimals\\n     */\\n    function getLatestPriceCHFUSD() public view returns (uint256) {\\n        (, int256 price, , , ) = priceFeedCHFUSD.latestRoundData();\\n        return uint256(price);\\n    }\\n\\n    /**\\n     * Convenience method to swap ether into base and pay a target address\\n     */\\n    function payFromEther(address recipient, uint256 amountInBase, bytes memory path) public payable returns (uint256 amountIn) {\\n        ISwapRouter swapRouter = uniswapRouter;\\n        // The parameter path is encoded as (tokenOut, fee, tokenIn/tokenOut, fee, tokenIn)\\n        ISwapRouter.ExactOutputParams memory params =\\n            ISwapRouter.ExactOutputParams({\\n                path: path,\\n                recipient: recipient,\\n                // solhint-disable-next-line not-rely-on-time\\n                deadline: block.timestamp,\\n                amountOut: amountInBase,\\n                amountInMaximum: msg.value\\n            });\\n\\n        // Executes the swap, returning the amountIn actually spent.\\n        amountIn = swapRouter.exactOutput{value: msg.value}(params);\\n\\n        // For exact output swaps, the amountInMaximum may not have all been spent.\\n        // If the actual amount spent (amountIn) is less than the specified maximum amount, we must refund the msg.sender and approve the swapRouter to spend 0.\\n        if (amountIn < msg.value) {\\n            swapRouter.refundETH();\\n            (bool success, ) = msg.sender.call{value:msg.value - amountIn}(\\\"\\\"); // return change\\n            if (!success) {\\n                revert PaymentHub_TransferFailed();\\n            }\\n        }\\n    }\\n\\n    /// @dev The calling address must approve this contract to spend its ERC20 for this function to succeed. As the amount of input ERC20 is variable,\\n    /// the calling address will need to approve for a slightly higher or infinit amount, anticipating some variance.\\n    /// @param amountOut The desired amount of baseCurrency.\\n    /// @param amountInMaximum The maximum amount of ERC20 willing to be swapped for the specified amountOut of baseCurrency.\\n    /// @param erc20In The address of the erc20 token to pay with.\\n    /// @param path The encoded path of the swap from erc20 to base.\\n    /// @param recipient The reciving address - brokerbot.\\n    /// @return amountIn The amountIn of ERC20 actually spent to receive the desired amountOut.\\n    function payFromERC20(uint256 amountOut, uint256 amountInMaximum, address erc20In, bytes memory path, address recipient) public returns (uint256 amountIn) {\\n        ISwapRouter swapRouter = uniswapRouter;\\n        // Transfer the specified `amountInMaximum` to this contract.\\n        IERC20(erc20In).safeTransferFrom(msg.sender, address(this), amountInMaximum);\\n\\n        // The parameter path is encoded as (tokenOut, fee, tokenIn/tokenOut, fee, tokenIn)\\n        ISwapRouter.ExactOutputParams memory params =\\n            ISwapRouter.ExactOutputParams({\\n                path: path,\\n                recipient: recipient,\\n                // solhint-disable-next-line not-rely-on-time\\n                deadline: block.timestamp,\\n                amountOut: amountOut,\\n                amountInMaximum: amountInMaximum\\n            });\\n\\n        // Executes the swap, returning the amountIn actually spent.\\n        amountIn = swapRouter.exactOutput(params);\\n\\n        // If the swap did not require the full amountInMaximum to achieve the exact amountOut then we refund msg.sender and approve the router to spend 0.\\n        if (amountIn < amountInMaximum) {\\n            IERC20(erc20In).safeTransfer(msg.sender, amountInMaximum - amountIn);\\n        }\\n    }\\n\\n    ///This function appoves infinite allowance for Uniswap, this is safe as the paymenthub should never hold any token (see also recover() ).\\n    ///@dev This function needs to be called before using the PaymentHub the first time with a new ERC20 token.\\n    ///@param erc20In The erc20 addresse to approve.\\n    function approveERC20(address erc20In) external {\\n        IERC20(erc20In).approve(address(uniswapRouter), type(uint256).max);\\n    }\\n\\n    function multiPay(IERC20 token, address[] calldata recipients, uint256[] calldata amounts) public {\\n        for (uint i=0; i<recipients.length; i++) {\\n            IERC20(token).safeTransferFrom(msg.sender, recipients[i], amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * Can (at least in theory) save some gas as the sender balance only is touched in one transaction.\\n     */\\n    function multiPayAndNotify(IERC20 token, IBrokerbot[] calldata brokerbots, uint256[] calldata amounts, bytes calldata ref) external {\\n        for (uint i=0; i<brokerbots.length; i++) {\\n            payAndNotify(token, brokerbots[i], amounts[i], ref);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows to make a base currency payment from the sender to the brokerbot, given an allowance to this contract.\\n     * @dev Equivalent to xchf.transferAndCall(brokerbot, amountInBase)\\n     * @param brokerbot The brokerbot to pay and receive the shares from.\\n     * @param amountInBase The amount of base currency used to buy shares.\\n     * @param ref The reference data blob.\\n     * @return The amount of shares bought\\n     */\\n    function payAndNotify(IBrokerbot brokerbot, uint256 amountInBase, bytes calldata ref) external returns (uint256) {\\n        return payAndNotify(brokerbot.base(), brokerbot, amountInBase, ref);\\n    }\\n\\n    function payAndNotify(IERC20 token, IBrokerbot brokerbot, uint256 amount, bytes calldata ref) public returns (uint256) {\\n        token.safeTransferFrom(msg.sender, address(brokerbot), amount);\\n        return brokerbot.processIncoming(token, msg.sender, amount, ref);\\n    }\\n\\n    /**\\n     * @notice Pay with Ether to buy shares.\\n     * @param brokerbot The brokerbot to pay and receive the shares from.\\n     * @param amountBase The amount of base currency used to buy shares.\\n     * @param ref The reference data blob.\\n     * @param path The Uniswap path from ETH to base currency (uses exactOuput => reverse order)\\n     * @return priceInEther The amount of Ether spent.\\n     * @return sharesOut The amount of shares bought.\\n     */\\n    function payFromEtherAndNotify(IBrokerbot brokerbot, uint256 amountBase, bytes calldata ref, bytes memory path) external payable returns (uint256 priceInEther, uint256 sharesOut) {\\n        IERC20 base = brokerbot.base();\\n        // Check if the brokerbot has setting to keep ETH\\n        if (hasSettingKeepEther(brokerbot)) {\\n            priceInEther = getPriceInEtherFromOracle(amountBase, base);\\n            sharesOut = brokerbot.processIncoming{value: priceInEther}(base, msg.sender, amountBase, ref);\\n\\n            // Pay back ETH that was overpaid\\n            if (priceInEther < msg.value) {\\n                (bool success, ) = msg.sender.call{value:msg.value - priceInEther}(\\\"\\\"); // return change\\n                if (!success) {\\n                    revert PaymentHub_TransferFailed();\\n                }\\n            }\\n\\n        } else {\\n            uint256 balanceBefore = IERC20(base).balanceOf(address(brokerbot));\\n            priceInEther = payFromEther(address(brokerbot), amountBase, path);\\n            uint256 balanceAfter = IERC20(base).balanceOf(address(brokerbot));\\n            if (amountBase != (balanceAfter - balanceBefore)) { // check that the swap was successful with correct currency\\n                revert PaymentHub_SwapError(amountBase, balanceAfter - balanceBefore);\\n            }    \\n            sharesOut = brokerbot.processIncoming(base, msg.sender, amountBase, ref); // not sending msg.value as this is already done in payFromEther function\\n        }\\n    }\\n\\n    /***\\n     * @notice Pay from any ERC20 token (which has Uniswapv3 ERC20-ETH pool) and send swapped base currency to brokerbot.\\n     * @notice The needed amount needs to be approved at the ERC20 contract beforehand\\n     * @param brokerbot The brokerbot to pay and receive the shares from.\\n     * @param amountBase The amount of base currency used to buy shares.\\n     * @param erc20 The address of the ERC20 token to pay.\\n     * @param amountInMaximum The maximum amount of the ERC20 to pay (should include some slippage).\\n     * @param path The encoded path of the swap from erc20 to base currency.\\n     * @param ref Reference data blob.\\n     * @return amountIn The amount erc20 spent to buy shares.\\n     * @return amountOut The amount of shares received by the brokerbot.\\n     */\\n    function payFromERC20AndNotify(IBrokerbot brokerbot, uint256 amountBase, address erc20, uint256 amountInMaximum, bytes memory path, bytes calldata ref) external returns (uint256 amountIn, uint256 amountOut) {\\n        IERC20 base = brokerbot.base();\\n        uint256 balanceBefore = IERC20(base).balanceOf(address(brokerbot));\\n        amountIn = payFromERC20(amountBase, amountInMaximum, erc20, path, address(brokerbot));\\n        uint256 balanceAfter = IERC20(base).balanceOf(address(brokerbot));\\n        if (amountBase != (balanceAfter - balanceBefore)) {\\n            revert PaymentHub_SwapError(amountBase, balanceAfter - balanceBefore);\\n        }        \\n        amountOut = brokerbot.processIncoming(base, msg.sender, balanceAfter - balanceBefore, ref);\\n    }\\n\\n    /**\\n     * @notice Sell shares with permit\\n     * @param brokerbot The brokerbot to recive the shares.\\n     * @param seller The address of the seller.\\n     * @param recipient The address of the recipient of the sell preceeds.\\n     * @param amountToSell The amount the seller wants to sell.\\n     * @param ref Reference e.g. insider declaration and the type of sell.\\n     * @param permitInfo Information about the permit.\\n     * @return The base currency amount for the selling of the shares.\\n     */\\n    function sellSharesWithPermit(IBrokerbot brokerbot, IERC20Permit shares, address seller, address recipient, uint256 amountToSell, bytes calldata ref, PermitInfo calldata permitInfo) public onlySellerAndForwarder(seller) returns (uint256) {\\n        // Call permit to set allowance\\n        shares.permit(seller, address(this), amountToSell, permitInfo.deadline, permitInfo.v, permitInfo.r,permitInfo.s);\\n        // process sell\\n        if (permitInfo.exFee > 0){\\n            uint256 proceeds = _sellShares(brokerbot, shares, seller, address(this), amountToSell, ref);\\n            IERC20 currency = brokerbot.base();\\n            currency.safeTransfer(msg.sender, permitInfo.exFee);\\n            currency.safeTransfer(recipient, proceeds - permitInfo.exFee);\\n            return proceeds - permitInfo.exFee;\\n        } else {\\n            return _sellShares(brokerbot, shares, seller, recipient, amountToSell, ref);\\n        }\\n    }\\n\\n    /**\\n     * @notice With this function a user can sell shares with permit and swap them to a desired token.\\n     * @param brokerbot The brokerbot of the shares to sell.\\n     * @param shares The (draggable)shares address.\\n     * @param seller The seller address.\\n     * @param amountToSell The amount of shares to sell.\\n     * @param ref Reference e.g. insider declaration and the type of sell.\\n     * @param permitInfo Information about the permit.\\n     * @param params Information about the swap.\\n     * @return The output amount of the swap to the desired token.\\n     */\\n    function sellSharesWithPermitAndSwap(IBrokerbot brokerbot, IERC20Permit shares, address seller,  uint256 amountToSell, bytes calldata ref, PermitInfo calldata permitInfo, ISwapRouter.ExactInputParams memory params, bool unwrapWeth) external onlySellerAndForwarder(seller) returns (uint256) {\\n        params.amountIn = sellSharesWithPermit(brokerbot, shares, seller, address(this), amountToSell, ref, permitInfo);\\n        return _swap(params, unwrapWeth);\\n    }\\n\\n    /**\\n     * @notice With this function a user can sell shares and swap them to a desired token. The user has to approve the paymenthub before on the shares contract.\\n     * @param brokerbot The brokerbot of the shares to sell.\\n     * @param shares The (draggable)shares address.\\n     * @param amountToSell The amount of shares to sell.\\n     * @param ref Reference e.g. insider declaration and the type of sell.\\n     * @param params Information about the swap.\\n     * @return The output amount of the swap to the desired token.\\n     */\\n    function sellSharesAndSwap(IBrokerbot brokerbot, IERC20 shares, uint256 amountToSell,  bytes calldata ref, ISwapRouter.ExactInputParams memory params, bool unwrapWeth) external returns (uint256) {\\n        params.amountIn = _sellShares(brokerbot, shares, msg.sender, address(this), amountToSell, ref);\\n        return _swap(params, unwrapWeth);\\n    }\\n\\n    /**\\n     * @notice Transfers shares to brokerbot and executes the selling.\\n     * @param brokerbot The brokerbot of the shares to sell.\\n     * @param shares The (draggable)shares address.\\n     * @param seller The seller address.\\n     * @param recipient The recipient of the base currency tokens. (this can be a 3rd party to off-ramp or the paymenthub itself if a swap will be done direct after)\\n     * @param amountToSell The amount of shares to sell.\\n     * @param ref Reference e.g. insider declaration and the type of sell.\\n     * @return The base currency amount for the selling of the shares.\\n     */ \\n    function _sellShares(IBrokerbot brokerbot, IERC20 shares, address seller, address recipient, uint256 amountToSell, bytes calldata ref ) internal returns (uint256) {\\n        // send shares token to brokerbot\\n        shares.safeTransferFrom(seller, address(brokerbot), amountToSell);\\n        // process sell on brokerbot\\n        return brokerbot.processIncoming(shares, recipient, amountToSell, ref);\\n    }\\n\\n    /**\\n     * @notice Swap (base currency) token according to given path and unwrap weth if needed.\\n     * @param params Information about the swap (includes path).\\n     * @return amountOut The output amount of the swap to the desired token.\\n     */\\n    function _swap(ISwapRouter.ExactInputParams memory params, bool unwrapWeth) internal returns(uint256 amountOut) {\\n        // if weth should be unwrapped, swap recipient is this contract and eth is send to seller\\n        if (unwrapWeth){\\n            address seller = params.recipient;\\n            params.recipient = address(this);\\n            amountOut = _swapToERC20(params);\\n            IWETH9(uniswapQuoter.WETH9()).withdraw(amountOut);\\n            (bool success, ) = payable(seller).call{value:amountOut}(\\\"\\\");\\n            if (!success) revert PaymentHub_TransferFailed();\\n        } else {\\n            amountOut = _swapToERC20(params);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calls the Uniswap router to swap tokens according to given path.\\n     * @param params Information about the swap (includes path).\\n     * @return amountOut The output amount of the swap to the desired token.\\n     */\\n    function _swapToERC20(ISwapRouter.ExactInputParams memory params) internal returns(uint256 amountOut) {\\n        amountOut = uniswapRouter.exactInput(params);\\n        if (amountOut < params.amountOutMinimum){\\n            revert PaymentHub_SwapError(params.amountOutMinimum, amountOut);\\n        }\\n    }\\n\\n    /**\\n     * Checks if the brokerbot has setting enabled to keep ether\\n     */\\n    function hasSettingKeepEther(IBrokerbot brokerbot) public view returns (bool) {\\n        return brokerbot.settings() & KEEP_ETHER == KEEP_ETHER;\\n    }\\n\\n    /**\\n     * @notice In case tokens have been accidentally sent directly to this contract. Only Forwarder can withdraw, else a MEV bot will intercept it.\\n     * @param ercAddress The erc20 address.\\n     * @param to The address to transfer tokens to.\\n     * @param amount The amount of tokens to transfer.\\n     */\\n    function recover(IERC20 ercAddress, address to, uint256 amount) external onlyForwarder {\\n        ercAddress.safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer ether to a given address. Only Forwarder can withdraw, else a MEV bot will intercept it.\\n     * @param to The address to transfer ether to.\\n     */\\n    function withdrawEther(address to, uint256 amount) external onlyForwarder {\\n        (bool success, ) = payable(to).call{value:amount}(\\\"\\\");\\n        if (!success) {\\n            revert PaymentHub_TransferFailed();\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer ether to a given address.\\n     * @dev Used with the mutlisigwallet.\\n     * @param to The address to transfer ether to.\\n     */\\n    function transferEther(address to) external payable {\\n        (bool success, ) = payable(to).call{value:msg.value}(\\\"\\\");\\n        if (!success) {\\n            revert PaymentHub_TransferFailed();\\n        }\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {\\n        // Important to receive ETH refund from Uniswap\\n    }\\n}\\n\",\"keccak256\":\"0x01de8d6079a35ec0b861668233cabce1fa8e30f7e915ce56db7a49a711a986e3\",\"license\":\"LicenseRef-Aktionariat\"},\"src/draggable/ERC20Draggable.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: LicenseRef-Aktionariat\\n *\\n * MIT License with Automated License Fee Payments\\n *\\n * Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n *\\n * Permission is hereby granted to any person obtaining a copy of this software\\n * and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n * without restriction, including without limitation the rights to use, copy,\\n * modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n * Software, and to permit persons to whom the Software is furnished to do so,\\n * subject to the following conditions:\\n *\\n * - The above copyright notice and this permission notice shall be included in\\n *   all copies or substantial portions of the Software.\\n * - All automated license fee payments integrated into this and related Software\\n *   are preserved.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC-20 tokens subject to a drag-along agreement\\n * @author Luzius Meisser, luzius@aktionariat.com\\n *\\n * This is an ERC-20 token that is bound to a shareholder or other agreement that contains\\n * a drag-along clause. The smart contract can help enforce this drag-along clause in case\\n * an acquirer makes an offer using the provided functionality. If a large enough quorum of\\n * token holders agree, the remaining token holders can be automatically \\\"dragged along\\\" or\\n * squeezed out. For shares non-tokenized shares, the contract relies on an external Oracle\\n * to provide the votes of those.\\n *\\n * Subclasses should provide a link to a human-readable form of the agreement.\\n */\\n\\nimport \\\"./IDraggable.sol\\\";\\nimport \\\"../ERC20/ERC20Flaggable.sol\\\";\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"../ERC20/IERC677Receiver.sol\\\";\\nimport \\\"./IOffer.sol\\\";\\nimport \\\"./IOfferFactory.sol\\\";\\nimport \\\"../shares/IShares.sol\\\";\\nimport \\\"../utils/SafeERC20.sol\\\";\\n\\nstruct DraggableParams {\\n\\tIERC20Permit wrappedToken;\\n\\tuint256 quorumDrag;\\n\\tuint256 quorumMigration;\\n\\tuint256 votePeriod;\\n}\\n\\nabstract contract ERC20Draggable is IERC677Receiver, IDraggable, ERC20Flaggable {\\n\\n\\tusing SafeERC20 for IERC20;\\n    \\n\\t// If flag is not present, one can be sure that the address did not vote. If the \\n\\t// flag is present, the address might have voted and one needs to check with the\\n\\t// current offer (if any) when transferring tokens.\\n\\tuint8 private constant FLAG_VOTE_HINT = 1;\\n\\n\\tIERC20 public override wrapped; // The wrapped contract\\n\\tIOfferFactory public immutable factory;\\n\\n\\t// If the wrapped tokens got replaced in an acquisition, unwrapping might yield many currency tokens\\n\\tuint256 public unwrapConversionFactor = 0;\\n\\n\\t// The current acquisition attempt, if any. See initiateAcquisition to see the requirements to make a public offer.\\n\\tIOffer public override offer;\\n\\n\\tuint256 private constant QUORUM_MULTIPLIER = 10000;\\n\\n\\tuint256 public immutable quorumMigration; // used for contract migartion, in BPS (out of 10'000)\\n\\tuint256 public immutable quorum; // used for drag-along at acquisition offers, in BPS (out of 10'000)\\n\\tuint256 public immutable votePeriod; // In seconds\\n\\n\\taddress public override oracle;\\n\\n\\tevent MigrationSucceeded(address newContractAddress, uint256 yesVotes, uint256 oracleVotes, uint256 totalVotingPower);\\n\\tevent ChangeOracle(address oracle);\\n\\n    /**\\n\\t * Note that the Brokerbot only supports tokens that revert on failure and where transfer never returns false.\\n     */\\n\\tconstructor(\\n\\t\\tDraggableParams memory _params,\\n\\t\\tIOfferFactory _offerFactory,\\n\\t\\taddress _oracle\\n\\t) \\n\\t\\tERC20Flaggable(0)\\n\\t{\\n\\t\\twrapped = _params.wrappedToken;\\n\\t\\tquorum = _params.quorumDrag;\\n\\t\\tquorumMigration = _params.quorumMigration;\\n\\t\\tvotePeriod = _params.votePeriod;\\n\\t\\tfactory = _offerFactory;\\n\\t\\toracle = _oracle;\\n\\t}\\n\\n\\tmodifier onlyOracle {\\n\\t\\t_checkSender(oracle);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyWrappedToken {\\n\\t\\t_checkSender(address(wrapped));\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyOffer(){\\n\\t\\t_checkSender(address(offer));\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier checkBinding(bool expected) {\\n\\t\\tif (expected != isBinding()) {\\n\\t\\t\\tif(expected) {\\n\\t\\t\\t\\trevert Draggable_NotBinding();\\n\\t\\t\\t}\\n\\t\\t\\tif(!expected) {\\n\\t\\t\\t\\trevert Draggable_IsBinding();\\n\\t\\t\\t}\\n\\t\\t} \\n\\t\\t_;\\n\\t}\\n\\n\\tfunction onTokenTransfer(\\n\\t\\taddress from, \\n\\t\\tuint256 amount, \\n\\t\\tbytes calldata\\n\\t) external override onlyWrappedToken returns (bool) {\\n\\t\\t_mint(from, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/** Wraps additional tokens, thereby creating more ERC20Draggable tokens. */\\n\\tfunction wrap(address shareholder, uint256 amount) external {\\n\\t\\twrapped.safeTransferFrom(msg.sender, address(this), amount);\\n\\t\\t_mint(shareholder, amount);\\n\\t}\\n\\n\\t/**\\n\\t * Indicates that the token holders are bound to the token terms and that:\\n\\t * - Conversion back to the wrapped token (unwrap) is not allowed\\n\\t * - A drag-along can be performed by making an according offer\\n\\t * - They can be migrated to a new version of this contract in accordance with the terms\\n\\t */\\n\\tfunction isBinding() public view returns (bool) {\\n\\t\\treturn unwrapConversionFactor == 0;\\n\\t}\\n\\n    /**\\n\\t * Current recommended naming convention is to add the postfix \\\"SHA\\\" to the plain shares\\n\\t * in order to indicate that this token represents shares bound to a shareholder agreement.\\n\\t */\\n\\tfunction name() public view override returns (string memory) {\\n\\t\\tstring memory wrappedName = wrapped.name();\\n\\t\\tif (isBinding()) {\\n\\t\\t\\treturn string(abi.encodePacked(wrappedName, \\\" SHA\\\"));\\n\\t\\t} else {\\n\\t\\t\\treturn string(abi.encodePacked(wrappedName, \\\" (Wrapped)\\\"));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction symbol() public view override returns (string memory) {\\n\\t\\t// ticker should be less dynamic than name\\n\\t\\treturn string(abi.encodePacked(wrapped.symbol(), \\\"S\\\"));\\n\\t}\\n\\n\\t/**\\n\\t * Deactivates the drag-along mechanism and enables the unwrap function.\\n\\t */\\n\\tfunction _deactivate(uint256 factor) internal {\\n\\t\\tif (factor == 0) {\\n\\t\\t\\trevert Draggable_FactorZero();\\n\\t\\t}\\n\\t\\tunwrapConversionFactor = factor;\\n\\t}\\n\\n\\t/** Decrease the number of drag-along tokens. The user gets back their shares in return */\\n\\tfunction unwrap(uint256 amount) external override checkBinding(false) {\\n\\t\\t_unwrap(msg.sender, amount, unwrapConversionFactor);\\n\\t}\\n\\n\\tfunction _unwrap(address owner, uint256 amount, uint256 factor) internal {\\n\\t\\t_burn(owner, amount);\\n\\t\\twrapped.safeTransfer(owner, amount * factor);\\n\\t}\\n\\n\\t/**\\n\\t * Burns both the token itself as well as the wrapped token!\\n\\t * If you want to get out of the shareholder agreement, use unwrap after it has been\\n\\t * deactivated by a majority vote or acquisition.\\n\\t *\\n\\t * Burning only works if wrapped token supports burning. Also, the exact meaning of this\\n\\t * operation might depend on the circumstances. Burning and reussing the wrapped token\\n\\t * does not free the sender from the legal obligations of the shareholder agreement.\\n\\t */\\n\\tfunction burn(uint256 amount) external {\\n\\t\\t_burn(msg.sender, amount);\\n\\t\\tIShares(address(wrapped)).burn(isBinding() ? amount : amount * unwrapConversionFactor);\\n\\t}\\n\\n\\tfunction makeAcquisitionOffer(\\n\\t\\tbytes32 salt, \\n\\t\\tuint256 pricePerShare, \\n\\t\\tIERC20 currency\\n\\t) external payable checkBinding(true) {\\n\\t\\tIOffer newOffer = factory.create{value: msg.value}(\\n\\t\\t\\tsalt, msg.sender, pricePerShare, currency, quorum, votePeriod);\\n\\n\\t\\tif (_offerExists()) {\\n\\t\\t\\toffer.makeCompetingOffer(newOffer);\\n\\t\\t}\\n\\t\\toffer = newOffer;\\n\\t}\\n\\n\\tfunction drag(address buyer, IERC20 currency) external override onlyOffer {\\n\\t\\t_unwrap(buyer, balanceOf(buyer), 1);\\n\\t\\t_replaceWrapped(currency, buyer);\\n\\t}\\n\\n\\tfunction notifyOfferEnded() external override onlyOffer {\\n\\t\\toffer = IOffer(address(0));\\n\\t}\\n\\n\\tfunction _replaceWrapped(IERC20 newWrapped, address oldWrappedDestination) internal checkBinding(true) {\\n\\t\\t// Free all old wrapped tokens we have\\n\\t\\twrapped.safeTransfer(oldWrappedDestination, wrapped.balanceOf(address(this)));\\n\\t\\t// Count the new wrapped tokens\\n\\t\\twrapped = newWrapped;\\n\\t\\tif (totalSupply() > 0) // if there are no tokens, no need to deactivate\\n\\t\\t\\t_deactivate(newWrapped.balanceOf(address(this)) / totalSupply());\\n\\t\\temit NameChanged(name(), symbol());\\n\\t}\\n\\n\\tfunction setOracle(address newOracle) external override onlyOracle {\\n\\t\\toracle = newOracle;\\n\\t\\temit ChangeOracle(oracle);\\n\\t}\\n\\n\\tfunction migrateWithExternalApproval(address successor, uint256 additionalVotes) external override onlyOracle {\\n\\t\\t// Additional votes cannot be higher than the votes not represented by these tokens.\\n\\t\\t// The assumption here is that more shareholders are bound to the shareholder agreement\\n\\t\\t// that this contract helps enforce and a vote among all parties is necessary to change\\n\\t\\t// it, with an oracle counting and reporting the votes of the others.\\n\\t\\tif (totalSupply() + additionalVotes > totalVotingTokens()) {\\n\\t\\t\\trevert Draggable_TooManyVotes(totalVotingTokens(), totalSupply() + additionalVotes);\\n\\t\\t}\\n\\t\\t_migrate(successor, additionalVotes);\\n\\t}\\n\\n\\tfunction migrate() external override {\\n\\t\\t_migrate(msg.sender, 0);\\n\\t}\\n\\n\\tfunction _migrate(address successor, uint256 additionalVotes) internal {\\n\\t\\tuint256 yesVotes = additionalVotes + balanceOf(successor);\\n\\t\\tuint256 totalVotes = totalVotingTokens();\\n\\t\\tif (yesVotes > totalVotes) {\\n\\t\\t\\trevert Draggable_TooManyVotes(totalVotes, yesVotes);\\n\\t\\t}\\n\\t\\tif (_offerExists()) {\\n\\t\\t\\t// if you have the quorum, you can cancel the offer first if necessary\\n\\t\\t\\trevert Draggable_OpenOffer();\\n\\t\\t}\\n\\t\\tif (yesVotes * QUORUM_MULTIPLIER < totalVotes * quorumMigration) {\\n\\t\\t\\trevert Draggable_QuorumNotReached(totalVotes * quorumMigration, yesVotes * QUORUM_MULTIPLIER);\\n\\t\\t}\\n\\t\\t_replaceWrapped(IERC20(successor), successor);\\n\\t\\temit MigrationSucceeded(successor, yesVotes, additionalVotes, totalVotes);\\n\\t}\\n\\n\\tfunction votingPower(address voter) external view override returns (uint256) {\\n\\t\\treturn balanceOf(voter);\\n\\t}\\n\\n\\tfunction totalVotingTokens() public view override returns (uint256) {\\n\\t\\treturn IShares(address(wrapped)).totalShares();\\n\\t}\\n\\n\\tfunction _hasVoted(address voter) internal view returns (bool) {\\n\\t\\treturn hasFlagInternal(voter, FLAG_VOTE_HINT);\\n\\t}\\n\\n\\tfunction notifyVoted(address voter) external override onlyOffer {\\n\\t\\tsetFlag(voter, FLAG_VOTE_HINT, true);\\n\\t}\\n\\n\\tfunction _beforeTokenTransfer(address from, address to,\\tuint256 amount) internal virtual override {\\n\\t\\tif (_hasVoted(from) || _hasVoted(to)) {\\n\\t\\t\\tif (_offerExists()) {\\n\\t\\t\\t\\toffer.notifyMoved(from, to, amount);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tsetFlag(from, FLAG_VOTE_HINT, false);\\n\\t\\t\\t\\tsetFlag(to, FLAG_VOTE_HINT, false);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tsuper._beforeTokenTransfer(from, to, amount);\\n\\t}\\n\\n\\tfunction _offerExists() internal view returns (bool) {\\n\\t\\treturn address(offer) != address(0) && ! offer.isKilled();\\t\\t// needs to have contract deployed AND offer needs to be not in deleted state\\n\\t}\\n}\\n\",\"keccak256\":\"0x95eed29e29ceb9a20c70a2b4867b0dbe27380762c9920aac9edea2a80aa23f10\",\"license\":\"LicenseRef-Aktionariat\"},\"src/draggable/IDraggable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"./IOffer.sol\\\";\\ninterface IDraggable is IERC20 {\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n    //////////////////////////////////////////////////////////////*/\\n    /// conversion factor has to be > 0 for this transaction.\\n    error Draggable_NotBinding();\\n    /// conversion factor has to be = 0 for this transaction.\\n    error Draggable_IsBinding();\\n    /// conversion factor can't be 0 if binding gets deactivated.\\n    error Draggable_FactorZero();\\n    /// the reported votes can't be > max voting tokens.\\n    /// @param maxVotes The max voting tokens.\\n    /// @param reportedVotes The actual reported votes.\\n    error Draggable_TooManyVotes(uint256 maxVotes, uint256 reportedVotes);\\n    /// there is still an open offer that has to be canceled first\\n    error Draggable_OpenOffer();\\n    /// For migration the quorum needs to be reached.\\n    /// @param needed The needed quorum.\\n    /// @param actual The current yes votes.\\n    error Draggable_QuorumNotReached(uint256 needed, uint256 actual);\\n    \\n    function wrapped() external view returns (IERC20);\\n    function unwrap(uint256 amount) external;\\n    function offer() external view returns (IOffer);\\n    function oracle() external view returns (address);\\n    function drag(address buyer, IERC20 currency) external;\\n    function notifyOfferEnded() external;\\n    function votingPower(address voter) external returns (uint256);\\n    function totalVotingTokens() external view returns (uint256);\\n    function notifyVoted(address voter) external;\\n    function migrate() external;\\n    function setOracle(address newOracle) external;\\n    function migrateWithExternalApproval(address successor, uint256 additionalVotes) external;\\n    function setTerms(string calldata _terms) external;\\n\\n\\n}\\n\",\"keccak256\":\"0x08c41cde4752628911a4777c71477400c8321e845ebdd66054854449c4562f13\",\"license\":\"MIT\"},\"src/draggable/IOffer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\n\\ninterface IOffer {\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n  //////////////////////////////////////////////////////////////*/\\n\\t/// Invalid msg.sender.\\n\\t/// @param sender The msg.sender of the transaction.\\n\\terror Offer_InvalidSender(address sender);\\n\\t/// Offer needs to be still open.\\n\\terror Offer_AlreadyAccepted();\\n\\t/// Offer needs to be not accepted yet.\\n\\terror Offer_NotAccepted();\\n\\t/// Sender of the offer needs to have needed funds in his account.\\n\\terror Offer_NotWellFunded();\\n\\t/// New offer not valid. `newPrice` needs to be higher than `oldPrice`.\\n\\t/// @param oldPrice Price of the old offer.\\n\\t/// @param newPrice Price of the new offer.\\n\\terror Offer_OldOfferBetter(uint256 oldPrice, uint256 newPrice);\\n\\t/// Voting needs to be still open.\\n\\terror Offer_VotingEnded();\\n\\t/// Too many (External) reported votes. `reportedVotes` needs to be less or equal to `maxVotes`.\\n\\t/// @param maxVotes The max possible votes for the token.\\n\\t/// @param reportedVotes The external reported votes + circulating supply of the token.\\n\\terror Offer_TooManyVotes(uint256 maxVotes, uint256 reportedVotes);\\n\\t/// Competing offer needs to be in the same currency.\\n\\terror Offer_OfferInWrongCurrency();\\n\\t/// Offer got already killed.\\n\\terror Offer_IsKilled();\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Function Interfaces\\n\\t//////////////////////////////////////////////////////////////*/\\n\\n\\tfunction makeCompetingOffer(IOffer newOffer) external;\\n\\n\\t// if there is a token transfer while an offer is open, the votes get transfered too\\n\\tfunction notifyMoved(address from, address to, uint256 value) external;\\n\\n\\tfunction currency() external view returns (IERC20);\\n\\n\\tfunction price() external view returns (uint256);\\n\\n\\tfunction isWellFunded() external view returns (bool);\\n\\n\\tfunction voteYes() external;\\n\\n\\tfunction voteNo() external;\\n\\n\\tfunction isKilled() external view returns (bool);\\n}\",\"keccak256\":\"0x3a0f475a851e4950132ce2861723b609156e78ed76d3c12b807ee3349be5cbfd\",\"license\":\"MIT\"},\"src/draggable/IOfferFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"./IOffer.sol\\\";\\n\\ninterface IOfferFactory {\\n\\n\\tfunction create(\\n\\t\\tbytes32 salt, address buyer, uint256 pricePerShare,\\tIERC20 currency,\\tuint256 quorum,\\tuint256 votePeriod\\n\\t) external payable returns (IOffer);\\n}\",\"keccak256\":\"0x048511f24b8e4278df38ee6f5fb038d53a7964cc90761780fb1ebb2e7825a532\",\"license\":\"MIT\"},\"src/multisig/MultiSigCloneFactory.sol\":{\"content\":\"\\n/**\\n * SPDX-License-Identifier: MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./MultiSigWalletMaster.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\ncontract MultiSigCloneFactory {\\n\\n  address immutable public multiSigImplementation;\\n\\n  event ContractCreated(address indexed contractAddress, string indexed typeName);\\n\\n  constructor(address _multiSigImplementation) {\\n    multiSigImplementation = _multiSigImplementation;\\n  }\\n  \\n  function predict(bytes32 salt) external view returns (address) {\\n    return Clones.predictDeterministicAddress(multiSigImplementation, salt);\\n  }\\n\\n  function create(address owner, bytes32 salt) external returns (MultiSigWalletMaster) {\\n    address payable instance = payable(Clones.cloneDeterministic(multiSigImplementation, salt));\\n    MultiSigWalletMaster(instance).initialize(owner);\\n    emit ContractCreated(instance, \\\"MultiSigWallet\\\");\\n    return MultiSigWalletMaster(instance);\\n  }\\n}\",\"keccak256\":\"0x839ef2d9f155eeb7dd2921395642d00b7e33ea2c4ce042b3cfca3f934cb24e0c\",\"license\":\"MIT\"},\"src/multisig/MultiSigWalletMaster.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\nimport \\\"./RLPEncode.sol\\\";\\nimport \\\"./Nonce.sol\\\";\\n\\n/**\\n * Documented in ../../doc/multisig.md\\n * Version 4: include SentEth event\\n */\\ncontract MultiSigWalletMaster is Nonce, Initializable {\\n\\n  // Version history\\n  // Version 4: added event for send value\\n  // Version 5: added version field and changed chain id\\n  uint8 public constant VERSION = 0x5;\\n\\n  mapping (address => uint8) public signers; // The addresses that can co-sign transactions and the number of signatures needed\\n\\n  uint16 public signerCount;\\n  bytes public contractId; // most likely unique id of this contract\\n\\n  event SignerChange(\\n    address indexed signer,\\n    uint8 signaturesNeeded\\n  );\\n\\n  event Transacted(\\n    address indexed toAddress,  // The address the transaction was sent to\\n    bytes4 selector, // selected operation\\n    address[] signers // Addresses of the signers used to initiate the transaction\\n  );\\n\\n  event Received(address indexed sender, uint amount);\\n  event SentEth(address indexed target, uint amount);\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n\\t//////////////////////////////////////////////////////////////*/\\n  /// Call needs to provide signature data. \\n  error Multisig_SignatureMissing();\\n  /// Sinature data isn't valid for the transaction or insufficient signer have signed the transaction. \\n  /// @param signer The ecrecover'd signer.\\n  error Multisig_InvalidSignDataOrInsufficientCosigner(address signer);\\n  /// Each signature data entry has to be from a unique address. \\n  /// @param from The address which has produced more than one signature. \\n  error Multisig_DuplicateSignature(address from);\\n  /// Signer is a contract or the 0x0 address. \\n  /// @param signer The address of the invalid signer. \\n  error Multisig_InvalidSigner(address signer);\\n  /// The multisig needs to have > 0 signers. \\n  error Multisig_InsufficientSigners();\\n  /// Sender has to be single signer or the multisig itself. \\n  /// @param sender The msg.sender of the transaction. \\n  error Multisig_UnauthorizedSender(address sender);\\n  /// Migration can't override current signer. \\n  /// param destination The address to which the signer rights should be migrated. \\n  error Multisig_InvalidDestination(address destination);\\n\\n  function initialize(address owner) external initializer {\\n    // We use the gas price field to get a unique id into our transactions.\\n    // Note that 32 bits do not guarantee that no one can generate a contract with the\\n    // same id, but it practically rules out that someone accidentally creates two\\n    // two multisig contracts with the same id, and that's all we need to prevent\\n    // replay-attacks.\\n    contractId = toBytes(uint32(uint160(address(this))));\\n    signerCount = 0;\\n    _setSigner(owner, 1); // set initial owner\\n  }\\n\\n  /**\\n   * It should be possible to store ether on this address.\\n   */\\n  receive() external payable {\\n    emit Received(msg.sender, msg.value);\\n  }\\n\\n  /**\\n   * Checks if the provided signatures suffice to sign the transaction and if the nonce is correct.\\n   */\\n  function checkSignatures(uint128 nonce, address to, uint value, bytes calldata data,\\n    uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s) external view returns (address[] memory) {\\n    bytes32 transactionHash = calculateTransactionHash(nonce, contractId, to, value, data);\\n    return verifySignatures(transactionHash, v, r, s);\\n  }\\n\\n  /**\\n   * Checks if the execution of a transaction would succeed if it was properly signed.\\n   */\\n  function checkExecution(address to, uint value, bytes calldata data) external {\\n    Address.functionCallWithValue(to, data, value);\\n    revert(\\\"Test passed. Reverting.\\\");\\n  }\\n\\n  function execute(uint128 nonce, address to, uint value, bytes calldata data, uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s) external returns (bytes memory) {\\n    bytes32 transactionHash = calculateTransactionHash(nonce, contractId, to, value, data);\\n    address[] memory found = verifySignatures(transactionHash, v, r, s);\\n    bytes memory returndata = Address.functionCallWithValue(to, data, value);\\n    flagUsed(nonce);\\n    emit Transacted(to, extractSelector(data), found);\\n    if (value > 0) {emit SentEth(to, value);}\\n    return returndata;\\n  }\\n\\n  function extractSelector(bytes calldata data) private pure returns (bytes4){\\n    if (data.length < 4){\\n      return bytes4(0);\\n    } else {\\n      return bytes4(data[0]) | (bytes4(data[1]) >> 8) | (bytes4(data[2]) >> 16) | (bytes4(data[3]) >> 24);\\n    }\\n  }\\n\\n  function toBytes (uint256 x) public pure returns (bytes memory result) {\\n    uint l = 0;\\n    uint xx = x;\\n    if (x >= 0x100000000000000000000000000000000) { x >>= 128; l += 16; }\\n    if (x >= 0x10000000000000000) { x >>= 64; l += 8; }\\n    if (x >= 0x100000000) { x >>= 32; l += 4; }\\n    if (x >= 0x10000) { x >>= 16; l += 2; }\\n    if (x >= 0x100) { x >>= 8; l += 1; }\\n    if (x > 0x0) { l += 1; }\\n    assembly {\\n      result := mload (0x40)\\n      mstore (0x40, add (result, add (l, 0x20)))\\n      mstore (add (result, l), xx)\\n      mstore (result, l)\\n    }\\n  }\\n\\n  // Note: does not work with contract creation\\n  function calculateTransactionHash(uint128 sequence, bytes memory id, address to, uint value, bytes calldata data)\\n    internal view returns (bytes32){\\n    bytes[] memory all = new bytes[](9);\\n    all[0] = toBytes(sequence); // sequence number instead of nonce\\n    all[1] = id; // contract id instead of gas price\\n    all[2] = bytes(\\\"\\\\x82\\\\x52\\\\x08\\\"); // 21000 gas limitation\\n    all[3] = abi.encodePacked (bytes1 (0x94), to);\\n    all[4] = toBytes(value);\\n    all[5] = data;\\n    all[6] = toBytes(block.chainid);\\n    all[7] = new bytes(0);\\n    for (uint i = 0; i<8; i++){\\n      if (i != 2 && i!= 3) {\\n        all[i] = RLPEncode.encodeBytes(all[i]);\\n      }\\n    }\\n    all[8] = all[7];\\n    return keccak256(RLPEncode.encodeList(all));\\n  }\\n\\n  function verifySignatures(bytes32 transactionHash, uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s)\\n    public view returns (address[] memory) {\\n    address[] memory found = new address[](r.length);\\n    if (r.length == 0 ) {\\n      revert Multisig_SignatureMissing();\\n    }\\n    for (uint i = 0; i < r.length; i++) {\\n      address signer = ecrecover(transactionHash, v[i], r[i], s[i]);\\n      uint8 signaturesNeeded = signers[signer];\\n      if (signaturesNeeded == 0 || signaturesNeeded > r.length) {\\n        revert Multisig_InvalidSignDataOrInsufficientCosigner(signer);\\n      }\\n      found[i] = signer;\\n    }\\n    requireNoDuplicates(found);\\n    return found;\\n  }\\n\\n  function requireNoDuplicates(address[] memory found) private pure {\\n    for (uint i = 0; i < found.length; i++) {\\n      for (uint j = i+1; j < found.length; j++) {\\n        if (found[i] == found[j]) {\\n          revert Multisig_DuplicateSignature(found[i]);\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Call this method through execute\\n   */\\n  function setSigner(address signer, uint8 signaturesNeeded) external authorized {\\n    _setSigner(signer, signaturesNeeded);\\n    if (signerCount == 0) {\\n      revert Multisig_InsufficientSigners();\\n    }\\n  }\\n\\n  function migrate(address destination) external {\\n    _migrate(msg.sender, destination);\\n  }\\n\\n  function migrate(address source, address destination) external authorized {\\n    _migrate(source, destination);\\n  }\\n\\n  function _migrate(address source, address destination) private {\\n    // do not overwrite existing signer!\\n    if (signers[destination] > 0 ) {\\n      revert Multisig_InvalidDestination(destination);\\n    }\\n    _setSigner(destination, signers[source]);\\n    _setSigner(source, 0);\\n  }\\n\\n  function _setSigner(address signer, uint8 signaturesNeeded) private {\\n    if (Address.isContract(signer) || signer == address(0x0)) {\\n      revert Multisig_InvalidSigner(signer);\\n    }\\n    uint8 prevValue = signers[signer];\\n    signers[signer] = signaturesNeeded;\\n    if (prevValue > 0 && signaturesNeeded == 0){\\n      signerCount--;\\n    } else if (prevValue == 0 && signaturesNeeded > 0){\\n      signerCount++;\\n    }\\n    emit SignerChange(signer, signaturesNeeded);\\n  }\\n\\n  modifier authorized() {\\n    if (address(this) != msg.sender && signers[msg.sender] != 1) {\\n      revert Multisig_UnauthorizedSender(msg.sender);\\n    }\\n    _;\\n  }\\n\\n}\",\"keccak256\":\"0x19784becd152b5cf78b7951c0a53b5168c07c59af0f17cb1c51da97cbaa8a1c7\",\"license\":\"MIT\"},\"src/multisig/Nonce.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\ncontract Nonce {\\n\\n    uint256 public constant MAX_INCREASE = 100;\\n    \\n    uint256 private compound;\\n    \\n    constructor(){\\n        setBoth(128, 0);\\n    }\\n    \\n    /**\\n     * The next recommended nonce, which is the highest nonce ever used plus one.\\n     * The initial nonce is 129.\\n     */\\n    function nextNonce() external view returns (uint128){\\n        return getMax() + 1;\\n    }\\n\\n    /**\\n     * Returns whether the provided nonce can be used.\\n     * For the 100 nonces in the interval [nextNonce(), nextNonce + 99], this is always true.\\n     * For the nonces in the interval [nextNonce() - 129, nextNonce() - 1], this is true for the nonces that have not been used yet.\\n     */ \\n    function isFree(uint128 nonce) external view returns (bool){\\n        uint128 max = getMax();\\n        return isValidHighNonce(max, nonce) || isValidLowNonce(max, getRegister(), nonce);\\n    }\\n\\n    /**\\n     * Flags the given nonce as used.\\n     * Reverts if the provided nonce is not free.\\n     */\\n    function flagUsed(uint128 nonce) internal {\\n        uint256 comp = compound;\\n        uint128 max = uint128(comp);\\n        uint128 reg = uint128(comp >> 128);\\n        if (isValidHighNonce(max, nonce)){\\n            setBoth(nonce, ((reg << 1) | 0x1) << (nonce - max - 1));\\n        } else if (isValidLowNonce(max, reg, nonce)){\\n            setBoth(max, uint128(reg | 0x1 << (max - nonce - 1)));\\n        } else {\\n            revert(\\\"used\\\");\\n        }\\n    }\\n    \\n    function getMax() private view returns (uint128) {\\n        return uint128(compound);\\n    }\\n    \\n    function getRegister() private view returns (uint128) {\\n        return uint128(compound >> 128);\\n    }\\n    \\n    function setBoth(uint128 max, uint128 reg) private {\\n        compound = uint256(reg) << 128 | max;\\n    }\\n\\n    function isValidHighNonce(uint128 max, uint128 nonce) private pure returns (bool){\\n        return nonce > max && nonce <= max + MAX_INCREASE;\\n    }\\n\\n    function isValidLowNonce(uint128 max, uint128 reg, uint128 nonce) private pure returns (bool){\\n        uint256 diff = max - nonce;\\n        return diff > 0 && diff <= 128 && ((0x1 << (diff - 1)) & reg == 0);\\n    }\\n    \\n}\",\"keccak256\":\"0xa4a710e240881889df352cb42fd3399b464d66013ebefdc631a0229c6b39da1d\",\"license\":\"LicenseRef-Aktionariat\"},\"src/multisig/RLPEncode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n/**\\n * @title RLPEncode\\n * @dev A simple RLP encoding library.\\n * @author Bakaoh\\n */\\nlibrary RLPEncode {\\n    /*\\n     * Internal functions\\n     */\\n\\n    /**\\n     * @dev RLP encodes a byte string.\\n     * @param self The byte string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function encodeBytes(bytes memory self) internal pure returns (bytes memory) {\\n        bytes memory encoded;\\n        if (self.length == 1 && uint8(self[0]) < 128) {\\n            encoded = self;\\n        } else {\\n            encoded = abi.encodePacked(encodeLength(self.length, 128), self);\\n        }\\n        return encoded;\\n    }\\n\\n    /**\\n     * @dev RLP encodes a list of RLP encoded byte byte strings.\\n     * @param self The list of RLP encoded byte strings.\\n     * @return The RLP encoded list of items in bytes.\\n     */\\n    function encodeList(bytes[] memory self) internal pure returns (bytes memory) {\\n        bytes memory list = flatten(self);\\n        return abi.encodePacked(encodeLength(list.length, 192), list);\\n    }\\n\\n    /*\\n     * Private functions\\n     */\\n\\n    /**\\n     * @dev Encode the first byte, followed by the `len` in binary form if `length` is more than 55.\\n     * @param len The length of the string or the payload.\\n     * @param offset 128 if item is string, 192 if item is list.\\n     * @return RLP encoded bytes.\\n     */\\n    function encodeLength(uint len, uint offset) private pure returns (bytes memory) {\\n        bytes memory encoded;\\n        if (len < 56) {\\n            encoded = new bytes(1);\\n            encoded[0] = bytes32(len + offset)[31];\\n        } else {\\n            uint lenLen;\\n            uint i = 1;\\n            while (len >= i) {\\n                lenLen++;\\n                i <<= 8;\\n            }\\n\\n            encoded = new bytes(lenLen + 1);\\n            encoded[0] = bytes32(lenLen + offset + 55)[31];\\n            for(i = 1; i <= lenLen; i++) {\\n                encoded[i] = bytes32((len / (256**(lenLen-i))) % 256)[31];\\n            }\\n        }\\n        return encoded;\\n    }\\n\\n    /**\\n     * @dev Copies a piece of memory to another location.\\n     * @notice From: https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol.\\n     * @param _dest Destination location.\\n     * @param _src Source location.\\n     * @param _len Length of memory to copy.\\n     */\\n    function memcpy(uint _dest, uint _src, uint _len) private pure {\\n        uint dest = _dest;\\n        uint src = _src;\\n        uint len = _len;\\n\\n        for(; len >= 32; len -= 32) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        uint mask = type(uint).max >> (len << 3);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /**\\n     * @dev Flattens a list of byte strings into one byte string.\\n     * @notice From: https://github.com/sammayo/solidity-rlp-encoder/blob/master/RLPEncode.sol.\\n     * @param _list List of byte strings to flatten.\\n     * @return The flattened byte string.\\n     */\\n    function flatten(bytes[] memory _list) private pure returns (bytes memory) {\\n        if (_list.length == 0) {\\n            return new bytes(0);\\n        }\\n\\n        uint len;\\n        uint i;\\n        for (i = 0; i < _list.length; i++) {\\n            len += _list[i].length;\\n        }\\n\\n        bytes memory flattened = new bytes(len);\\n        uint flattenedPtr;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { flattenedPtr := add(flattened, 0x20) }\\n\\n        for(i = 0; i < _list.length; i++) {\\n            bytes memory item = _list[i];\\n            \\n            uint listPtr;\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly { listPtr := add(item, 0x20)}\\n\\n            memcpy(flattenedPtr, listPtr, item.length);\\n            flattenedPtr += item.length;\\n        }\\n\\n        return flattened;\\n    }\\n\\n}\",\"keccak256\":\"0x9b20150359fe4f8fe048881114ba275d2f96ae73c2ca5fcfac1101fd34d9f7a1\",\"license\":\"MIT\"},\"src/recovery/ERC20Recoverable.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/ERC20Flaggable.sol\\\";\\nimport \\\"./IRecoveryHub.sol\\\";\\nimport \\\"./IRecoverable.sol\\\";\\n\\n/**\\n * @title Recoverable\\n * In case of tokens that represent real-world assets such as shares of a company, one needs a way\\n * to handle lost private keys. With physical certificates, courts can declare share certificates as\\n * invalid so the company can issue replacements. Here, we want a solution that does not depend on\\n * third parties to resolve such cases. Instead, when someone has lost a private key, he can use the\\n * declareLost function on the recovery hub to post a deposit and claim that the shares assigned to a\\n * specific address are lost.\\n * If an attacker trying to claim shares belonging to someone else, they risk losing the deposit\\n * as it can be claimed at anytime by the rightful owner.\\n * Furthermore, if \\\"getClaimDeleter\\\" is defined in the subclass, the returned address is allowed to\\n * delete claims, returning the collateral. This can help to prevent obvious cases of abuse of the claim\\n * function, e.g. cases of front-running.\\n * Most functionality is implemented in a shared RecoveryHub.\\n */\\nabstract contract ERC20Recoverable is ERC20Flaggable, IRecoverable {\\n\\n    uint8 private constant FLAG_CLAIM_PRESENT = 10;\\n\\n    // ERC-20 token that can be used as collateral or 0x0 if disabled\\n    IERC20 public customCollateralAddress;\\n    // Rate the custom collateral currency is multiplied to be valued like one share.\\n    uint256 public customCollateralRate;\\n\\n    uint256 constant CLAIM_PERIOD = 180 days;\\n\\n    IRecoveryHub public override immutable recovery;\\n\\n    constructor(IRecoveryHub recoveryHub){\\n        recovery = recoveryHub;\\n    }\\n\\n    modifier onlyRecovery {\\n        _checkSender(address(recovery));\\n        _;\\n    }\\n\\n    /**\\n     * Returns the collateral rate for the given collateral type and 0 if that type\\n     * of collateral is not accepted. By default, only the token itself is accepted at\\n     * a rate of 1:1.\\n     *\\n     * Subclasses should override this method if they want to add additional types of\\n     * collateral.\\n     */\\n    function getCollateralRate(IERC20 collateralType) public override virtual view returns (uint256) {\\n        if (address(collateralType) == address(this)) {\\n            return 1;\\n        } else if (collateralType == customCollateralAddress) {\\n            return customCollateralRate;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function claimPeriod() external pure override returns (uint256){\\n        return CLAIM_PERIOD;\\n    }\\n\\n    /**\\n     * Allows subclasses to set a custom collateral besides the token itself.\\n     * The collateral must be an ERC-20 token that returns true on successful transfers and\\n     * throws an exception or returns false on failure.\\n     * Also, do not forget to multiply the rate in accordance with the number of decimals of the collateral.\\n     * For example, rate should be 7*10**18 for 7 units of a collateral with 18 decimals.\\n     */\\n    function _setCustomClaimCollateral(IERC20 collateral, uint256 rate) internal {\\n        customCollateralAddress = collateral;\\n        if (address(customCollateralAddress) == address(0)) {\\n            customCollateralRate = 0; // disabled\\n        } else {\\n            if (rate == 0) {\\n                revert Recoverable_RateZero();\\n            }\\n            customCollateralRate = rate;\\n        }\\n    }\\n\\n    function getClaimDeleter() virtual public view returns (address);\\n\\n    function transfer(address recipient, uint256 amount) override(ERC20Flaggable, IERC20) virtual public returns (bool) {\\n        super.transfer(recipient, amount); // no need for safe transfer, as it's our own token\\n        if (hasFlagInternal(msg.sender, FLAG_CLAIM_PRESENT)){\\n            recovery.clearClaimFromToken(msg.sender);\\n        }\\n        return true;\\n    }\\n\\n    function notifyClaimMade(address target) external override onlyRecovery {\\n        setFlag(target, FLAG_CLAIM_PRESENT, true);\\n    }\\n\\n    function notifyClaimDeleted(address target) external override onlyRecovery {\\n        setFlag(target, FLAG_CLAIM_PRESENT, false);\\n    }\\n\\n    function deleteClaim(address lostAddress) external {\\n        _checkSender(getClaimDeleter());\\n        recovery.deleteClaim(lostAddress);\\n    }\\n\\n    function recover(address oldAddress, address newAddress) external override onlyRecovery {\\n        _transfer(oldAddress, newAddress, balanceOf(oldAddress));\\n    }\\n\\n}\",\"keccak256\":\"0x2ddeefacae4bc17a7dadbe6ce0e3389d37de54ab74aed4d085c66b99e9ae62c5\",\"license\":\"LicenseRef-Aktionariat\"},\"src/recovery/IRecoverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"./IRecoveryHub.sol\\\";\\n\\ninterface IRecoverable is IERC20{\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n    //////////////////////////////////////////////////////////////*/\\n    /// The new custom claim collateral rate has to be always > 0. \\n    error Recoverable_RateZero();\\n\\n    // returns the recovery hub\\n    function recovery() external view returns (IRecoveryHub);\\n\\n    function claimPeriod() external view returns (uint256);\\n    \\n    function notifyClaimMade(address target) external;\\n\\n    function notifyClaimDeleted(address target) external;\\n\\n    function getCollateralRate(IERC20 collateral) external view returns(uint256);\\n\\n    function recover(address oldAddress, address newAddress) external;\\n\\n}\",\"keccak256\":\"0xaf83855010ac370e8651b36c899efb59ce895d77bfd9429cd4d9db1c4d32e0bf\",\"license\":\"MIT\"},\"src/recovery/IRecoveryHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IRecoverable.sol\\\";\\nimport \\\"../ERC20/IERC20.sol\\\";\\n\\ninterface IRecoveryHub {\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n    //////////////////////////////////////////////////////////////*/\\n    /// Recovery can be disabled per address.\\n    /// @param lostAddress The address for which the recovery is disabled.\\n    error RecoveryHub_RecoveryDisabled(address lostAddress);\\n    /// No valid collateral type\\n    /// @param collateralType The address of collateral type token\\n    error RecoveryHub_BadCollateral(IERC20 collateralType);\\n    /// No token to able to recover on the lost address\\n    /// @param token The token address which is checked for recovery.\\n    /// @param lostAddress The lost address.\\n    error RecoveryHub_NothingToRecover(IERC20 token, address lostAddress);\\n    /// The was already a claim for this token and address.\\n    /// @param token The token address.\\n    /// @param lostAddress The lost address.\\n    error RecoveryHub_AlreadyClaimed(IERC20 token, address lostAddress);\\n    /// Sender has to be claimant\\n    /// @param sender The msg.sender of the call\\n    error RecoveryHub_InvalidSender(address sender);\\n    /// No claim for this address exists\\n    /// @param lostAddress The checked address \\n    error RecoveryHub_ClaimNotFound(address lostAddress);\\n    /// Recover can only be called after the claim period\\n    /// @param claimPeriodEnd The timestamp when the period ends\\n    /// @param currentTimestamp The block timestamp of the call\\n    error RecoveryHub_InClaimPeriod(uint256 claimPeriodEnd, uint256 currentTimestamp);\\n\\n    function setRecoverable(bool flag) external;\\n    \\n    // deletes claim and transfers collateral back to claimer\\n    function deleteClaim(address target) external;\\n\\n    // clears claim and transfers collateral to holder\\n    function clearClaimFromToken(address holder) external;\\n\\n    function clearClaimFromUser(IRecoverable token) external;\\n\\n}\",\"keccak256\":\"0x26c74df59e64d9426903db28442f955e778f90bb737e7e5076d3ef42e2859624\",\"license\":\"MIT\"},\"src/recovery/RecoveryHub.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IRecoveryHub.sol\\\";\\nimport \\\"./IRecoverable.sol\\\";\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"../utils/SafeERC20.sol\\\";\\n\\ncontract RecoveryHub is IRecoveryHub {\\n\\n    using SafeERC20 for IERC20;\\n\\n    // A struct that represents a claim made\\n    struct Claim {\\n        address claimant; // the person who created the claim\\n        uint256 collateral; // the amount of collateral deposited\\n        uint256 timestamp;  // the timestamp of the block in which the claim was made\\n        IERC20 currencyUsed; // The currency (XCHF) can be updated, we record the currency used for every request\\n    }\\n\\n    mapping(IRecoverable => mapping (address => Claim)) public claims; // there can be at most one claim per token and claimed address\\n    mapping(address => bool) public recoveryDisabled; // disable claimability (e.g. for long term storage)\\n\\n    event ClaimMade(IRecoverable indexed token, address indexed lostAddress, address indexed claimant, uint256 balance);\\n    event ClaimCleared(IRecoverable indexed token, address indexed lostAddress, uint256 collateral);\\n    event ClaimDeleted(IRecoverable indexed token, address indexed lostAddress, address indexed claimant, uint256 collateral);\\n    event ClaimResolved(IRecoverable indexed token, address indexed lostAddress, address indexed claimant, uint256 collateral);\\n\\n    function setRecoverable(bool enabled) external override {\\n        recoveryDisabled[msg.sender] = !enabled;\\n    }\\n\\n    /**\\n     * Some users might want to disable claims for their address completely.\\n     * For example if they use a deep cold storage solution or paper wallet.\\n     */\\n    function isRecoverable(address target) public view returns (bool) {\\n        return !recoveryDisabled[target];\\n    }\\n\\n  /** Anyone can declare that the private key to a certain address was lost by calling declareLost\\n    * providing a deposit/collateral. There are three possibilities of what can happen with the claim:\\n    * 1) The claim period expires and the claimant can get the deposit and the shares back by calling recover\\n    * 2) The \\\"lost\\\" private key is used at any time to call clearClaim. In that case, the claim is deleted and\\n    *    the deposit sent to the shareholder (the owner of the private key). It is recommended to call recover\\n    *    whenever someone transfers funds to let claims be resolved automatically when the \\\"lost\\\" private key is\\n    *    used again.\\n    * 3) The owner deletes the claim and assigns the deposit to the claimant. This is intended to be used to resolve\\n    *    disputes. Generally, using this function implies that you have to trust the issuer of the tokens to handle\\n    *    the situation well. As a rule of thumb, the contract owner should assume the owner of the lost address to be the\\n    *    rightful owner of the deposit.\\n    * It is highly recommended that the owner observes the claims made and informs the owners of the claimed addresses\\n    * whenever a claim is made for their address (this of course is only possible if they are known to the owner, e.g.\\n    * through a shareholder register).\\n    */\\n    function declareLost(IRecoverable token, IERC20 collateralType, address lostAddress) external {\\n        if(recoveryDisabled[lostAddress]) {\\n            revert RecoveryHub_RecoveryDisabled(lostAddress);\\n        }\\n        uint256 collateralRate = IRecoverable(token).getCollateralRate(collateralType);\\n        if (collateralRate == 0) {\\n            // if the there is no rate the collateral isn't accepted\\n            revert RecoveryHub_BadCollateral(collateralType);\\n        }\\n        uint256 balance = IERC20(token).balanceOf(lostAddress);\\n        if (balance == 0) {\\n            // if lost address has no balance, there also nothing to recover\\n            revert RecoveryHub_NothingToRecover(token, lostAddress);\\n        }\\n        uint256 collateral = balance * collateralRate;\\n        IERC20 currency = IERC20(collateralType);\\n        if (claims[token][lostAddress].collateral > 0) {\\n            revert RecoveryHub_AlreadyClaimed(token, lostAddress);\\n        }\\n\\n        claims[token][lostAddress] = Claim({\\n            claimant: msg.sender,\\n            collateral: collateral,\\n            // rely on time stamp is ok, no exact time stamp needed\\n            // solhint-disable-next-line not-rely-on-time\\n            timestamp: block.timestamp,\\n            currencyUsed: collateralType\\n        });\\n        emit ClaimMade(token, lostAddress, msg.sender, balance);\\n        // errors like no allowance/no balance revert generally in the transferFrom\\n        currency.safeTransferFrom(msg.sender, address(this), collateral);\\n        IRecoverable(token).notifyClaimMade(lostAddress);\\n    }\\n\\n    function getClaimant(IRecoverable token, address lostAddress) external view returns (address) {\\n        return claims[token][lostAddress].claimant;\\n    }\\n\\n    function getCollateral(IRecoverable token, address lostAddress) external view returns (uint256) {\\n        return claims[token][lostAddress].collateral;\\n    }\\n\\n    function getCollateralType(IRecoverable token, address lostAddress) external view returns (IERC20) {\\n        return claims[token][lostAddress].currencyUsed;\\n    }\\n\\n    function getTimeStamp(IRecoverable token, address lostAddress) external view returns (uint256) {\\n        return claims[token][lostAddress].timestamp;\\n    }\\n\\n    /**\\n     * Clears a claim after the key has been found again and assigns the collateral to the \\\"lost\\\" address.\\n     * This is the price an adverse claimer pays for filing a false claim and makes it risky to do so.\\n     */\\n    function clearClaimFromToken(address holder) external override {\\n        clearClaim(IRecoverable(msg.sender), holder);\\n    }\\n\\n    function clearClaimFromUser(IRecoverable token) external override {\\n        clearClaim(token, msg.sender);\\n    }\\n\\n    function clearClaim(IRecoverable token, address holder) private {\\n        Claim memory claim = claims[token][holder];\\n        if (claim.collateral > 0){\\n            IERC20 currency = IERC20(claim.currencyUsed);\\n            delete claims[token][holder];\\n            currency.safeTransfer(holder, claim.collateral);\\n            emit ClaimCleared(token, holder, claim.collateral);\\n        }\\n        IRecoverable(token).notifyClaimDeleted(holder);\\n    }\\n\\n   /**\\n    * After the claim period has passed, the claimant can call this function to send the\\n    * tokens on the lost address as well as the collateral to himself.\\n    */\\n    function recover(IRecoverable token, address lostAddress) external {\\n        Claim memory claim = claims[token][lostAddress];\\n        uint256 collateral = claim.collateral;\\n        if (collateral == 0) {\\n            revert RecoveryHub_ClaimNotFound(lostAddress);\\n        }\\n        address claimant = claim.claimant;\\n        if (claimant != msg.sender) {\\n            revert RecoveryHub_InvalidSender(msg.sender);\\n        }\\n        // rely on time stamp is ok, no exact time stamp needed\\n        // solhint-disable-next-line not-rely-on-time\\n        uint256 claimPeriodEnd = claim.timestamp + IRecoverable(token).claimPeriod();\\n        if (claimPeriodEnd > block.timestamp) {\\n            revert RecoveryHub_InClaimPeriod(claimPeriodEnd, block.timestamp);\\n        }\\n        delete claims[token][lostAddress];\\n        emit ClaimResolved(token, lostAddress, claimant, collateral);\\n        IRecoverable(token).notifyClaimDeleted(lostAddress);\\n        IERC20 currency = IERC20(claim.currencyUsed);\\n        currency.safeTransfer(claimant, collateral);\\n        IRecoverable(token).recover(lostAddress, claimant);\\n    }\\n\\n    /**\\n     * The token contract can delete claims. It is the responsibility of the token contract to make sure\\n     * only authorized parties can trigger such a call.\\n     */\\n    function deleteClaim(address lostAddress) external override {\\n        IRecoverable token = IRecoverable(msg.sender);\\n        Claim memory claim = claims[token][lostAddress];\\n        IERC20 currency = IERC20(claim.currencyUsed);\\n        if (claim.collateral == 0) {\\n            revert RecoveryHub_ClaimNotFound(lostAddress);\\n        }\\n        delete claims[token][lostAddress];\\n        emit ClaimDeleted(token, lostAddress, claim.claimant, claim.collateral);\\n        IRecoverable(token).notifyClaimDeleted(lostAddress);\\n        currency.safeTransfer(claim.claimant, claim.collateral);\\n    }\\n\\n}\",\"keccak256\":\"0x41ac60e2522c14a9bb1b40989bc1dc1e1e08d57b6287f4ae4848aaacb841023f\",\"license\":\"LicenseRef-Aktionariat\"},\"src/shares/AllowlistDraggableShares.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/ERC20Allowlistable.sol\\\";\\nimport \\\"./DraggableShares.sol\\\";\\n\\ncontract AllowlistDraggableShares is DraggableShares, ERC20Allowlistable {\\n\\n  constructor(\\n    string memory _terms,\\n    DraggableParams memory _params,\\n    IRecoveryHub _recoveryHub,\\n    IOfferFactory _offerFactory,\\n    address _oracle,\\n    Permit2Hub _permit2Hub\\n  )\\n    DraggableShares(_terms, _params, _recoveryHub, _offerFactory, _oracle, _permit2Hub)\\n    Ownable(_oracle)\\n  {\\n    // initialization is done in ERC20Allowlistbale and DraggableShares\\n  }\\n\\n  function transfer(address to, uint256 value) virtual override(ERC20Flaggable, DraggableShares) public returns (bool) {\\n      return super.transfer(to, value);\\n  }\\n  \\n  function _beforeTokenTransfer(address from, address to, uint256 amount) virtual override(ERC20Allowlistable, DraggableShares) internal {\\n    super._beforeTokenTransfer(from, to, amount);\\n  }\\n\\n    function allowance(address owner, address spender) public view override(DraggableShares, ERC20Flaggable) returns (uint256) {\\n        return super.allowance(owner,spender);\\n  }\\n\\n}\",\"keccak256\":\"0xd5bca815ec6f838e24a4df1a8eed1ea63cf8a597401541807857462d4651df42\",\"license\":\"LicenseRef-Aktionariat\"},\"src/shares/AllowlistShares.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"../recovery/ERC20Recoverable.sol\\\";\\nimport \\\"../ERC20/ERC20Allowlistable.sol\\\";\\nimport \\\"./Shares.sol\\\";\\n\\ncontract AllowlistShares is Shares, ERC20Allowlistable {\\n\\n  constructor(\\n    string memory _symbol,\\n    string memory _name,\\n    string memory _terms,\\n    uint256 _totalShares,\\n    IRecoveryHub _recoveryHub,\\n    address _owner,\\n    Permit2Hub _permit2Hub\\n  )\\n    Shares(_symbol, _name, _terms, _totalShares, _owner, _recoveryHub, _permit2Hub)\\n    ERC20Allowlistable()\\n  {\\n    // initialization in shares\\n  }\\n\\n  function transfer(address recipient, uint256 amount) override(ERC20Flaggable, Shares) virtual public returns (bool) {\\n    return super.transfer(recipient, amount); \\n  }\\n\\n  function _mint(address account, uint256 amount) internal override(ERC20Flaggable, Shares) {\\n      super._mint(account, amount);\\n  }\\n\\n  function _beforeTokenTransfer(address from, address to, uint256 amount) virtual override(ERC20Flaggable, ERC20Allowlistable) internal {\\n    super._beforeTokenTransfer(from, to, amount);\\n  }\\n\\n  function allowance(address owner, address spender) public view override(Shares, ERC20Flaggable) returns (uint256) {\\n        return super.allowance(owner,spender);\\n  }\\n\\n}\",\"keccak256\":\"0x0d5fe80ab611cda3d5f069e18dafc3897552ac18d14839f96b8d00029db5e88c\",\"license\":\"LicenseRef-Aktionariat\"},\"src/shares/DraggableShares.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"../recovery/ERC20Recoverable.sol\\\";\\nimport \\\"../draggable/ERC20Draggable.sol\\\";\\nimport \\\"../ERC20/ERC20PermitLight.sol\\\";\\nimport \\\"../ERC20/ERC20Permit2.sol\\\";\\n\\n/**\\n * @title CompanyName AG Shares SHA\\n * @author Luzius Meisser, luzius@aktionariat.com\\n *\\n * This is an ERC-20 token representing share tokens of CompanyName AG that are bound to\\n * a shareholder agreement that can be found at the URL defined in the constant 'terms'.\\n */\\ncontract DraggableShares is ERC20Draggable, ERC20Recoverable, ERC20PermitLight, ERC20Permit2 {\\n\\n    // Version history:\\n    // 1: pre permit\\n    // 2: includes permit\\n    // 3: added permit2 allowance, VERSION field\\n    uint8 public constant VERSION = 3;\\n\\n    string public terms;\\n\\n    /// Event when the terms are changed with setTerms().\\n    event ChangeTerms(string terms); \\n\\n    constructor(\\n        string memory _terms,\\n        DraggableParams memory _params,\\n        IRecoveryHub _recoveryHub,\\n        IOfferFactory _offerFactory,\\n        address _oracle,\\n        Permit2Hub _permit2Hub\\n    )\\n        ERC20Draggable(_params, _offerFactory, _oracle)\\n        ERC20Recoverable(_recoveryHub)\\n        ERC20PermitLight() \\n        ERC20Permit2(_permit2Hub)\\n\\n    {\\n        terms = _terms; // to update the terms, migrate to a new contract. That way it is ensured that the terms can only be updated when the quorom agrees.\\n        _recoveryHub.setRecoverable(false);\\n    }\\n\\n    function transfer(address to, uint256 value) virtual override(IERC20, ERC20Flaggable, ERC20Recoverable) public returns (bool) {\\n        return super.transfer(to, value);\\n    }\\n\\n    /**\\n     * Let the oracle act as deleter of invalid claims. In earlier versions, this was referring to the claim deleter\\n     * of the wrapped token. But that stops working after a successful acquisition as the acquisition currency most\\n     * likely does not have a claim deleter.\\n     */\\n    function getClaimDeleter() public view override returns (address) {\\n        return oracle;\\n    }\\n\\n    function getCollateralRate(IERC20 collateralType) public view override returns (uint256) {\\n        uint256 rate = super.getCollateralRate(collateralType);\\n        if (rate > 0) {\\n            return rate;\\n        } else {\\n            // as long as it is binding, the conversion rate is 1:1\\n            uint256 factor = isBinding() ? 1 : unwrapConversionFactor;\\n            if (address(collateralType) == address(wrapped)) {\\n                // allow wrapped token as collateral\\n                return factor;\\n            } else {\\n                // If the wrapped contract allows for a specific collateral, we should too.\\n                // If the wrapped contract is not IRecoverable, we will fail here, but would fail anyway.\\n                return IRecoverable(address(wrapped)).getCollateralRate(collateralType) * factor;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice This function allows the oracle to set the terms.\\n     * @param _terms The new terms.\\n     */\\n    function setTerms(string calldata _terms) external override onlyOracle {\\n        terms = _terms;\\n        emit ChangeTerms(terms);\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) virtual override(ERC20Flaggable, ERC20Draggable) internal {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n\\n    function allowance(address owner, address spender) public view virtual override(ERC20Permit2, ERC20Flaggable, IERC20) returns (uint256) {\\n        return super.allowance(owner, spender);\\n    }\\n\\n}\",\"keccak256\":\"0x7e28af30fa02c86186147120de279f9302423522e9b85aacac49af0c88b1e651\",\"license\":\"LicenseRef-Aktionariat\"},\"src/shares/IShares.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\n\\ninterface IShares is IERC20 {\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n\\t//////////////////////////////////////////////////////////////*/\\n\\t/// New total shares can't be below current valid supply\\n\\t/// @param totalSupply  The current valid supply. \\n\\t/// @param newTotalShares  The new max shares. \\n\\terror Shares_InvalidTotalShares(uint256 totalSupply, uint256 newTotalShares);\\n\\t/// Array lengths have to be equal. \\n\\t/// @param targets Array length of targets. \\n\\t/// @param amount Array length of amounts. \\n\\terror Shares_UnequalLength(uint256 targets, uint256 amount);\\n\\t/// It isn't possible to mint more share token than max shares in existens. \\n\\t/// @param totalShares The max amount of shares. \\n\\t/// @param needed The max amount of shares needed (current valid supply + new mint amount). \\n\\terror Shares_InsufficientTotalShares(uint256 totalShares, uint256 needed);\\n\\n\\tfunction burn(uint256) external;\\n\\n\\tfunction totalShares() external view returns (uint256);\\n}\",\"keccak256\":\"0x7d8fa5ebf42ded9015f436673842fa0a7b0c9c4393c9ab0386c82cdadefee904\",\"license\":\"MIT\"},\"src/shares/Shares.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/ERC20Named.sol\\\";\\nimport \\\"../ERC20/ERC20PermitLight.sol\\\";\\nimport \\\"../ERC20/ERC20Permit2.sol\\\";\\nimport \\\"../ERC20/IERC677Receiver.sol\\\";\\nimport \\\"../recovery/ERC20Recoverable.sol\\\";\\nimport \\\"../shares/IShares.sol\\\";\\n\\n/**\\n * @title CompanyName AG Shares\\n * @author Luzius Meisser, luzius@aktionariat.com\\n *\\n * These tokens represent ledger-based securities according to article 973d of the Swiss Code of Obligations.\\n * This smart contract serves as an ownership registry, enabling the token holders to register them as\\n * shareholders in the issuer's shareholder registry. This is equivalent to the traditional system\\n * of having physical share certificates kept at home by the shareholders and a shareholder registry run by\\n * the company. Just like with physical certificates, the owners of the tokens are the owners of the shares.\\n * However, in order to exercise their rights (for example receive a dividend), shareholders must register\\n * themselves. For example, in case the company pays out a dividend to a previous shareholder because\\n * the current shareholder did not register, the company cannot be held liable for paying the dividend to\\n * the \\\"wrong\\\" shareholder. In relation to the company, only the registered shareholders count as such.\\n */\\ncontract Shares is ERC20Recoverable, ERC20Named, ERC20PermitLight, ERC20Permit2, IShares{\\n\\n    // Version history:\\n    // 1: everything before 2022-07-19\\n    // 2: added mintMany and mintManyAndCall, added VERSION field\\n    // 3: added permit\\n    // 4: refactor to custom errors, added allowance for permit2\\n    uint8 public constant VERSION = 4;\\n\\n    string public terms;\\n\\n    uint256 public override totalShares; // total number of shares, maybe not all tokenized\\n    uint256 public invalidTokens;\\n\\n    event Announcement(string message);\\n    event TokensDeclaredInvalid(address indexed holder, uint256 amount, string message);\\n    event ChangeTerms(string terms);\\n    event ChangeTotalShares(uint256 total);\\n\\n    constructor(\\n        string memory _symbol,\\n        string memory _name,\\n        string memory _terms,\\n        uint256 _totalShares,\\n        address _owner,\\n        IRecoveryHub _recoveryHub,\\n        Permit2Hub _permit2Hub\\n    )\\n        ERC20Named(_symbol, _name, 0, _owner) \\n        ERC20Recoverable(_recoveryHub)\\n        ERC20PermitLight()\\n        ERC20Permit2(_permit2Hub)\\n    {\\n        totalShares = _totalShares;\\n        terms = _terms;\\n        invalidTokens = 0;\\n        _recoveryHub.setRecoverable(false); \\n    }\\n\\n    function setTerms(string memory _terms) external onlyOwner {\\n        terms = _terms;\\n        emit ChangeTerms(_terms);\\n    }\\n\\n    /**\\n     * Declares the number of total shares, including those that have not been tokenized and those\\n     * that are held by the company itself. This number can be substiantially higher than totalSupply()\\n     * in case not all shares have been tokenized. Also, it can be lower than totalSupply() in case some\\n     * tokens have become invalid.\\n     */\\n    function setTotalShares(uint256 _newTotalShares) external onlyOwner() {\\n        uint256 _totalValidSupply = totalValidSupply();\\n        if (_newTotalShares < _totalValidSupply) {\\n            revert Shares_InvalidTotalShares(_totalValidSupply, _newTotalShares);\\n            \\n        }\\n        totalShares = _newTotalShares;\\n        emit ChangeTotalShares(_newTotalShares);\\n    }\\n\\n    /**\\n     * Allows the issuer to make public announcements that are visible on the blockchain.\\n     */\\n    function announcement(string calldata message) external onlyOwner() {\\n        emit Announcement(message);\\n    }\\n\\n    /**\\n     * See parent method for collateral requirements.\\n     */\\n    function setCustomClaimCollateral(IERC20 collateral, uint256 rate) external onlyOwner() {\\n        super._setCustomClaimCollateral(collateral, rate);\\n    }\\n\\n    function getClaimDeleter() public override view returns (address) {\\n        return owner;\\n    }\\n\\n    /**\\n     * Signals that the indicated tokens have been declared invalid (e.g. by a court ruling in accordance\\n     * with article 973g of the Swiss Code of Obligations) and got detached from\\n     * the underlying shares. Invalid tokens do not carry any shareholder rights any more.\\n     *\\n     * This function is purely declarative. It does not technically immobilize the affected tokens as\\n     * that would give the issuer too much power.\\n     */\\n    function declareInvalid(address holder, uint256 amount, string calldata message) external onlyOwner() {\\n        uint256 holderBalance = balanceOf(holder);\\n        if (amount > holderBalance) {\\n            revert ERC20InsufficientBalance(holder, holderBalance, amount);\\n        }\\n        invalidTokens += amount;\\n        emit TokensDeclaredInvalid(holder, amount, message);\\n    }\\n\\n    /**\\n     * The total number of valid tokens in circulation. In case some tokens have been declared invalid, this\\n     * number might be lower than totalSupply(). Also, it will always be lower than or equal to totalShares().\\n     */\\n    function totalValidSupply() public view returns (uint256) {\\n        return totalSupply() - invalidTokens;\\n    }\\n\\n    /**\\n     * Allows the company to tokenize shares and transfer them e.g to the draggable contract and wrap them.\\n     * If these shares are newly created, setTotalShares must be called first in order to adjust the total number of shares.\\n     */\\n    function mintAndCall(address shareholder, address callee, uint256 amount, bytes calldata data) external {\\n        mint(callee, amount);\\n        if (!IERC677Receiver(callee).onTokenTransfer(shareholder, amount, data)) {\\n            revert IERC677Receiver.IERC677_OnTokenTransferFailed();\\n        }\\n    }\\n\\n    function mintManyAndCall(address[] calldata target, address callee, uint256[] calldata amount, bytes calldata data) external {\\n        uint256 len = target.length;\\n        if (len != amount.length) {\\n            revert Shares_UnequalLength(len, amount.length);\\n        }\\n        uint256 total = 0;\\n        for (uint256 i = 0; i<len; i++){\\n            total += amount[i];\\n        }\\n        mint(callee, total);\\n        for (uint256 i = 0; i<len; i++){\\n            if(!IERC677Receiver(callee).onTokenTransfer(target[i], amount[i], data)){\\n                revert IERC677Receiver.IERC677_OnTokenTransferFailed();\\n            }\\n        }\\n    }\\n\\n    function mint(address target, uint256 amount) public onlyOwner {\\n        _mint(target, amount);\\n    }\\n\\n    function mintMany(address[] calldata target, uint256[] calldata amount) public onlyOwner {\\n        uint256 len = target.length;\\n        if (len != amount.length) {\\n            revert Shares_UnequalLength(len, amount.length);\\n        }\\n        for (uint256 i = 0; i<len; i++){\\n            _mint(target[i], amount[i]);\\n        }\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        uint256 newValidSupply = totalValidSupply() + amount;\\n        if (newValidSupply > totalShares) {\\n            revert Shares_InsufficientTotalShares(totalShares, newValidSupply);\\n        }\\n        super._mint(account, amount);\\n    }\\n\\n    function transfer(address to, uint256 value) virtual override(ERC20Recoverable, ERC20Flaggable, IERC20) public returns (bool) {\\n        return super.transfer(to, value);\\n    }\\n\\n    /**\\n     * Transfers _amount tokens to the company and burns them.\\n     * The meaning of this operation depends on the circumstances and the fate of the shares does\\n     * not necessarily follow the fate of the tokens. For example, the company itself might call\\n     * this function to implement a formal decision to destroy some of the outstanding shares.\\n     * Also, this function might be called by an owner to return the shares to the company and\\n     * get them back in another form under an according agreement (e.g. printed certificates or\\n     * tokens on a different blockchain). It is not recommended to call this function without\\n     * having agreed with the company on the further fate of the shares in question.\\n     */\\n    function burn(uint256 _amount) override external {\\n        _transfer(msg.sender, address(this), _amount);\\n        _burn(address(this), _amount);\\n    }\\n\\n    function allowance(address owner, address spender) public view virtual override(ERC20Permit2, ERC20Flaggable, IERC20) returns (uint256) {\\n        return super.allowance(owner, spender);\\n    }\\n\\n}\",\"keccak256\":\"0x7d4fbf0ddf1847529a85ec34fce61deda60507db9743bd6122cb7557d139ccd7\",\"license\":\"LicenseRef-Aktionariat\"},\"src/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\\n// and modified it.\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Address {\\n\\n    /// @param target Target address to call the function on.\\n    error Address_NotTransferNorContract(address target);\\n\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n        return account.code.length > 0;\\n    }\\n    \\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 weiValue) internal returns (bytes memory) {\\n        if (data.length != 0 && !isContract(target)) {\\n            revert Address_NotTransferNorContract(target);\\n        }\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else if (returndata.length > 0) {\\n            assembly{\\n                revert (add (returndata, 0x20), mload (returndata))\\n            }\\n        } else {\\n           revert(\\\"failed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xb95d45875550203c1afb7dfc9c99ce62c77496c36e96f3adfaad2d42cb3380a2\",\"license\":\"MIT\"},\"src/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    error Initializable_AlreadyInitalized();\\n\\n    /**\\n     * @dev Modifier to protect the initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        if (_initialized) {\\n            revert Initializable_AlreadyInitalized();\\n        }\\n        _;\\n        _initialized = true;\\n    }\\n\\n}\",\"keccak256\":\"0x1e5313ca9baca269b5525c963d04aeb4b8e972e5ce7eba4f4521264b80b09240\",\"license\":\"MIT\"},\"src/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n//\\n// Modifications:\\n// - Replaced Context._msgSender() with msg.sender\\n// - Made leaner\\n// - Extracted interface\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    error Ownable_NotOwner(address sender);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor (address initialOwner) {\\n        owner = initialOwner;\\n        emit OwnershipTransferred(address(0), owner);\\n    }\\n\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    function _checkOwner() internal view {\\n        if (msg.sender != owner) {\\n            revert Ownable_NotOwner(msg.sender);\\n        }\\n    }\\n}\",\"keccak256\":\"0x9057578671d192c7891a59854cf8bab2698450c5b271f21e0696036fb65cae3b\",\"license\":\"MIT\"},\"src/utils/Permit2Hub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport \\\"../utils/Ownable.sol\\\";\\n\\n/// @title Permit2Hub\\n/// @dev This contract manages the Permit2 functionality and access control.\\ncontract Permit2Hub is Ownable {\\n  \\n  /// @dev The address of the Permit2 contract.\\n  address public immutable permit2;\\n  /// @dev Flag to indicate whether Permit2 is disabled.\\n  bool public permit2Disabled = false;\\n\\n  /// @dev Mapping to track addresses for which Permit2 is disabled.\\n  mapping(address => bool) public permit2DisabledForAddress;\\n\\n  /// @dev Emitted when the Permit2 setting is changed.\\n  event ChangedPermit2(bool newSetting);\\n\\n  /// @dev Initializes the Permit2Hub contract with the provided Permit2 address and owner address.\\n  /// @param _permit2 The address of the Permit2 contract.\\n  /// @param _owner The address of the owner.\\n  constructor(address _permit2, address _owner) Ownable(_owner) {\\n    permit2 = _permit2;\\n  }\\n\\n  /// @dev Checks if Permit2 is enabled for the given owner and spender addresses.\\n  /// @param owner The owner address.\\n  /// @param spender The spender address, needs to be the permit2 contract.\\n  /// @return A boolean indicating whether Permit2 is enabled.\\n  function isPermit2Enabled(address owner, address spender) public view returns (bool){\\n    return spender == permit2 && !permit2Disabled && !permit2DisabledForAddress[owner];\\n  }\\n\\n  /// @dev Toggles the global Permit2 setting. Can only be called by the owner.\\n  function togglePermit2() external onlyOwner {\\n    permit2Disabled = !permit2Disabled;\\n    emit ChangedPermit2(permit2Disabled);\\n  }\\n\\n  /// @dev Sets the Permit2 status for a specific address.\\n  /// @param enabled The status to set for the address.\\n  function setPermit2(bool enabled) external {\\n    permit2DisabledForAddress[msg.sender] = !enabled;\\n  }\\n}\\n\",\"keccak256\":\"0xbd98bf8add9d994846ba74e81e283ae1c60d9697a48a3810af43576e44d9d7fb\",\"license\":\"MIT\"},\"src/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// coppied and adjusted from OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../ERC20/IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../ERC20/IERC20Permit.sol\\\";\\nimport {Address} from \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        if (nonceAfter != nonceBefore + 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\",\"keccak256\":\"0xa162e550fe203915126fddc231c55d28dd3f16d39be22dd48c5fc7f5ccd6fd93\",\"license\":\"MIT\"},\"src/utils/factory/AllowlistDraggableFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { AllowlistDraggableShares, DraggableParams } from \\\"../../shares/AllowlistDraggableShares.sol\\\";\\nimport { IERC20Permit } from \\\"../../ERC20/IERC20Permit.sol\\\";\\nimport { FactoryManager } from \\\"./FactoryManager.sol\\\";\\nimport { TokenConfig } from \\\"./FactoryStructs.sol\\\";\\nimport { Ownable } from \\\"../Ownable.sol\\\";\\n\\n/**\\n * @title Allowlist draggable factory\\n * @author rube\\n * \\n * @notice This contract is responsible for creating new AllowlistDraggableShares tokens\\n * @dev Inherits from Ownable for access control\\n */\\ncontract AllowlistDraggableFactory is Ownable {\\n\\n    /// @notice The factory manager contract\\n    FactoryManager public manager;\\n\\n    /// @notice Emitted when the factory manager is updated\\n    /// @param manager The new factory manager address\\n    event FactoryManagerUpdated(FactoryManager manager);\\n\\n    /**\\n     * @notice Constructs a new AllowlistDraggableFactory\\n     * @param _owner The address that will be set as the owner of the contract\\n     */\\n    constructor(address _owner) Ownable(_owner){}\\n\\n    /**\\n     * @notice Creates a new AllowlistDraggableShares token\\n     * @param tokenConfig The configuration for the new token\\n     * @param tokenOwner The address that will own the new token\\n     * @param token The address of the ERC20Permit token to be used\\n     * @return IERC20Permit The address of the newly created AllowlistDraggableShares token\\n     */\\n    function createAllowlistDraggable(TokenConfig calldata tokenConfig, address tokenOwner, IERC20Permit token, string calldata _salt) external returns (IERC20Permit) {\\n        bytes32 salt = bytes32(keccak256(abi.encodePacked(tokenConfig.symbol, token, _salt)));\\n        DraggableParams memory params = DraggableParams(\\n            token,\\n            tokenConfig.quorumDrag,\\n            tokenConfig.quorumMigration,\\n            tokenConfig.votePeriod\\n        );\\n\\n        return new AllowlistDraggableShares{salt: salt}(\\n            tokenConfig.terms,\\n            params, \\n            manager.recoveryHub(),\\n            manager.offerFactory(),\\n            tokenOwner,\\n            manager.permit2Hub()\\n        );\\n    }\\n\\n    /**\\n     * @notice Sets a new factory manager\\n     * @dev Can only be called by the contract owner\\n     * @param _manager The address of the new factory manager\\n     */\\n    function setManager(FactoryManager _manager) external onlyOwner {\\n        manager = _manager;\\n        emit FactoryManagerUpdated(manager);\\n    }\\n\\n}\",\"keccak256\":\"0xd0726af86b7abbcce4382c8dd3e631f881aa2166c72040e12d156a3be8d204d8\",\"license\":\"MIT\"},\"src/utils/factory/DraggableTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { DraggableShares, DraggableParams } from \\\"../../shares/DraggableShares.sol\\\";\\nimport { FactoryManager } from \\\"./FactoryManager.sol\\\";\\nimport { TokenConfig } from \\\"./FactoryStructs.sol\\\";\\nimport { IERC20Permit } from \\\"../../ERC20/IERC20Permit.sol\\\";\\nimport { Ownable } from \\\"../Ownable.sol\\\";\\n\\n/**\\n * @title Draggable token factory\\n * @author rube\\n * \\n * @notice This contract is responsible for creating new Draggable tokens\\n * @dev Inherits from Ownable for access control\\n */\\ncontract DraggableTokenFactory is Ownable {\\n\\n  /// @notice The factory manager contract\\n  FactoryManager public manager;\\n\\n  /**\\n   * @notice Emitted when the factory manager is updated\\n   * @param manager The address of the new factory manager\\n   */\\n  event FactoryManagerUpdated(FactoryManager manager);\\n\\n  /**\\n   * @notice Constructs the DraggableTokenFactory contract\\n   * @param _owner The address that will be set as the owner of this contract\\n   */\\n  constructor(address _owner) Ownable(_owner){}\\n\\n  /**\\n   * @notice Creates a new Draggable token\\n   * @dev This function deploys a new DraggableShares contract\\n   * @param tokenConfig The configuration for the new token\\n   * @param tokenOwner The address that will own the new token\\n   * @param token The ERC20Permit token to be wrapped\\n   * @return IERC20Permit The address of the newly created Draggable token\\n   */\\n  function createDraggable(TokenConfig calldata tokenConfig, address tokenOwner, IERC20Permit token, string calldata _salt) external returns (IERC20Permit) {\\n    bytes32 salt = bytes32(keccak256(abi.encodePacked(tokenConfig.symbol, token, _salt)));\\n    DraggableParams memory params = DraggableParams(\\n      token, \\n      tokenConfig.quorumDrag, \\n      tokenConfig.quorumMigration, \\n      tokenConfig.votePeriod\\n    );\\n\\n    return new DraggableShares{salt: salt}(\\n      tokenConfig.terms, \\n      params, \\n      manager.recoveryHub(), \\n      manager.offerFactory(), \\n      tokenOwner, \\n      manager.permit2Hub()\\n    );\\n  }\\n\\n  /**\\n   * @notice Sets a new factory manager\\n   * @dev Can only be called by the contract owner\\n   * @param _manager The address of the new factory manager\\n   */\\n  function setManager(FactoryManager _manager) external onlyOwner {\\n    manager = _manager;\\n    emit FactoryManagerUpdated(manager);\\n  }\\n\\n}\",\"keccak256\":\"0xa271ebf7de9bc7f3df1959f3ad64d0f4d0f46392a2c62f937c055495ab79caee\",\"license\":\"MIT\"},\"src/utils/factory/FactoryManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IOfferFactory } from \\\"../../draggable/IOfferFactory.sol\\\";\\nimport { MultiSigCloneFactory } from \\\"../../multisig/MultiSigCloneFactory.sol\\\";\\nimport { Ownable } from \\\"../Ownable.sol\\\";\\nimport { PaymentHub } from \\\"../../brokerbot/PaymentHub.sol\\\";\\nimport { Permit2Hub } from \\\"../Permit2Hub.sol\\\";\\nimport { RecoveryHub } from \\\"../../recovery/RecoveryHub.sol\\\";\\n\\n/**\\n * @title Factory Mangager for common contracts\\n * @author rube\\n * \\n */\\ncontract FactoryManager is Ownable {\\n\\n  IOfferFactory public offerFactory;\\n  MultiSigCloneFactory public multisigFactory;\\n  PaymentHub public paymentHub;\\n  RecoveryHub public recoveryHub;\\n  Permit2Hub public permit2Hub;\\n\\n  event PaymentHubUpdated(PaymentHub indexed paymentHub);\\n  event OfferFactoryUpdated(IOfferFactory indexed offerFactory);\\n  event RecoveryHubUpdated(RecoveryHub indexed recoveryHub);\\n  event Permit2HubUpdated(Permit2Hub indexed permit2Hub);\\n  event MultiSigCloneFactoryUpdated(MultiSigCloneFactory indexed MultiSigCloneFactory);\\n\\n  constructor(address _owner) Ownable(_owner) {}\\n\\n\\n  function setPaymentHub(PaymentHub _paymentHub) external onlyOwner() {\\n    paymentHub = _paymentHub;\\n    emit PaymentHubUpdated(paymentHub);\\n  }\\n\\n  function setOfferFactory(IOfferFactory _offerFactory) external onlyOwner() {\\n    offerFactory = _offerFactory;\\n    emit OfferFactoryUpdated(offerFactory);\\n  }\\n\\n  function setRecoveryHub(RecoveryHub _recoveryHub) external onlyOwner() {\\n    recoveryHub = _recoveryHub;\\n    emit RecoveryHubUpdated(recoveryHub);\\n  }\\n  \\n  function setMultiSigCloneFactory(MultiSigCloneFactory _multsigFactory) external onlyOwner() {\\n    multisigFactory = _multsigFactory;\\n    emit MultiSigCloneFactoryUpdated(multisigFactory);\\n  }\\n\\n  function setPermit2Hub(Permit2Hub _permit2Hub) external onlyOwner() {\\n    permit2Hub = _permit2Hub;\\n    emit Permit2HubUpdated(permit2Hub);\\n  }\\n}\",\"keccak256\":\"0x56066d883c84de0069eaa10062dd3e9acce69d5039df8db65ac2ab807b2395fd\",\"license\":\"MIT\"},\"src/utils/factory/FactoryStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"../../ERC20/IERC20.sol\\\";\\n\\nstruct TokenConfig{\\n  string name;\\n  string symbol;\\n  string terms;\\n  bool allowlist;\\n  bool draggable;\\n  uint256 numberOfShares;\\n  uint256 quorumDrag;\\n  uint256 quorumMigration;\\n  uint256 votePeriod;\\n}\\n\\nstruct BrokerbotConfig {\\n  uint256 price;\\n  uint256 increment;\\n  IERC20 baseCurrency;\\n}\",\"keccak256\":\"0x3f80f4a1a88e6d85716aa84b862baf1e2467f304e591d7cd632b0c6bbe8b7479\",\"license\":\"MIT\"},\"src/utils/factory/TokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport { AllowlistDraggableFactory } from \\\"./AllowlistDraggableFactory.sol\\\";\\nimport { AllowlistShares, Shares } from \\\"../../shares/AllowlistShares.sol\\\";\\nimport { DraggableTokenFactory } from \\\"./DraggableTokenFactory.sol\\\";\\nimport { FactoryManager } from \\\"./FactoryManager.sol\\\";\\nimport { TokenConfig } from \\\"./FactoryStructs.sol\\\";\\nimport { IERC20Permit } from \\\"../../ERC20/IERC20Permit.sol\\\";\\nimport { Ownable } from \\\"../Ownable.sol\\\";\\n\\n/**\\n * @title TokenFactory\\n * @author rube\\n * \\n * @dev Factory to deploy shares contracts\\n * @notice This contract allows the creation of share tokens with optional draggable functionality and allowlist features.\\n */\\ncontract TokenFactory is Ownable {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  /// @notice Factory manager contract\\n  FactoryManager public manager;\\n\\n  /// @notice Draggable token factory contract\\n  DraggableTokenFactory public draggableFactory;\\n\\n  /// @notice Allowlist draggable token factory contract\\n  AllowlistDraggableFactory public allowlistDraggableFactory;\\n\\n  /// @dev Set of addresses for created share tokens\\n  EnumerableSet.AddressSet private _sharesSet; \\n\\n  /// @dev Set of addresses for created draggable tokens\\n  EnumerableSet.AddressSet private _draggableSet; \\n\\n  /// @notice Emitted when a base token is created\\n  /// @param token The created token\\n  /// @param owner The owner of the token\\n  /// @param allowlist Indicates if the token has an allowlist\\n  event BaseTokenCreated(IERC20Permit indexed token, address indexed owner, bool allowlist);\\n\\n  /// @notice Emitted when a draggable token is created\\n  /// @param draggable The created draggable token\\n  /// @param baseToken The base token associated with the draggable token\\n  /// @param owner The owner of the draggable token\\n  /// @param allowlist Indicates if the token has an allowlist\\n  event DraggableTokenCreated(IERC20Permit indexed draggable, IERC20Permit indexed baseToken, address indexed owner, bool allowlist);\\n\\n  /// @notice Emitted when the factory manager is updated\\n  /// @param manager The new factory manager\\n  event FactoryManagerUpdated(address manager);\\n\\n  /// @notice Emitted when the draggable token factory is updated\\n  /// @param factory The new draggable token factory\\n  event DraggableTokenFactoryUpdated(DraggableTokenFactory factory);\\n\\n  /// @notice Emitted when the allowlist draggable token factory is updated\\n  /// @param factory The new allowlist draggable token factory\\n  event AllowlistDraggableFactoryUpdated(AllowlistDraggableFactory factory);\\n\\n  /// @notice Error for invalid owner address\\n  error InvalidOwner();\\n\\n  /**\\n   * @notice Constructor for TokenFactory\\n   * @param _owner The address of the contract owner\\n   * @param _draggableFactory The address of the draggable token factory\\n   * @param _allowlistDraggableFactory The address of the allowlist draggable token factory\\n   */\\n  constructor(address _owner, DraggableTokenFactory _draggableFactory, AllowlistDraggableFactory _allowlistDraggableFactory) Ownable(_owner) {\\n    draggableFactory = _draggableFactory;\\n    allowlistDraggableFactory = _allowlistDraggableFactory;\\n  }\\n\\n  /**\\n   * @notice Creates a new token\\n   * @param tokenConfig Configuration of the token to be created\\n   * @param tokenOwner The owner of the new token\\n   * @return The address of the created token\\n   */\\n  function createToken(TokenConfig calldata tokenConfig, address tokenOwner, string calldata salt) external returns (IERC20Permit) {\\n    if (tokenOwner == address(0)) revert InvalidOwner();\\n    IERC20Permit token = _createBaseToken(tokenConfig, tokenOwner, salt);\\n    if (tokenConfig.draggable) {\\n      IERC20Permit draggable = _createDraggableToken(tokenConfig, tokenOwner, token, salt);\\n      return draggable;\\n    } else {\\n      return token;\\n    }\\n  }\\n\\n  /**\\n   * @notice Sets the factory manager\\n   * @param _manager The new factory manager\\n   */\\n  function setManager(FactoryManager _manager) external onlyOwner() {\\n    manager = _manager;\\n    emit FactoryManagerUpdated(address(manager));\\n  }\\n\\n  /**\\n   * @notice Sets the draggable token factory\\n   * @param _draggableFactory The new draggable token factory\\n   */\\n  function setDraggableTokenFactory(DraggableTokenFactory _draggableFactory) external onlyOwner() {\\n    draggableFactory = _draggableFactory;\\n    emit DraggableTokenFactoryUpdated(draggableFactory);\\n  }\\n\\n  /**\\n   * @notice Sets the allowlist draggable token factory\\n   * @param _allowlistDraggableFactory The new allowlist draggable token factory\\n   */\\n  function setAllowlistDraggableFactory(AllowlistDraggableFactory _allowlistDraggableFactory) external onlyOwner() {\\n    allowlistDraggableFactory = _allowlistDraggableFactory;\\n    emit AllowlistDraggableFactoryUpdated(allowlistDraggableFactory);\\n  }\\n\\n  /**\\n   * @notice Gets all created share tokens\\n   * @return An array of addresses of created share tokens\\n   */\\n  function getAllShares() external view returns (address[] memory) {\\n    return _sharesSet.values();\\n  }\\n\\n  /**\\n   * @notice Gets all created draggable share tokens\\n   * @return An array of addresses of created draggable share tokens\\n   */\\n  function getAllDraggableShares() external view returns (address[] memory) {\\n    return _draggableSet.values();\\n  }\\n\\n  function _createBaseToken(TokenConfig calldata tokenConfig, address tokenOwner, string calldata _salt) internal returns (IERC20Permit token) {\\n    bytes32 salt = bytes32(uint256(keccak256(abi.encodePacked(tokenConfig.symbol, _salt))));\\n    if (tokenConfig.allowlist) {\\n      token = new AllowlistShares{salt: salt}(tokenConfig.symbol, tokenConfig.name, tokenConfig.terms, tokenConfig.numberOfShares, manager.recoveryHub(), tokenOwner, manager.permit2Hub());\\n    } else {\\n      token = new Shares{salt: salt}(tokenConfig.symbol, tokenConfig.name, tokenConfig.terms, tokenConfig.numberOfShares, tokenOwner, manager.recoveryHub(), manager.permit2Hub());\\n    }\\n    _sharesSet.add(address(token));\\n    emit BaseTokenCreated(token, tokenOwner, tokenConfig.allowlist);\\n    return token;\\n  }\\n\\n  function _createDraggableToken(TokenConfig calldata tokenConfig, address tokenOwner, IERC20Permit baseToken, string calldata _salt) internal returns (IERC20Permit draggable) {\\n    if (tokenConfig.allowlist) {\\n      draggable = allowlistDraggableFactory.createAllowlistDraggable(tokenConfig, tokenOwner, baseToken, _salt);\\n    } else {\\n      draggable = draggableFactory.createDraggable(tokenConfig, tokenOwner, baseToken, _salt);\\n    }\\n    _draggableSet.add(address(draggable));\\n    emit DraggableTokenCreated(draggable, baseToken, tokenOwner, tokenConfig.allowlist);\\n    return draggable;\\n  }\\n}\\n\",\"keccak256\":\"0x5e241bcfa8ab91a90a736f934a0d516c8193c515e4c37997b1bf8dbc21ce0350\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063bfd6be1311610071578063bfd6be131461012e578063c421612d14610136578063cb07ea9f14610149578063d0ebdbe71461015c578063e9c2feee1461016f578063f2fde38b1461018257600080fd5b8063481c6a75146100ae5780636415f8eb146100de5780636d23e504146100f35780637c9f986b146101065780638da5cb5b1461011b575b600080fd5b6001546100c1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e6610195565b6040516100d591906109b3565b6003546100c1906001600160a01b031681565b610119610114366004610a18565b6101a6565b005b6000546100c1906001600160a01b031681565b6100e6610203565b610119610144366004610a18565b61020f565b6100c1610157366004610a35565b610265565b61011961016a366004610a18565b6102d7565b6002546100c1906001600160a01b031681565b610119610190366004610a18565b61032d565b60606101a16006610390565b905090565b6101ae6103a4565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527fac4b129bd7633bbd7c08aa97a9113f852732d7684338963dd51836030ca4e1ac906020015b60405180910390a150565b60606101a16004610390565b6102176103a4565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f1f7facc5d00af6c7b050a8cc277b0535078dc61c46f3431bd9308aaf704f814e906020016101f8565b60006001600160a01b03841661028e576040516349e27cff60e01b815260040160405180910390fd5b600061029c868686866103d7565b90506102ae60a0870160808801610af9565b156102cc5760006102c2878784888861074e565b92506102cf915050565b90505b949350505050565b6102df6103a4565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f7374c03893422e168ea189118b40932f7c665b7dbcd921b4d7580ca758cc1e40906020016101f8565b6103356103a4565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6060600061039d836108d0565b9392505050565b6000546001600160a01b031633146103d5576040516396a19be960e01b815233600482015260240160405180910390fd5b565b6000806103e76020870187610b14565b85856040516020016103fc9493929190610b62565b60408051601f19818403018152919052805160209091012090506104266080870160608801610af9565b1561058b57806104396020880188610b14565b6104438980610b14565b61045060408c018c610b14565b8c60a00135600160009054906101000a90046001600160a01b03166001600160a01b0316639220623b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cc9190610b84565b8d600160009054906101000a90046001600160a01b03166001600160a01b03166318efcce56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610520573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105449190610b84565b60405161055090610999565b6105639a99989796959493929190610bca565b8190604051809103906000f5905080158015610583573d6000803e3d6000fd5b5091506106e7565b806105996020880188610b14565b6105a38980610b14565b6105b060408c018c610b14565b8c60a001358c600160009054906101000a90046001600160a01b03166001600160a01b0316639220623b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062d9190610b84565b600160009054906101000a90046001600160a01b03166001600160a01b03166318efcce56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610680573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a49190610b84565b6040516106b0906109a6565b6106c39a99989796959493929190610bca565b8190604051809103906000f59050801580156106e3573d6000803e3d6000fd5b5091505b6106f260048361092c565b506001600160a01b038086169083167fab0065b350a39635c2edc016f65cc72b6ca6e2ddd0275013f7c922a3469bbfd861073260808a0160608b01610af9565b604051901515815260200160405180910390a350949350505050565b60006107606080870160608801610af9565b156107e7576003546040516326ff226960e11b81526001600160a01b0390911690634dfe44d29061079d9089908990899089908990600401610c81565b6020604051808303816000875af11580156107bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e09190610b84565b9050610865565b6002546040516329d97d1760e21b81526001600160a01b039091169063a765f45c9061081f9089908990899089908990600401610c81565b6020604051808303816000875af115801561083e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108629190610b84565b90505b61087060068261092c565b506001600160a01b03808616908581169083167fb115cb2bd1e10e7f14236a88f05ede66f4058b4efb64df341224dd1c13c402106108b460808b0160608c01610af9565b604051901515815260200160405180910390a495945050505050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561092057602002820191906000526020600020905b81548152602001906001019080831161090c575b50505050509050919050565b6000610941836001600160a01b03841661094a565b90505b92915050565b600081815260018301602052604081205461099157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610944565b506000610944565b612a3880610d9c83390190565b612483806137d483390190565b6020808252825182820181905260009190848201906040850190845b818110156109f45783516001600160a01b0316835292840192918401916001016109cf565b50909695505050505050565b6001600160a01b0381168114610a1557600080fd5b50565b600060208284031215610a2a57600080fd5b813561039d81610a00565b60008060008060608587031215610a4b57600080fd5b843567ffffffffffffffff80821115610a6357600080fd5b908601906101208289031215610a7857600080fd5b909450602086013590610a8a82610a00565b90935060408601359080821115610aa057600080fd5b818701915087601f830112610ab457600080fd5b813581811115610ac357600080fd5b886020828501011115610ad557600080fd5b95989497505060200194505050565b80358015158114610af457600080fd5b919050565b600060208284031215610b0b57600080fd5b61094182610ae4565b6000808335601e19843603018112610b2b57600080fd5b83018035915067ffffffffffffffff821115610b4657600080fd5b602001915036819003821315610b5b57600080fd5b9250929050565b8385823760008482016000815283858237600093019283525090949350505050565b600060208284031215610b9657600080fd5b815161039d81610a00565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60e081526000610bde60e083018c8e610ba1565b8281036020840152610bf1818b8d610ba1565b90508281036040840152610c0681898b610ba1565b606084019790975250506001600160a01b03938416608082015291831660a083015290911660c0909101529695505050505050565b6000808335601e19843603018112610c5257600080fd5b830160208101925035905067ffffffffffffffff811115610c7257600080fd5b803603821315610b5b57600080fd5b608081526000610c918788610c3b565b610120806080860152610ca96101a086018385610ba1565b9250610cb860208b018b610c3b565b9250607f19808786030160a0880152610cd2858584610ba1565b9450610ce160408d018d610c3b565b94509150808786030160c088015250610cfb848483610ba1565b935050610d0a60608b01610ae4565b80151560e08701529150610d2060808b01610ae4565b9150610100610d328187018415159052565b60a08b01359186019190915260c08a013561014086015260e08a0135610160860152890135610180850152506001600160a01b03871660208401526001600160a01b03861660408401528281036060840152610d8f818587610ba1565b9897505050505050505056fe60c060405234801561001057600080fd5b50604051612a38380380612a3883398101604081905261002f916103a0565b6003805460ff191690556001600160a01b03838116608052600580546001600160a01b03191691841691821790556040518891889188918891879189918891829189918991600091889182919084907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506100ae8484610155565b505050506001600160a01b031660a052600a84905560096100cf86826104f3565b506000600b819055604051636427ed9760e01b815260048101919091526001600160a01b03831690636427ed9790602401600060405180830381600087803b15801561011a57600080fd5b505af115801561012e573d6000803e3d6000fd5b505050505050505050505061014960016101ac60201b60201c565b50505050505050610639565b600761016183826104f3565b50600661016e82826104f3565b507f6c20b91d1723b78732eba64ff11ebd7966a6e4af568a00fa4f6b72c20f58b02a81836040516101a09291906105de565b60405180910390a15050565b600c805460ff191682158015919091179091556101d2576101cf600060046101d9565b50565b6101cf6000805b6101eb82601460ff8416600114610254565b6101fd82601560ff8416600214610254565b61020f82601660ff8416600414610254565b60405160ff821681526001600160a01b038316907fe423d7d31023dbacefed7c937785d0012ad8f314381295efebfc0471d2c434549060200160405180910390a25050565b60006102618360e061060c565b6001600160a01b038516600090815260208190526040902054600160ff929092169190911b91508082168214831515146102b3576001600160a01b038516600090815260208190526040902081831890555b5050505050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156102eb5781810151838201526020016102d3565b50506000910152565b600082601f83011261030557600080fd5b81516001600160401b038082111561031f5761031f6102ba565b604051601f8301601f19908116603f01168101908282118183101715610347576103476102ba565b8160405283815286602085880101111561036057600080fd5b6103718460208301602089016102d0565b9695505050505050565b6001600160a01b03811681146101cf57600080fd5b805161039b8161037b565b919050565b600080600080600080600060e0888a0312156103bb57600080fd5b87516001600160401b03808211156103d257600080fd5b6103de8b838c016102f4565b985060208a01519150808211156103f457600080fd5b6104008b838c016102f4565b975060408a015191508082111561041657600080fd5b506104238a828b016102f4565b95505060608801519350608088015161043b8161037b565b60a089015190935061044c8161037b565b915061045a60c08901610390565b905092959891949750929550565b600181811c9082168061047c57607f821691505b60208210810361049c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156104ee576000816000526020600020601f850160051c810160208610156104cb5750805b601f850160051c820191505b818110156104ea578281556001016104d7565b5050505b505050565b81516001600160401b0381111561050c5761050c6102ba565b6105208161051a8454610468565b846104a2565b602080601f831160018114610555576000841561053d5750858301515b600019600386901b1c1916600185901b1785556104ea565b600085815260208120601f198616915b8281101561058457888601518255948401946001909101908401610565565b50858210156105a25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600081518084526105ca8160208601602086016102d0565b601f01601f19169290920160200192915050565b6040815260006105f160408301856105b2565b828103602084015261060381856105b2565b95945050505050565b60ff818116838216019081111561063357634e487b7160e01b600052601160045260246000fd5b92915050565b60805160a0516123b061068860003960008181610363015261182701526000818161061b0152818161083501528181610cd401528181610ebb015281816110d0015261179001526123b06000f3fe608060405234801561001057600080fd5b50600436106102d65760003560e01c806370a0823111610182578063b1c8db66116100e9578063ddceafa9116100a2578063f2fde38b1161007c578063f2fde38b14610663578063f54fc06014610676578063f5c0b95f14610689578063ffa1ad741461069c57600080fd5b8063ddceafa914610616578063e445d70a1461063d578063e5b824ec1461065057600080fd5b8063b1c8db66146105b5578063c18172c4146105c8578063d37a9bb0146105db578063d5025625146105e8578063d505accf146105f0578063dd62ed3e1461060357600080fd5b806395d89b411161013b57806395d89b41146105595780639e37878c14610561578063a49a7cb114610574578063a77384c114610587578063a9059cbb1461059a578063b0d04c7a146105ad57600080fd5b806370a08231146104e457806377e071ad146104f757806378f86afc1461050a5780637dc2cd981461051d5780637ecebe00146105265780638da5cb5b1461054657600080fd5b806337a8129c1161024157806342966c68116101fa5780635c707f07116101d45780635c707f07146104a25780635d6624b7146104b557806360918117146104c8578063648bf774146104d157600080fd5b806342966c6814610469578063429c66f01461047c578063487346b21461048f57600080fd5b806337a8129c1461040b5780633a1cdf32146104145780633a98ef39146104275780634000aea0146104305780634029a3ce1461044357806340c10f191461045657600080fd5b806323b872dd1161029357806323b872dd1461039a5780632a0a4ed5146103ad5780632b343099146103be578063313ce567146103d157806332a7ae95146103f05780633644e5151461040357600080fd5b806306fdde03146102db578063095ea7b3146102f95780630c6f0e5d1461031c57806318160ddd1461034c57806318efcce51461035e5780631f0f06aa14610385575b600080fd5b6102e36106a4565b6040516102f09190611ad9565b60405180910390f35b61030c610307366004611b01565b610732565b60405190151581526020016102f0565b6003546103349061010090046001600160a01b031681565b6040516001600160a01b0390911681526020016102f0565b6002545b6040519081526020016102f0565b6103347f000000000000000000000000000000000000000000000000000000000000000081565b610398610393366004611b76565b610749565b005b61030c6103a8366004611bb8565b61078e565b6005546001600160a01b0316610334565b61030c6103cc366004611bf9565b6107ef565b6003546103de9060ff1681565b60405160ff90911681526020016102f0565b6103986103fe366004611bf9565b6107fc565b610350610894565b610350600b5481565b610398610422366004611b01565b6108ed565b610350600a5481565b61030c61043e366004611c16565b610903565b610398610451366004611cb7565b610994565b610398610464366004611b01565b610a2f565b610398610477366004611d17565b610a41565b61039861048a366004611d41565b610a59565b61039861049d366004611d95565b610aaa565b6103986104b0366004611ee7565b610c09565b6103986104c3366004611c16565b610c1b565b61035060045481565b6103986104df366004611f4b565b610ccf565b6103506104f2366004611bf9565b610d0b565b610350610505366004611bf9565b610d2f565b610398610518366004611f84565b610d79565b62ed4e00610350565b610350610534366004611bf9565b60086020526000908152604090205481565b600554610334906001600160a01b031681565b6102e3610dc8565b61030c61056f366004611bf9565b610dd5565b610398610582366004611fc1565b610de2565b610398610595366004611d17565b610df4565b61030c6105a8366004611b01565b610e68565b610350610e7b565b61030c6105c3366004611bf9565b610e98565b6103986105d6366004611bf9565b610eb6565b600c5461030c9060ff1681565b6102e3610eec565b6103986105fe366004611ff6565b610ef9565b610350610611366004611f4b565b6110ae565b6103347f000000000000000000000000000000000000000000000000000000000000000081565b61039861064b366004612072565b6110ba565b61039861065e366004611bf9565b6110cb565b610398610671366004611bf9565b611101565b61039861068436600461208f565b611165565b61030c610697366004611fc1565b611201565b6103de600481565b600680546106b190612102565b80601f01602080910402602001604051908101604052809291908181526020018280546106dd90612102565b801561072a5780601f106106ff5761010080835404028352916020019161072a565b820191906000526020600020905b81548152906001019060200180831161070d57829003601f168201915b505050505081565b600061073f33848461120d565b5060015b92915050565b61075161126f565b7f07ce702fc13ca0620c174dab22996a6d5fd9e7accb663555a4e85323692706ba8282604051610782929190612165565b60405180910390a15050565b600061079b84848461129e565b60006107a785336110ae565b9050600160ff1b8110156107e4576107bf838261218f565b6001600160a01b03861660009081526001602090815260408083203384529091529020555b506001949350505050565b6000610743826016611302565b6108166108116005546001600160a01b031690565b611342565b6040516332a7ae9560e01b81526001600160a01b0382811660048301527f000000000000000000000000000000000000000000000000000000000000000016906332a7ae9590602401600060405180830381600087803b15801561087957600080fd5b505af115801561088d573d6000803e3d6000fd5b5050505050565b604080517f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692186020820152469181019190915230606082015260009060800160405160208183030381529060405280519060200120905090565b6108f561126f565b6108ff828261136d565b5050565b600061090f8585610e68565b801561098b5750604051635260769b60e11b81526001600160a01b0386169063a4c0ed36906109489033908890889088906004016121a2565b6020604051808303816000875af1158015610967573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098b91906121d4565b95945050505050565b61099c61126f565b828181146109cc57604051634ee401dd60e11b815260048101829052602481018390526044015b60405180910390fd5b60005b81811015610a2757610a1f8686838181106109ec576109ec6121f1565b9050602002016020810190610a019190611bf9565b858584818110610a1357610a136121f1565b905060200201356113cc565b6001016109cf565b505050505050565b610a3761126f565b6108ff82826113cc565b610a4c33308361129e565b610a5630826113d6565b50565b610a6161126f565b60005b82811015610aa457610a9c848483818110610a8157610a816121f1565b9050602002016020810190610a969190611bf9565b83610de2565b600101610a64565b50505050565b85838114610ad557604051634ee401dd60e11b815260048101829052602481018590526044016109c3565b6000805b82811015610b0f57868682818110610af357610af36121f1565b9050602002013582610b059190612207565b9150600101610ad9565b50610b1a8782610a2f565b60005b82811015610bfd57876001600160a01b031663a4c0ed368b8b84818110610b4657610b466121f1565b9050602002016020810190610b5b9190611bf9565b898985818110610b6d57610b6d6121f1565b9050602002013588886040518563ffffffff1660e01b8152600401610b9594939291906121a2565b6020604051808303816000875af1158015610bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd891906121d4565b610bf557604051631956a44d60e31b815260040160405180910390fd5b600101610b1d565b50505050505050505050565b610c1161126f565b6108ff828261144a565b610c2361126f565b6000610c2e85610d0b565b905080841115610c6a5760405163391434e360e21b81526001600160a01b038616600482015260248101829052604481018590526064016109c3565b83600b6000828254610c7c9190612207565b92505081905550846001600160a01b03167f0a605cd1294f60fa3b73548ac68428f33300a051f225afcdcc75e56083c96ee7858585604051610cc09392919061221a565b60405180910390a25050505050565b610cf87f0000000000000000000000000000000000000000000000000000000000000000611342565b6108ff8282610d0685610d0b565b61129e565b6001600160a01b03166000908152602081905260409020546001600160e01b031690565b6000306001600160a01b03831603610d4957506001919050565b6003546001600160a01b03610100909104811690831603610d6c57505060045490565b506000919050565b919050565b610d8161126f565b6009610d8d828261227c565b507fe9f2468ecc8d3dff15a70a5909151e6297cee4cf05268eff3d7ef0c696ec50f281604051610dbd9190611ad9565b60405180910390a150565b600780546106b190612102565b6000610743826015611302565b610dea61126f565b6108ff8282611495565b610dfc61126f565b6000610e06610e7b565b905080821015610e335760405163e9ccb41b60e01b815260048101829052602481018390526044016109c3565b600a8290556040518281527fdcbf73bf1e396dbe03ccbcd29c0aa52eb8028ae24726098296357286de4f5b2690602001610782565b6000610e748383611510565b9392505050565b6000600b54610e8960025490565b610e93919061218f565b905090565b6000610ea5826014611302565b806107435750610743826016611302565b610edf7f0000000000000000000000000000000000000000000000000000000000000000611342565b610a5681600a600161151c565b600980546106b190612102565b42841015610f2357604051630b99fc4b60e31b8152600481018590524260248201526044016109c3565b60006001610f2f610894565b6001600160a01b038a811660008181526008602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa15801561103b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615806110705750876001600160a01b0316816001600160a01b031614155b1561109957604051632f52260d60e11b81526001600160a01b03821660048201526024016109c3565b6110a481888861120d565b5050505050505050565b6000610e748383611580565b6110c261126f565b610a568161158c565b6110f47f0000000000000000000000000000000000000000000000000000000000000000611342565b610a5681600a600061151c565b61110961126f565b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b61116f8484610a2f565b604051635260769b60e11b81526001600160a01b0385169063a4c0ed36906111a19088908790879087906004016121a2565b6020604051808303816000875af11580156111c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e491906121d4565b61088d57604051631956a44d60e31b815260040160405180910390fd5b6000610e748383611302565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6005546001600160a01b0316331461129c576040516396a19be960e01b81523360048201526024016109c3565b565b6112a98383836115ba565b6112b383826115ca565b6112bd8282611667565b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161126291815260200190565b6000806113108360e061233c565b6001600160a01b038516600090815260208190526040902054600160ff929092169190911b9081161491505092915050565b336001600160a01b03821614610a5657604051634b637e8f60e11b81523360048201526024016109c3565b60038054610100600160a81b0319166101006001600160a01b0385811682029290921792839055909104166113a55760006004555050565b806000036113c657604051630ece93db60e41b815260040160405180910390fd5b60045550565b6108ff828261170c565b6113e2826000836115ba565b80600260008282546113f4919061218f565b90915550611404905082826115ca565b6040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b6007611456838261227c565b506006611463828261227c565b507f6c20b91d1723b78732eba64ff11ebd7966a6e4af568a00fa4f6b72c20f58b02a8183604051610782929190612355565b6114a782601460ff841660011461151c565b6114b982601560ff841660021461151c565b6114cb82601660ff841660041461151c565b60405160ff821681526001600160a01b038316907fe423d7d31023dbacefed7c937785d0012ad8f314381295efebfc0471d2c434549060200160405180910390a25050565b6000610e74838361175e565b60006115298360e061233c565b6001600160a01b038516600090815260208190526040902054600160ff929092169190911b915080821682148315151461088d576001600160a01b0394909416600090815260208190526040902093189092555050565b6000610e7483836117fd565b600c805460ff191682158015919091179091556115af57610a5660006004611495565b610a56600080611495565b6115c58383836118ce565b505050565b6001600160a01b038216600090815260208190526040812054906115ee838361218f565b90506001600160e01b031981166001600160e01b0319831614611646578361161585610d0b565b60405163391434e360e21b81526001600160a01b0390921660048301526024820152604481018490526064016109c3565b6001600160a01b039093166000908152602081905260409020929092555050565b6001600160a01b0382166116995760405163ec442f0560e01b81526001600160a01b03831660048201526024016109c3565b6001600160a01b038216600090815260208190526040812054906116bd8383612207565b90506001600160e01b031981166001600160e01b031983161461164657604051634a2e08e560e01b81526001600160a01b038516600482015260248101839052604481018490526064016109c3565b600081611717610e7b565b6117219190612207565b9050600a5481111561175457600a546040516340a8005d60e11b81526004810191909152602481018290526044016109c3565b6115c58383611a1a565b600061176a8383611a86565b5061177633600a611302565b1561073f576040516304d301a360e41b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634d301a3090602401600060405180830381600087803b1580156117dc57600080fd5b505af11580156117f0573d6000803e3d6000fd5b5050505050600192915050565b604051632fb6b53160e11b81526001600160a01b03838116600483015282811660248301526000917f000000000000000000000000000000000000000000000000000000000000000090911690635f6d6a6290604401602060405180830381865afa158015611870573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189491906121d4565b156118a25750600019610743565b506001600160a01b03828116600090815260016020908152604080832093851683529290522054610743565b6118d782610e98565b6115c5576118e482610dd5565b1561192557600c5460ff161561191857604051630329a43160e51b81526001600160a01b03831660048201526024016109c3565b6115c5826015600061151c565b61192e836107ef565b1561198457611940826014600161151c565b604051600181526001600160a01b038316907fe423d7d31023dbacefed7c937785d0012ad8f314381295efebfc0471d2c434549060200160405180910390a2505050565b61198f836014611302565b156119d057600c5460ff16156119c35760405163dd1aceed60e01b81526001600160a01b03831660048201526024016109c3565b6115c5836014600061151c565b6119d983610dd5565b156115c557600c5460ff1615611a0d57604051637882255360e11b81526001600160a01b03841660048201526024016109c3565b6115c5836015600061151c565b611a26600083836115ba565b8060026000828254611a389190612207565b90915550611a4890508282611667565b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161143e565b600061073f33848461129e565b6000815180845260005b81811015611ab957602081850181015186830182015201611a9d565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610e746020830184611a93565b6001600160a01b0381168114610a5657600080fd5b60008060408385031215611b1457600080fd5b8235611b1f81611aec565b946020939093013593505050565b60008083601f840112611b3f57600080fd5b50813567ffffffffffffffff811115611b5757600080fd5b602083019150836020828501011115611b6f57600080fd5b9250929050565b60008060208385031215611b8957600080fd5b823567ffffffffffffffff811115611ba057600080fd5b611bac85828601611b2d565b90969095509350505050565b600080600060608486031215611bcd57600080fd5b8335611bd881611aec565b92506020840135611be881611aec565b929592945050506040919091013590565b600060208284031215611c0b57600080fd5b8135610e7481611aec565b60008060008060608587031215611c2c57600080fd5b8435611c3781611aec565b935060208501359250604085013567ffffffffffffffff811115611c5a57600080fd5b611c6687828801611b2d565b95989497509550505050565b60008083601f840112611c8457600080fd5b50813567ffffffffffffffff811115611c9c57600080fd5b6020830191508360208260051b8501011115611b6f57600080fd5b60008060008060408587031215611ccd57600080fd5b843567ffffffffffffffff80821115611ce557600080fd5b611cf188838901611c72565b90965094506020870135915080821115611d0a57600080fd5b50611c6687828801611c72565b600060208284031215611d2957600080fd5b5035919050565b803560ff81168114610d7457600080fd5b600080600060408486031215611d5657600080fd5b833567ffffffffffffffff811115611d6d57600080fd5b611d7986828701611c72565b9094509250611d8c905060208501611d30565b90509250925092565b60008060008060008060006080888a031215611db057600080fd5b873567ffffffffffffffff80821115611dc857600080fd5b611dd48b838c01611c72565b909950975060208a01359150611de982611aec565b90955060408901359080821115611dff57600080fd5b611e0b8b838c01611c72565b909650945060608a0135915080821115611e2457600080fd5b50611e318a828b01611b2d565b989b979a50959850939692959293505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611e6b57600080fd5b813567ffffffffffffffff80821115611e8657611e86611e44565b604051601f8301601f19908116603f01168101908282118183101715611eae57611eae611e44565b81604052838152866020858801011115611ec757600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215611efa57600080fd5b823567ffffffffffffffff80821115611f1257600080fd5b611f1e86838701611e5a565b93506020850135915080821115611f3457600080fd5b50611f4185828601611e5a565b9150509250929050565b60008060408385031215611f5e57600080fd5b8235611f6981611aec565b91506020830135611f7981611aec565b809150509250929050565b600060208284031215611f9657600080fd5b813567ffffffffffffffff811115611fad57600080fd5b611fb984828501611e5a565b949350505050565b60008060408385031215611fd457600080fd5b8235611fdf81611aec565b9150611fed60208401611d30565b90509250929050565b600080600080600080600060e0888a03121561201157600080fd5b873561201c81611aec565b9650602088013561202c81611aec565b9550604088013594506060880135935061204860808901611d30565b925060a0880135915060c0880135905092959891949750929550565b8015158114610a5657600080fd5b60006020828403121561208457600080fd5b8135610e7481612064565b6000806000806000608086880312156120a757600080fd5b85356120b281611aec565b945060208601356120c281611aec565b935060408601359250606086013567ffffffffffffffff8111156120e557600080fd5b6120f188828901611b2d565b969995985093965092949392505050565b600181811c9082168061211657607f821691505b60208210810361213657634e487b7160e01b600052602260045260246000fd5b50919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000611fb960208301848661213c565b634e487b7160e01b600052601160045260246000fd5b8181038181111561074357610743612179565b60018060a01b03851681528360208201526060604082015260006121ca60608301848661213c565b9695505050505050565b6000602082840312156121e657600080fd5b8151610e7481612064565b634e487b7160e01b600052603260045260246000fd5b8082018082111561074357610743612179565b83815260406020820152600061098b60408301848661213c565b601f8211156115c5576000816000526020600020601f850160051c8101602086101561225d5750805b601f850160051c820191505b81811015610a2757828155600101612269565b815167ffffffffffffffff81111561229657612296611e44565b6122aa816122a48454612102565b84612234565b602080601f8311600181146122df57600084156122c75750858301515b600019600386901b1c1916600185901b178555610a27565b600085815260208120601f198616915b8281101561230e578886015182559484019460019091019084016122ef565b508582101561232c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60ff818116838216019081111561074357610743612179565b6040815260006123686040830185611a93565b828103602084015261098b8185611a9356fea2646970667358221220bee7b6b8a910bcecb1e838fde4f95495b5500ed45c883cd9639983d4dbc470f064736f6c6343000819003360c060405234801561001057600080fd5b5060405161248338038061248383398101604081905261002f9161026f565b6003805460ff191690556001600160a01b03828116608052600580546001600160a01b03191691851691821790556040518291899189916000918891829184907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061009f848461012f565b505050506001600160a01b031660a052600a84905560096100c086826103c2565b506000600b819055604051636427ed9760e01b815260048101919091526001600160a01b03831690636427ed9790602401600060405180830381600087803b15801561010b57600080fd5b505af115801561011f573d6000803e3d6000fd5b50505050505050505050506104db565b600761013b83826103c2565b50600661014882826103c2565b507f6c20b91d1723b78732eba64ff11ebd7966a6e4af568a00fa4f6b72c20f58b02a818360405161017a9291906104ad565b60405180910390a15050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101b757818101518382015260200161019f565b50506000910152565b600082601f8301126101d157600080fd5b81516001600160401b03808211156101eb576101eb610186565b604051601f8301601f19908116603f0116810190828211818310171561021357610213610186565b8160405283815286602085880101111561022c57600080fd5b61023d84602083016020890161019c565b9695505050505050565b6001600160a01b038116811461025c57600080fd5b50565b805161026a81610247565b919050565b600080600080600080600060e0888a03121561028a57600080fd5b87516001600160401b03808211156102a157600080fd5b6102ad8b838c016101c0565b985060208a01519150808211156102c357600080fd5b6102cf8b838c016101c0565b975060408a01519150808211156102e557600080fd5b506102f28a828b016101c0565b95505060608801519350608088015161030a81610247565b60a089015190935061031b81610247565b915061032960c0890161025f565b905092959891949750929550565b600181811c9082168061034b57607f821691505b60208210810361036b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156103bd576000816000526020600020601f850160051c8101602086101561039a5750805b601f850160051c820191505b818110156103b9578281556001016103a6565b5050505b505050565b81516001600160401b038111156103db576103db610186565b6103ef816103e98454610337565b84610371565b602080601f831160018114610424576000841561040c5750858301515b600019600386901b1c1916600185901b1785556103b9565b600085815260208120601f198616915b8281101561045357888601518255948401946001909101908401610434565b50858210156104715787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000815180845261049981602086016020860161019c565b601f01601f19169290920160200192915050565b6040815260006104c06040830185610481565b82810360208401526104d28185610481565b95945050505050565b60805160a051611f5961052a600039600081816102f601526114200152600081816105420152818161073c01528181610b8a01528181610d3401528181610f3801526113250152611f596000f3fe608060405234801561001057600080fd5b50600436106102695760003560e01c80636091811711610151578063b0d04c7a116100c3578063ddceafa911610087578063ddceafa91461053d578063e5b824ec14610564578063f2fde38b14610577578063f54fc0601461058a578063f5c0b95f1461059d578063ffa1ad74146105b057600080fd5b8063b0d04c7a146104f4578063c18172c4146104fc578063d50256251461050f578063d505accf14610517578063dd62ed3e1461052a57600080fd5b80637dc2cd98116101155780637dc2cd981461048a5780637ecebe00146104935780638da5cb5b146104b357806395d89b41146104c6578063a77384c1146104ce578063a9059cbb146104e157600080fd5b80636091811714610435578063648bf7741461043e57806370a082311461045157806377e071ad1461046457806378f86afc1461047757600080fd5b80633644e515116101ea5780634029a3ce116101ae5780634029a3ce146103c357806340c10f19146103d657806342966c68146103e9578063487346b2146103fc5780635c707f071461040f5780635d6624b71461042257600080fd5b80633644e5151461038357806337a8129c1461038b5780633a1cdf32146103945780633a98ef39146103a75780634000aea0146103b057600080fd5b80631f0f06aa116102315780631f0f06aa1461031857806323b872dd1461032d5780632a0a4ed514610340578063313ce5671461035157806332a7ae951461037057600080fd5b806306fdde031461026e578063095ea7b31461028c5780630c6f0e5d146102af57806318160ddd146102df57806318efcce5146102f1575b600080fd5b6102766105b8565b60405161028391906116fc565b60405180910390f35b61029f61029a366004611724565b610646565b6040519015158152602001610283565b6003546102c79061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610283565b6002545b604051908152602001610283565b6102c77f000000000000000000000000000000000000000000000000000000000000000081565b61032b610326366004611799565b61065d565b005b61029f61033b3660046117db565b6106a2565b6005546001600160a01b03166102c7565b60035461035e9060ff1681565b60405160ff9091168152602001610283565b61032b61037e36600461181c565b610703565b6102e361079b565b6102e3600b5481565b61032b6103a2366004611724565b6107f4565b6102e3600a5481565b61029f6103be366004611839565b61080a565b61032b6103d13660046118da565b61089b565b61032b6103e4366004611724565b610936565b61032b6103f736600461193a565b610948565b61032b61040a366004611953565b610960565b61032b61041d366004611aa5565b610abf565b61032b610430366004611839565b610ad1565b6102e360045481565b61032b61044c366004611b09565b610b85565b6102e361045f36600461181c565b610bc1565b6102e361047236600461181c565b610be5565b61032b610485366004611b42565b610c2f565b62ed4e006102e3565b6102e36104a136600461181c565b60086020526000908152604090205481565b6005546102c7906001600160a01b031681565b610276610c7e565b61032b6104dc36600461193a565b610c8b565b61029f6104ef366004611724565b610cff565b6102e3610d12565b61032b61050a36600461181c565b610d2f565b610276610d65565b61032b610525366004611b90565b610d72565b6102e3610538366004611b09565b610f27565b6102c77f000000000000000000000000000000000000000000000000000000000000000081565b61032b61057236600461181c565b610f33565b61032b61058536600461181c565b610f69565b61032b610598366004611bfe565b610fcd565b61029f6105ab366004611c71565b611069565b61035e600481565b600680546105c590611ca6565b80601f01602080910402602001604051908101604052809291908181526020018280546105f190611ca6565b801561063e5780601f106106135761010080835404028352916020019161063e565b820191906000526020600020905b81548152906001019060200180831161062157829003601f168201915b505050505081565b6000610653338484611075565b5060015b92915050565b6106656110d7565b7f07ce702fc13ca0620c174dab22996a6d5fd9e7accb663555a4e85323692706ba8282604051610696929190611d09565b60405180910390a15050565b60006106af848484611106565b60006106bb8533610f27565b9050600160ff1b8110156106f8576106d38382611d33565b6001600160a01b03861660009081526001602090815260408083203384529091529020555b506001949350505050565b61071d6107186005546001600160a01b031690565b61115f565b6040516332a7ae9560e01b81526001600160a01b0382811660048301527f000000000000000000000000000000000000000000000000000000000000000016906332a7ae9590602401600060405180830381600087803b15801561078057600080fd5b505af1158015610794573d6000803e3d6000fd5b5050505050565b604080517f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692186020820152469181019190915230606082015260009060800160405160208183030381529060405280519060200120905090565b6107fc6110d7565b610806828261118a565b5050565b60006108168585610cff565b80156108925750604051635260769b60e11b81526001600160a01b0386169063a4c0ed369061084f903390889088908890600401611d46565b6020604051808303816000875af115801561086e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108929190611d78565b95945050505050565b6108a36110d7565b828181146108d357604051634ee401dd60e11b815260048101829052602481018390526044015b60405180910390fd5b60005b8181101561092e576109268686838181106108f3576108f3611d9a565b9050602002016020810190610908919061181c565b85858481811061091a5761091a611d9a565b905060200201356111e9565b6001016108d6565b505050505050565b61093e6110d7565b61080682826111e9565b610953333083611106565b61095d3082611240565b50565b8583811461098b57604051634ee401dd60e11b815260048101829052602481018590526044016108ca565b6000805b828110156109c5578686828181106109a9576109a9611d9a565b90506020020135826109bb9190611db0565b915060010161098f565b506109d08782610936565b60005b82811015610ab357876001600160a01b031663a4c0ed368b8b848181106109fc576109fc611d9a565b9050602002016020810190610a11919061181c565b898985818110610a2357610a23611d9a565b9050602002013588886040518563ffffffff1660e01b8152600401610a4b9493929190611d46565b6020604051808303816000875af1158015610a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8e9190611d78565b610aab57604051631956a44d60e31b815260040160405180910390fd5b6001016109d3565b50505050505050505050565b610ac76110d7565b61080682826112a8565b610ad96110d7565b6000610ae485610bc1565b905080841115610b205760405163391434e360e21b81526001600160a01b038616600482015260248101829052604481018590526064016108ca565b83600b6000828254610b329190611db0565b92505081905550846001600160a01b03167f0a605cd1294f60fa3b73548ac68428f33300a051f225afcdcc75e56083c96ee7858585604051610b7693929190611dc3565b60405180910390a25050505050565b610bae7f000000000000000000000000000000000000000000000000000000000000000061115f565b6108068282610bbc85610bc1565b611106565b6001600160a01b03166000908152602081905260409020546001600160e01b031690565b6000306001600160a01b03831603610bff57506001919050565b6003546001600160a01b03610100909104811690831603610c2257505060045490565b506000919050565b919050565b610c376110d7565b6009610c438282611e25565b507fe9f2468ecc8d3dff15a70a5909151e6297cee4cf05268eff3d7ef0c696ec50f281604051610c7391906116fc565b60405180910390a150565b600780546105c590611ca6565b610c936110d7565b6000610c9d610d12565b905080821015610cca5760405163e9ccb41b60e01b815260048101829052602481018390526044016108ca565b600a8290556040518281527fdcbf73bf1e396dbe03ccbcd29c0aa52eb8028ae24726098296357286de4f5b2690602001610696565b6000610d0b83836112f3565b9392505050565b6000600b54610d2060025490565b610d2a9190611d33565b905090565b610d587f000000000000000000000000000000000000000000000000000000000000000061115f565b61095d81600a6001611392565b600980546105c590611ca6565b42841015610d9c57604051630b99fc4b60e31b8152600481018590524260248201526044016108ca565b60006001610da861079b565b6001600160a01b038a811660008181526008602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015610eb4573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580610ee95750876001600160a01b0316816001600160a01b031614155b15610f1257604051632f52260d60e11b81526001600160a01b03821660048201526024016108ca565b610f1d818888611075565b5050505050505050565b6000610d0b83836113f6565b610f5c7f000000000000000000000000000000000000000000000000000000000000000061115f565b61095d81600a6000611392565b610f716110d7565b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b610fd78484610936565b604051635260769b60e11b81526001600160a01b0385169063a4c0ed3690611009908890879087908790600401611d46565b6020604051808303816000875af1158015611028573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104c9190611d78565b61079457604051631956a44d60e31b815260040160405180910390fd5b6000610d0b83836114c7565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6005546001600160a01b03163314611104576040516396a19be960e01b81523360048201526024016108ca565b565b6111108382611507565b61111a82826115a4565b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516110ca91815260200190565b336001600160a01b0382161461095d57604051634b637e8f60e11b81523360048201526024016108ca565b60038054610100600160a81b0319166101006001600160a01b0385811682029290921792839055909104166111c25760006004555050565b806000036111e357604051630ece93db60e41b815260040160405180910390fd5b60045550565b6000816111f4610d12565b6111fe9190611db0565b9050600a5481111561123157600a546040516340a8005d60e11b81526004810191909152602481018290526044016108ca565b61123b8383611649565b505050565b80600260008282546112529190611d33565b9091555061126290508282611507565b6040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b60076112b48382611e25565b5060066112c18282611e25565b507f6c20b91d1723b78732eba64ff11ebd7966a6e4af568a00fa4f6b72c20f58b02a8183604051610696929190611ee5565b60006112ff83836116a9565b5061130b33600a6114c7565b15610653576040516304d301a360e41b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634d301a3090602401600060405180830381600087803b15801561137157600080fd5b505af1158015611385573d6000803e3d6000fd5b5050505050600192915050565b600061139f8360e0611f0a565b6001600160a01b038516600090815260208190526040902054600160ff929092169190911b9150808216821483151514610794576001600160a01b0394909416600090815260208190526040902093189092555050565b604051632fb6b53160e11b81526001600160a01b03838116600483015282811660248301526000917f000000000000000000000000000000000000000000000000000000000000000090911690635f6d6a6290604401602060405180830381865afa158015611469573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148d9190611d78565b1561149b5750600019610657565b506001600160a01b03828116600090815260016020908152604080832093851683529290522054610657565b6000806114d58360e0611f0a565b6001600160a01b038516600090815260208190526040902054600160ff929092169190911b9081161491505092915050565b6001600160a01b0382166000908152602081905260408120549061152b8383611d33565b90506001600160e01b031981166001600160e01b0319831614611583578361155285610bc1565b60405163391434e360e21b81526001600160a01b0390921660048301526024820152604481018490526064016108ca565b6001600160a01b039093166000908152602081905260409020929092555050565b6001600160a01b0382166115d65760405163ec442f0560e01b81526001600160a01b03831660048201526024016108ca565b6001600160a01b038216600090815260208190526040812054906115fa8383611db0565b90506001600160e01b031981166001600160e01b031983161461158357604051634a2e08e560e01b81526001600160a01b038516600482015260248101839052604481018490526064016108ca565b806002600082825461165b9190611db0565b9091555061166b905082826115a4565b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161129c565b6000610653338484611106565b6000815180845260005b818110156116dc576020818501810151868301820152016116c0565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610d0b60208301846116b6565b6001600160a01b038116811461095d57600080fd5b6000806040838503121561173757600080fd5b82356117428161170f565b946020939093013593505050565b60008083601f84011261176257600080fd5b50813567ffffffffffffffff81111561177a57600080fd5b60208301915083602082850101111561179257600080fd5b9250929050565b600080602083850312156117ac57600080fd5b823567ffffffffffffffff8111156117c357600080fd5b6117cf85828601611750565b90969095509350505050565b6000806000606084860312156117f057600080fd5b83356117fb8161170f565b9250602084013561180b8161170f565b929592945050506040919091013590565b60006020828403121561182e57600080fd5b8135610d0b8161170f565b6000806000806060858703121561184f57600080fd5b843561185a8161170f565b935060208501359250604085013567ffffffffffffffff81111561187d57600080fd5b61188987828801611750565b95989497509550505050565b60008083601f8401126118a757600080fd5b50813567ffffffffffffffff8111156118bf57600080fd5b6020830191508360208260051b850101111561179257600080fd5b600080600080604085870312156118f057600080fd5b843567ffffffffffffffff8082111561190857600080fd5b61191488838901611895565b9096509450602087013591508082111561192d57600080fd5b5061188987828801611895565b60006020828403121561194c57600080fd5b5035919050565b60008060008060008060006080888a03121561196e57600080fd5b873567ffffffffffffffff8082111561198657600080fd5b6119928b838c01611895565b909950975060208a013591506119a78261170f565b909550604089013590808211156119bd57600080fd5b6119c98b838c01611895565b909650945060608a01359150808211156119e257600080fd5b506119ef8a828b01611750565b989b979a50959850939692959293505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611a2957600080fd5b813567ffffffffffffffff80821115611a4457611a44611a02565b604051601f8301601f19908116603f01168101908282118183101715611a6c57611a6c611a02565b81604052838152866020858801011115611a8557600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215611ab857600080fd5b823567ffffffffffffffff80821115611ad057600080fd5b611adc86838701611a18565b93506020850135915080821115611af257600080fd5b50611aff85828601611a18565b9150509250929050565b60008060408385031215611b1c57600080fd5b8235611b278161170f565b91506020830135611b378161170f565b809150509250929050565b600060208284031215611b5457600080fd5b813567ffffffffffffffff811115611b6b57600080fd5b611b7784828501611a18565b949350505050565b803560ff81168114610c2a57600080fd5b600080600080600080600060e0888a031215611bab57600080fd5b8735611bb68161170f565b96506020880135611bc68161170f565b95506040880135945060608801359350611be260808901611b7f565b925060a0880135915060c0880135905092959891949750929550565b600080600080600060808688031215611c1657600080fd5b8535611c218161170f565b94506020860135611c318161170f565b935060408601359250606086013567ffffffffffffffff811115611c5457600080fd5b611c6088828901611750565b969995985093965092949392505050565b60008060408385031215611c8457600080fd5b8235611c8f8161170f565b9150611c9d60208401611b7f565b90509250929050565b600181811c90821680611cba57607f821691505b602082108103611cda57634e487b7160e01b600052602260045260246000fd5b50919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000611b77602083018486611ce0565b634e487b7160e01b600052601160045260246000fd5b8181038181111561065757610657611d1d565b60018060a01b0385168152836020820152606060408201526000611d6e606083018486611ce0565b9695505050505050565b600060208284031215611d8a57600080fd5b81518015158114610d0b57600080fd5b634e487b7160e01b600052603260045260246000fd5b8082018082111561065757610657611d1d565b838152604060208201526000610892604083018486611ce0565b601f82111561123b576000816000526020600020601f850160051c81016020861015611e065750805b601f850160051c820191505b8181101561092e57828155600101611e12565b815167ffffffffffffffff811115611e3f57611e3f611a02565b611e5381611e4d8454611ca6565b84611ddd565b602080601f831160018114611e885760008415611e705750858301515b600019600386901b1c1916600185901b17855561092e565b600085815260208120601f198616915b82811015611eb757888601518255948401946001909101908401611e98565b5085821015611ed55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604081526000611ef860408301856116b6565b828103602084015261089281856116b6565b60ff818116838216019081111561065757610657611d1d56fea264697066735822122046e6f80fc771f9b49ec51675a413472d6b88dacff8307eee0a52bb7786c4231d64736f6c63430008190033a2646970667358221220735e26352bd8c21cec0d0e2df1ae9810428fa6d3528c6041b350e2143feb7fe364736f6c63430008190033",
  "devdoc": {
    "author": "rube ",
    "details": "Factory to deploy shares contracts",
    "events": {
      "AllowlistDraggableFactoryUpdated(address)": {
        "params": {
          "factory": "The new allowlist draggable token factory"
        }
      },
      "BaseTokenCreated(address,address,bool)": {
        "params": {
          "allowlist": "Indicates if the token has an allowlist",
          "owner": "The owner of the token",
          "token": "The created token"
        }
      },
      "DraggableTokenCreated(address,address,address,bool)": {
        "params": {
          "allowlist": "Indicates if the token has an allowlist",
          "baseToken": "The base token associated with the draggable token",
          "draggable": "The created draggable token",
          "owner": "The owner of the draggable token"
        }
      },
      "DraggableTokenFactoryUpdated(address)": {
        "params": {
          "factory": "The new draggable token factory"
        }
      },
      "FactoryManagerUpdated(address)": {
        "params": {
          "manager": "The new factory manager"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_allowlistDraggableFactory": "The address of the allowlist draggable token factory",
          "_draggableFactory": "The address of the draggable token factory",
          "_owner": "The address of the contract owner"
        }
      },
      "createToken((string,string,string,bool,bool,uint256,uint256,uint256,uint256),address,string)": {
        "params": {
          "tokenConfig": "Configuration of the token to be created",
          "tokenOwner": "The owner of the new token"
        },
        "returns": {
          "_0": "The address of the created token"
        }
      },
      "getAllDraggableShares()": {
        "returns": {
          "_0": "An array of addresses of created draggable share tokens"
        }
      },
      "getAllShares()": {
        "returns": {
          "_0": "An array of addresses of created share tokens"
        }
      },
      "setAllowlistDraggableFactory(address)": {
        "params": {
          "_allowlistDraggableFactory": "The new allowlist draggable token factory"
        }
      },
      "setDraggableTokenFactory(address)": {
        "params": {
          "_draggableFactory": "The new draggable token factory"
        }
      },
      "setManager(address)": {
        "params": {
          "_manager": "The new factory manager"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_draggableSet": {
        "details": "Set of addresses for created draggable tokens"
      },
      "_sharesSet": {
        "details": "Set of addresses for created share tokens"
      }
    },
    "title": "TokenFactory",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidOwner()": [
        {
          "notice": "Error for invalid owner address"
        }
      ]
    },
    "events": {
      "AllowlistDraggableFactoryUpdated(address)": {
        "notice": "Emitted when the allowlist draggable token factory is updated"
      },
      "BaseTokenCreated(address,address,bool)": {
        "notice": "Emitted when a base token is created"
      },
      "DraggableTokenCreated(address,address,address,bool)": {
        "notice": "Emitted when a draggable token is created"
      },
      "DraggableTokenFactoryUpdated(address)": {
        "notice": "Emitted when the draggable token factory is updated"
      },
      "FactoryManagerUpdated(address)": {
        "notice": "Emitted when the factory manager is updated"
      }
    },
    "kind": "user",
    "methods": {
      "allowlistDraggableFactory()": {
        "notice": "Allowlist draggable token factory contract"
      },
      "constructor": {
        "notice": "Constructor for TokenFactory"
      },
      "createToken((string,string,string,bool,bool,uint256,uint256,uint256,uint256),address,string)": {
        "notice": "Creates a new token"
      },
      "draggableFactory()": {
        "notice": "Draggable token factory contract"
      },
      "getAllDraggableShares()": {
        "notice": "Gets all created draggable share tokens"
      },
      "getAllShares()": {
        "notice": "Gets all created share tokens"
      },
      "manager()": {
        "notice": "Factory manager contract"
      },
      "setAllowlistDraggableFactory(address)": {
        "notice": "Sets the allowlist draggable token factory"
      },
      "setDraggableTokenFactory(address)": {
        "notice": "Sets the draggable token factory"
      },
      "setManager(address)": {
        "notice": "Sets the factory manager"
      }
    },
    "notice": "This contract allows the creation of share tokens with optional draggable functionality and allowlist features.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9406,
        "contract": "src/utils/factory/TokenFactory.sol:TokenFactory",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10676,
        "contract": "src/utils/factory/TokenFactory.sol:TokenFactory",
        "label": "manager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(FactoryManager)10615"
      },
      {
        "astId": 10680,
        "contract": "src/utils/factory/TokenFactory.sol:TokenFactory",
        "label": "draggableFactory",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(DraggableTokenFactory)10463"
      },
      {
        "astId": 10684,
        "contract": "src/utils/factory/TokenFactory.sol:TokenFactory",
        "label": "allowlistDraggableFactory",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AllowlistDraggableFactory)10161"
      },
      {
        "astId": 10688,
        "contract": "src/utils/factory/TokenFactory.sol:TokenFactory",
        "label": "_sharesSet",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(AddressSet)437_storage"
      },
      {
        "astId": 10692,
        "contract": "src/utils/factory/TokenFactory.sol:TokenFactory",
        "label": "_draggableSet",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(AddressSet)437_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AllowlistDraggableFactory)10161": {
        "encoding": "inplace",
        "label": "contract AllowlistDraggableFactory",
        "numberOfBytes": "20"
      },
      "t_contract(DraggableTokenFactory)10463": {
        "encoding": "inplace",
        "label": "contract DraggableTokenFactory",
        "numberOfBytes": "20"
      },
      "t_contract(FactoryManager)10615": {
        "encoding": "inplace",
        "label": "contract FactoryManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)437_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 436,
            "contract": "src/utils/factory/TokenFactory.sol:TokenFactory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)136_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)136_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 131,
            "contract": "src/utils/factory/TokenFactory.sol:TokenFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 135,
            "contract": "src/utils/factory/TokenFactory.sol:TokenFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}