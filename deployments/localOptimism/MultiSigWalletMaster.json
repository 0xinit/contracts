{
  "address": "0x998abeb3E57409262aE5b751f60747921B33613E",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "cosignaturesNeeded",
          "type": "uint8"
        }
      ],
      "name": "SignerChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "signers",
          "type": "address[]"
        }
      ],
      "name": "Transacted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_INCREASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "checkExecution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "nonce",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint8[]",
          "name": "v",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "r",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "s",
          "type": "bytes32[]"
        }
      ],
      "name": "checkSignatures",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractId",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "nonce",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint8[]",
          "name": "v",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "r",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "s",
          "type": "bytes32[]"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "nonce",
          "type": "uint128"
        }
      ],
      "name": "isFree",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "cosignaturesNeeded",
          "type": "uint8"
        }
      ],
      "name": "setSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signerCount",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "signers",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "transactionHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint8[]",
          "name": "v",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "r",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "s",
          "type": "bytes32[]"
        }
      ],
      "name": "verifySignatures",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xde06315ab8784fad0ec3b1229ec5598c65247273aeb22c8db6044c7cdb8a1dd9",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x998abeb3E57409262aE5b751f60747921B33613E",
    "transactionIndex": 0,
    "gasUsed": "1834494",
    "logsBloom": "0x
    "blockHash": "0x9d97ea63d2bc4a599019b66261d8bb8e8f8890f04c76d2b98a98dbed8cf5f1fd",
    "transactionHash": "0xde06315ab8784fad0ec3b1229ec5598c65247273aeb22c8db6044c7cdb8a1dd9",
    "logs": [],
    "blockNumber": 60,
    "cumulativeGasUsed": "1834494",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "fd870869e27fbe5d74fc8fc7a9ddf640",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"cosignaturesNeeded\",\"type\":\"uint8\"}],\"name\":\"SignerChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"}],\"name\":\"Transacted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_INCREASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"checkExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"nonce\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"checkSignatures\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractId\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"nonce\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"nonce\",\"type\":\"uint128\"}],\"name\":\"isFree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"cosignaturesNeeded\",\"type\":\"uint8\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"verifySignatures\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkExecution(address,uint256,bytes)\":{\"notice\":\"Checks if the execution of a transaction would succeed if it was properly signed.\"},\"checkSignatures(uint128,address,uint256,bytes,uint8[],bytes32[],bytes32[])\":{\"notice\":\"Checks if the provided signatures suffice to sign the transaction and if the nonce is correct.\"},\"isFree(uint128)\":{\"notice\":\"Returns whether the provided nonce can be used. For the 100 nonces in the interval [nextNonce(), nextNonce + 99], this is always true. For the nonces in the interval [nextNonce() - 129, nextNonce() - 1], this is true for the nonces that have not been used yet.\"},\"nextNonce()\":{\"notice\":\"The next recommended nonce, which is the highest nonce ever used plus one.\"},\"setSigner(address,uint8)\":{\"notice\":\"Call this method through execute\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/multisig/MultiSigWallet.sol\":\"MultiSigWallet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"src/libraries/RLPEncode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.0;\\n/**\\n * @title RLPEncode\\n * @dev A simple RLP encoding library.\\n * @author Bakaoh\\n */\\nlibrary RLPEncode {\\n    /*\\n     * Internal functions\\n     */\\n\\n    /**\\n     * @dev RLP encodes a byte string.\\n     * @param self The byte string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function encodeBytes(bytes memory self) internal pure returns (bytes memory) {\\n        bytes memory encoded;\\n        if (self.length == 1 && uint8(self[0]) <= 128) {\\n            encoded = self;\\n        } else {\\n            encoded = concat(encodeLength(self.length, 128), self);\\n        }\\n        return encoded;\\n    }\\n\\n    /**\\n     * @dev RLP encodes a list of RLP encoded byte byte strings.\\n     * @param self The list of RLP encoded byte strings.\\n     * @return The RLP encoded list of items in bytes.\\n     */\\n    function encodeList(bytes[] memory self) internal pure returns (bytes memory) {\\n        bytes memory list = flatten(self);\\n        return concat(encodeLength(list.length, 192), list);\\n    }\\n\\n    /**\\n     * @dev RLP encodes a string.\\n     * @param self The string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function encodeString(string memory self) internal pure returns (bytes memory) {\\n        return encodeBytes(bytes(self));\\n    }\\n\\n    /** \\n     * @dev RLP encodes an address.\\n     * @param self The address to encode.\\n     * @return The RLP encoded address in bytes.\\n     */\\n    function encodeAddress(address self) internal pure returns (bytes memory) {\\n        bytes memory inputBytes;\\n        assembly {\\n            let m := mload(0x40)\\n            mstore(add(m, 20), xor(0x140000000000000000000000000000000000000000, self))\\n            mstore(0x40, add(m, 52))\\n            inputBytes := m\\n        }\\n        return encodeBytes(inputBytes);\\n    }\\n\\n    /** \\n     * @dev RLP encodes a uint.\\n     * @param self The uint to encode.\\n     * @return The RLP encoded uint in bytes.\\n     */\\n    function encodeUint(uint self) internal pure returns (bytes memory) {\\n        return encodeBytes(toBinary(self));\\n    }\\n\\n    /** \\n     * @dev RLP encodes an int.\\n     * @param self The int to encode.\\n     * @return The RLP encoded int in bytes.\\n     */\\n    function encodeInt(int self) internal pure returns (bytes memory) {\\n        return encodeUint(uint(self));\\n    }\\n\\n    /** \\n     * @dev RLP encodes a bool.\\n     * @param self The bool to encode.\\n     * @return The RLP encoded bool in bytes.\\n     */\\n    function encodeBool(bool self) internal pure returns (bytes memory) {\\n        bytes memory encoded = new bytes(1);\\n        encoded[0] = (self ? bytes1(0x01) : bytes1(0x80));\\n        return encoded;\\n    }\\n\\n\\n    /*\\n     * Private functions\\n     */\\n\\n    /**\\n     * @dev Encode the first byte, followed by the `len` in binary form if `length` is more than 55.\\n     * @param len The length of the string or the payload.\\n     * @param offset 128 if item is string, 192 if item is list.\\n     * @return RLP encoded bytes.\\n     */\\n    function encodeLength(uint len, uint offset) private pure returns (bytes memory) {\\n        bytes memory encoded;\\n        if (len < 56) {\\n            encoded = new bytes(1);\\n            encoded[0] = bytes32(len + offset)[31];\\n        } else {\\n            uint lenLen;\\n            uint i = 1;\\n            while (len / i != 0) {\\n                lenLen++;\\n                i *= 256;\\n            }\\n\\n            encoded = new bytes(lenLen + 1);\\n            encoded[0] = bytes32(lenLen + offset + 55)[31];\\n            for(i = 1; i <= lenLen; i++) {\\n                encoded[i] = bytes32((len / (256**(lenLen-i))) % 256)[31];\\n            }\\n        }\\n        return encoded;\\n    }\\n\\n    /**\\n     * @dev Encode integer in big endian binary form with no leading zeroes.\\n     * @notice TODO: This should be optimized with assembly to save gas costs.\\n     * @param _x The integer to encode.\\n     * @return RLP encoded bytes.\\n     */\\n    function toBinary(uint _x) private pure returns (bytes memory) {\\n        bytes memory b = new bytes(32);\\n        assembly { \\n            mstore(add(b, 32), _x) \\n        }\\n        uint i;\\n        for (i = 0; i < 32; i++) {\\n            if (b[i] != 0) {\\n                break;\\n            }\\n        }\\n        bytes memory res = new bytes(32 - i);\\n        for (uint j = 0; j < res.length; j++) {\\n            res[j] = b[i++];\\n        }\\n        return res;\\n    }\\n\\n    /**\\n     * @dev Copies a piece of memory to another location.\\n     * @notice From: https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol.\\n     * @param _dest Destination location.\\n     * @param _src Source location.\\n     * @param _len Length of memory to copy.\\n     */\\n    function memcpy(uint _dest, uint _src, uint _len) private pure {\\n        uint dest = _dest;\\n        uint src = _src;\\n        uint len = _len;\\n\\n        for(; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        uint mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /**\\n     * @dev Flattens a list of byte strings into one byte string.\\n     * @notice From: https://github.com/sammayo/solidity-rlp-encoder/blob/master/RLPEncode.sol.\\n     * @param _list List of byte strings to flatten.\\n     * @return The flattened byte string.\\n     */\\n    function flatten(bytes[] memory _list) private pure returns (bytes memory) {\\n        if (_list.length == 0) {\\n            return new bytes(0);\\n        }\\n\\n        uint len;\\n        uint i;\\n        for (i = 0; i < _list.length; i++) {\\n            len += _list[i].length;\\n        }\\n\\n        bytes memory flattened = new bytes(len);\\n        uint flattenedPtr;\\n        assembly { flattenedPtr := add(flattened, 0x20) }\\n\\n        for(i = 0; i < _list.length; i++) {\\n            bytes memory item = _list[i];\\n            \\n            uint listPtr;\\n            assembly { listPtr := add(item, 0x20)}\\n\\n            memcpy(flattenedPtr, listPtr, item.length);\\n            flattenedPtr += _list[i].length;\\n        }\\n\\n        return flattened;\\n    }\\n\\n    /**\\n     * @dev Concatenates two bytes.\\n     * @notice From: https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol.\\n     * @param _preBytes First byte string.\\n     * @param _postBytes Second byte string.\\n     * @return Both byte string combined.\\n     */\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) private pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            tempBytes := mload(0x40)\\n\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            let mc := add(tempBytes, 0x20)\\n            let end := add(mc, length)\\n\\n            for {\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            mc := end\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31)\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n}\",\"keccak256\":\"0x73053fc8ea64c66c1dbaf02badb30ba48d700f5107c8f1ed7a56291b4cccc916\",\"license\":\"MIT\"},\"src/multisig/MultiSigWallet.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../libraries/RLPEncode.sol\\\";\\nimport \\\"../utils/Nonce.sol\\\";\\n\\ncontract MultiSigWallet is Nonce, Initializable {\\n\\n  mapping (address => uint8) public signers; // The addresses that can co-sign transactions and the number of signatures needed\\n\\n  uint16 public signerCount;\\n  bytes public contractId; // most likely unique id of this contract\\n\\n  event SignerChange(\\n    address indexed signer,\\n    uint8 cosignaturesNeeded\\n  );\\n\\n  event Transacted(\\n    address indexed toAddress,  // The address the transaction was sent to\\n    bytes4 selector, // selected operation\\n    address[] signers // Addresses of the signers used to initiate the transaction\\n  );\\n\\n  constructor () {\\n  }\\n\\n  function initialize(address owner) external initializer {\\n    // We use the gas price to get a unique id into our transactions.\\n    // Note that 32 bits do not guarantee that no one can generate a contract with the\\n    // same id, but it practically rules out that someone accidentally creates two\\n    // two multisig contracts with the same id, and that's all we need to prevent\\n    // replay-attacks.\\n    contractId = toBytes(uint32(uint160(address(this))));\\n    _setSigner(owner, 1); // set initial owner\\n  }\\n\\n  /**\\n   * It should be possible to store ether on this address.\\n   */\\n  receive() external payable {\\n  }\\n\\n  /**\\n   * Checks if the provided signatures suffice to sign the transaction and if the nonce is correct.\\n   */\\n  function checkSignatures(uint128 nonce, address to, uint value, bytes calldata data,\\n    uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s) external view returns (address[] memory) {\\n    bytes32 transactionHash = calculateTransactionHash(nonce, contractId, to, value, data);\\n    return verifySignatures(transactionHash, v, r, s);\\n  }\\n\\n  /**\\n   * Checks if the execution of a transaction would succeed if it was properly signed.\\n   */\\n  function checkExecution(address to, uint value, bytes calldata data) external {\\n    Address.functionCallWithValue(to, data, value);\\n    require(false, \\\"Test passed. Reverting.\\\");\\n  }\\n\\n  function execute(uint128 nonce, address to, uint value, bytes calldata data, uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s) external returns (bytes memory) {\\n    bytes32 transactionHash = calculateTransactionHash(nonce, contractId, to, value, data);\\n    address[] memory found = verifySignatures(transactionHash, v, r, s);\\n    bytes memory returndata = Address.functionCallWithValue(to, data, value);\\n    flagUsed(nonce);\\n    emit Transacted(to, extractSelector(data), found);\\n    return returndata;\\n  }\\n\\n  function extractSelector(bytes calldata data) private pure returns (bytes4){\\n    if (data.length < 4){\\n      return bytes4(0);\\n    } else {\\n      return bytes4(data[0]) | (bytes4(data[1]) >> 8) | (bytes4(data[2]) >> 16) | (bytes4(data[3]) >> 24);\\n    }\\n  }\\n\\n  function toBytes(uint number) internal pure returns (bytes memory){\\n    uint len = 0;\\n    uint temp = 1;\\n    while (number >= temp){\\n      temp = temp << 8;\\n      len++;\\n    }\\n    temp = number;\\n    bytes memory data = new bytes(len);\\n    for (uint i = len; i>0; i--) {\\n      data[i-1] = bytes1(uint8(temp));\\n      temp = temp >> 8;\\n    }\\n    return data;\\n  }\\n\\n  // Note: does not work with contract creation\\n  function calculateTransactionHash(uint128 sequence, bytes memory id, address to, uint value, bytes calldata data)\\n    internal view returns (bytes32){\\n    bytes[] memory all = new bytes[](9);\\n    all[0] = toBytes(sequence); // sequence number instead of nonce\\n    all[1] = id; // contract id instead of gas price\\n    all[2] = toBytes(21000); // gas limit\\n    all[3] = abi.encodePacked(to);\\n    all[4] = toBytes(value);\\n    all[5] = data;\\n    all[6] = toBytes(block.chainid);\\n    all[7] = toBytes(0);\\n    for (uint i = 0; i<8; i++){\\n      all[i] = RLPEncode.encodeBytes(all[i]);\\n    }\\n    all[8] = all[7];\\n    return keccak256(RLPEncode.encodeList(all));\\n  }\\n\\n  function verifySignatures(bytes32 transactionHash, uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s)\\n    public view returns (address[] memory) {\\n    address[] memory found = new address[](r.length);\\n    for (uint i = 0; i < r.length; i++) {\\n      address signer = ecrecover(transactionHash, v[i], r[i], s[i]);\\n      uint8 cosignaturesNeeded = signers[signer];\\n      require(cosignaturesNeeded > 0 && cosignaturesNeeded <= r.length, \\\"cosigner error\\\");\\n      found[i] = signer;\\n    }\\n    requireNoDuplicates(found);\\n    return found;\\n  }\\n\\n  function requireNoDuplicates(address[] memory found) private pure {\\n    for (uint i = 0; i < found.length; i++) {\\n      for (uint j = i+1; j < found.length; j++) {\\n        require(found[i] != found[j], \\\"duplicate signature\\\");\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Call this method through execute\\n   */\\n  function setSigner(address signer, uint8 cosignaturesNeeded) external authorized {\\n    _setSigner(signer, cosignaturesNeeded);\\n    require(signerCount > 0);\\n  }\\n\\n  function migrate(address destination) external {\\n    _migrate(msg.sender, destination);\\n  }\\n\\n  function migrate(address source, address destination) external authorized {\\n    _migrate(source, destination);\\n  }\\n\\n  function _migrate(address source, address destination) private {\\n    require(signers[destination] == 0); // do not overwrite existing signer!\\n    _setSigner(destination, signers[source]);\\n    _setSigner(source, 0);\\n  }\\n\\n  function _setSigner(address signer, uint8 cosignaturesNeeded) private {\\n    require(!Address.isContract(signer), \\\"signer cannot be a contract\\\");\\n    uint8 prevValue = signers[signer];\\n    signers[signer] = cosignaturesNeeded;\\n    if (prevValue > 0 && cosignaturesNeeded == 0){\\n      signerCount--;\\n    } else if (prevValue == 0 && cosignaturesNeeded > 0){\\n      signerCount++;\\n    }\\n    emit SignerChange(signer, cosignaturesNeeded);\\n  }\\n\\n  modifier authorized() {\\n    require(address(this) == msg.sender || signers[msg.sender] == 1, \\\"not authorized\\\");\\n    _;\\n  }\\n\\n}\",\"keccak256\":\"0x1824d8f232fbe38a77634f97c4a8481c8020c63255d771585ac6e6ada2b5f717\",\"license\":\"MIT\"},\"src/utils/Nonce.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2020 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\n\\npragma solidity ^0.8.0;\\n\\ncontract Nonce {\\n\\n    uint256 public constant MAX_INCREASE = 100;\\n    \\n    uint256 private compound;\\n    \\n    constructor(){\\n        setBoth(128, 0);\\n    }\\n    \\n    /**\\n     * The next recommended nonce, which is the highest nonce ever used plus one.\\n     */\\n    function nextNonce() external view returns (uint256){\\n        return getMax() + 1;\\n    }\\n\\n    /**\\n     * Returns whether the provided nonce can be used.\\n     * For the 100 nonces in the interval [nextNonce(), nextNonce + 99], this is always true.\\n     * For the nonces in the interval [nextNonce() - 129, nextNonce() - 1], this is true for the nonces that have not been used yet.\\n     */ \\n    function isFree(uint128 nonce) external view returns (bool){\\n        uint128 max = getMax();\\n        return isValidHighNonce(max, nonce) || isValidLowNonce(max, getRegister(), nonce);\\n    }\\n\\n    /**\\n     * Flags the given nonce as used.\\n     * Reverts if the provided nonce is not free.\\n     */\\n    function flagUsed(uint128 nonce) internal {\\n        uint256 comp = compound;\\n        uint128 max = uint128(comp);\\n        uint128 reg = uint128(comp >> 128);\\n        if (isValidHighNonce(max, nonce)){\\n            setBoth(nonce, ((reg << 1) | 0x1) << (nonce - max - 1));\\n        } else if (isValidLowNonce(max, reg, nonce)){\\n            setBoth(max, uint128(reg | 0x1 << (max - nonce - 1)));\\n        } else {\\n            require(false);\\n        }\\n    }\\n    \\n    function getMax() private view returns (uint128) {\\n        return uint128(compound);\\n    }\\n    \\n    function getRegister() private view returns (uint128) {\\n        return uint128(compound >> 128);\\n    }\\n    \\n    function setBoth(uint128 max, uint128 reg) private {\\n        compound = uint256(reg) << 128 | max;\\n    }\\n\\n    function isValidHighNonce(uint128 max, uint128 nonce) private pure returns (bool){\\n        return nonce > max && nonce <= max + MAX_INCREASE;\\n    }\\n\\n    function isValidLowNonce(uint128 max, uint128 reg, uint256 nonce) private pure returns (bool){\\n        uint256 diff = max - nonce;\\n        return diff > 0 && diff <= 128 && ((0x1 << (diff - 1)) & reg == 0);\\n    }\\n    \\n}\",\"keccak256\":\"0xd95aeb9d834f2109164d279e7ee5277a9e8a8ef13f6f1c4733774d80e8fd21bc\",\"license\":\"LicenseRef-Aktionariat\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506080600055611fdd806100256000396000f3fe6080604052600436106100e15760003560e01c8063b5fe51631161007f578063cb6367d111610059578063cb6367d11461027d578063ce5494bb146102aa578063d69c3d30146102ca578063ecec0dfd146102df57600080fd5b8063b5fe51631461020d578063b6e404de1461023d578063c4d66de81461025d57600080fd5b8063736c0d5b116100bb578063736c0d5b146101655780637ca548c6146101a75780637cedbb80146101d55780638291286c146101f857600080fd5b80630f43d678146100ed5780631068361f1461010f57806348753d001461012f57600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b5061010d6101083660046119cb565b6102ff565b005b34801561011b57600080fd5b5061010d61012a36600461193e565b61037f565b34801561013b57600080fd5b5061014f61014a366004611ab4565b6103e6565b60405161015c9190611c86565b60405180910390f35b34801561017157600080fd5b50610195610180366004611923565b60026020526000908152604090205460ff1681565b60405160ff909116815260200161015c565b3480156101b357600080fd5b506003546101c29061ffff1681565b60405161ffff909116815260200161015c565b3480156101e157600080fd5b506101ea606481565b60405190815260200161015c565b34801561020457600080fd5b5061014f610551565b34801561021957600080fd5b5061022d610228366004611a99565b6105df565b604051901515815260200161015c565b34801561024957600080fd5b5061010d610258366004611971565b610623565b34801561026957600080fd5b5061010d610278366004611923565b6106b4565b34801561028957600080fd5b5061029d6102983660046119f5565b610796565b60405161015c9190611c51565b3480156102b657600080fd5b5061010d6102c5366004611923565b610979565b3480156102d657600080fd5b506101ea610986565b3480156102eb57600080fd5b5061029d6102fa366004611ab4565b6109a3565b3033148061031f57503360009081526002602052604090205460ff166001145b6103615760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b60448201526064015b60405180910390fd5b61036b82826109da565b60035461ffff1661037b57600080fd5b5050565b3033148061039f57503360009081526002602052604090205460ff166001145b6103dc5760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b6044820152606401610358565b61037b8282610b2a565b606060006104828d600480546103fb90611e9a565b80601f016020809104026020016040519081016040528092919081815260200182805461042790611e9a565b80156104745780601f1061044957610100808354040283529160200191610474565b820191906000526020600020905b81548152906001019060200180831161045757829003601f168201915b50505050508e8e8e8e610b82565b90506000610495828a8a8a8a8a8a610796565b905060006104e88e8d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508f610e04565b90506104f38f610e32565b8d6001600160a01b03167f64ada3f9bcd41ebd407b399dc401184273a19bc294825172626af05a15c95d256105288e8e610f0e565b84604051610537929190611c64565b60405180910390a29e9d5050505050505050505050505050565b6004805461055e90611e9a565b80601f016020809104026020016040519081016040528092919081815260200182805461058a90611e9a565b80156105d75780601f106105ac576101008083540402835291602001916105d7565b820191906000526020600020905b8154815290600101906020018083116105ba57829003601f168201915b505050505081565b6000806105eb60005490565b90506105f78184610fca565b8061061c575061061c8161060d60005460801c90565b856001600160801b031661100f565b9392505050565b6106658483838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250889250610e04915050565b5060405162461bcd60e51b815260206004820152601760248201527f54657374207061737365642e20526576657274696e672e0000000000000000006044820152606401610358565b50505050565b600154610100900460ff16806106cd575060015460ff16155b6107305760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610358565b600154610100900460ff16158015610752576001805461ffff19166101011790555b6107613063ffffffff16611064565b8051610775916004916020909101906117b8565b506107818260016109da565b801561037b576001805461ff00191690555050565b606060008467ffffffffffffffff8111156107b3576107b3611f68565b6040519080825280602002602001820160405280156107dc578160200160208202803683370190505b50905060005b8581101561096357600060018b8b8b8581811061080157610801611f52565b90506020020160208101906108169190611baa565b8a8a8681811061082857610828611f52565b9050602002013589898781811061084157610841611f52565b905060200201356040516000815260200160405260405161087e949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa1580156108a0573d6000803e3d6000fd5b505060408051601f1901516001600160a01b03811660009081526002602052919091205490925060ff16905080158015906108de575060ff81168810155b61091b5760405162461bcd60e51b815260206004820152600e60248201526d31b7b9b4b3b732b91032b93937b960911b6044820152606401610358565b8184848151811061092e5761092e611f52565b60200260200101906001600160a01b031690816001600160a01b0316815250505050808061095b90611ef7565b9150506107e2565b5061096d81611133565b98975050505050505050565b6109833382610b2a565b50565b60008054610995906001611c99565b6001600160801b0316905090565b606060006109b88d600480546103fb90611e9a565b90506109c981898989898989610796565b9d9c50505050505050505050505050565b813b15610a295760405162461bcd60e51b815260206004820152601b60248201527f7369676e65722063616e6e6f74206265206120636f6e747261637400000000006044820152606401610358565b6001600160a01b0382166000908152600260205260409020805460ff83811660ff19831617909255168015801590610a62575060ff8216155b15610a9b576003805461ffff16906000610a7b83611e65565b91906101000a81548161ffff021916908361ffff16021790555050610ae4565b60ff8116158015610aaf575060008260ff16115b15610ae4576003805461ffff16906000610ac883611ed5565b91906101000a81548161ffff021916908361ffff160217905550505b60405160ff831681526001600160a01b038416907f7f00bf87056fc9622b70d830cce34aa24d6c12881ebbc71d3bf22d0c5ae295b79060200160405180910390a2505050565b6001600160a01b03811660009081526002602052604090205460ff1615610b5057600080fd5b6001600160a01b038216600090815260026020526040902054610b7790829060ff166109da565b61037b8260006109da565b6040805160098082526101408201909252600091829190816020015b6060815260200190600190039081610b9e579050509050610bc7886001600160801b0316611064565b81600081518110610bda57610bda611f52565b60200260200101819052508681600181518110610bf957610bf9611f52565b6020026020010181905250610c0f615208611064565b81600281518110610c2257610c22611f52565b602002602001018190525085604051602001610c56919060609190911b6bffffffffffffffffffffffff1916815260140190565b60405160208183030381529060405281600381518110610c7857610c78611f52565b6020026020010181905250610c8c85611064565b81600481518110610c9f57610c9f611f52565b602002602001018190525083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250508351849250600591508110610cf557610cf5611f52565b6020026020010181905250610d0946611064565b81600681518110610d1c57610d1c611f52565b6020026020010181905250610d316000611064565b81600781518110610d4457610d44611f52565b602002602001018190525060005b6008811015610dad57610d7d828281518110610d7057610d70611f52565b6020026020010151611207565b828281518110610d8f57610d8f611f52565b60200260200101819052508080610da590611ef7565b915050610d52565b5080600781518110610dc157610dc1611f52565b602002602001015181600881518110610ddc57610ddc611f52565b6020026020010181905250610df081611257565b805190602001209150509695505050505050565b6060610e2a848484604051806060016040528060298152602001611f7f6029913961127b565b949350505050565b60005480608081901c610e458285610fca565b15610ea257610e9d846001610e5a8583611dfa565b610e649190611dfa565b6001600160801b0319600185811b6ffffffffffffffffffffffffffffffffe16176001600160801b039283161b60801b16911617600055565b6106ae565b610eb68282866001600160801b031661100f565b156100e857610e9d826001610ecb8783611dfa565b610ed59190611dfa565b6001600160801b03166001901b836001600160801b0316176001600160801b031960809190911b166001600160801b0390911617600055565b60006004821015610f2157506000610fc4565b601883836003818110610f3657610f36611f52565b909101356001600160f81b03191690911c9050601084846002818110610f5e57610f5e611f52565b909101356001600160f81b03191690911c9050600885856001818110610f8657610f86611f52565b909101356001600160f81b03191690911c90508585600081610faa57610faa611f52565b9050013560f81c60f81b6001600160f81b03191617171790505b92915050565b6000826001600160801b0316826001600160801b031611801561061c5750610ffc60646001600160801b038516611cc4565b826001600160801b031611159392505050565b600080611025836001600160801b038716611e22565b9050600081118015611038575060808111155b801561105b57506001600160801b038416611054600183611e22565b6001901b16155b95945050505050565b6060600060015b8084106110875760081b8161107f81611ef7565b92505061106b565b508260008267ffffffffffffffff8111156110a4576110a4611f68565b6040519080825280601f01601f1916602001820160405280156110ce576020820181803683370190505b509050825b801561112a5760f883901b826110ea600184611e22565b815181106110fa576110fa611f52565b60200101906001600160f81b031916908160001a90535060089290921c918061112281611e83565b9150506110d3565b50949350505050565b60005b815181101561037b57600061114c826001611cc4565b90505b82518110156111f45782818151811061116a5761116a611f52565b60200260200101516001600160a01b031683838151811061118d5761118d611f52565b60200260200101516001600160a01b031614156111e25760405162461bcd60e51b81526020600482015260136024820152726475706c6963617465207369676e617475726560681b6044820152606401610358565b806111ec81611ef7565b91505061114f565b50806111ff81611ef7565b915050611136565b60608082516001148015611236575060808360008151811061122b5761122b611f52565b016020015160f81c11155b15611242575081610fc4565b61061c611251845160806113a3565b8461155a565b60606000611264836115d7565b905061061c611275825160c06113a3565b8261155a565b6060824710156112dc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610358565b843b61132a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610358565b600080866001600160a01b031685876040516113469190611c35565b60006040518083038185875af1925050503d8060008114611383576040519150601f19603f3d011682016040523d82523d6000602084013e611388565b606091505b5091509150611398828286611707565b979650505050505050565b606080603884101561140d57604080516001808252818301909252906020820181803683370190505090506113d88385611cc4565b601f1a60f81b816000815181106113f1576113f1611f52565b60200101906001600160f81b031916908160001a90535061061c565b600060015b61141c8187611cdc565b15611442578161142b81611ef7565b925061143b905061010082611ddb565b9050611412565b61144d826001611cc4565b67ffffffffffffffff81111561146557611465611f68565b6040519080825280601f01601f19166020018201604052801561148f576020820181803683370190505b50925061149c8583611cc4565b6114a7906037611cc4565b601f1a60f81b836000815181106114c0576114c0611f52565b60200101906001600160f81b031916908160001a905350600190505b818111611551576101006114f08284611e22565b6114fc90610100611d33565b6115069088611cdc565b6115109190611f12565b601f1a60f81b83828151811061152857611528611f52565b60200101906001600160f81b031916908160001a9053508061154981611ef7565b9150506114dc565b50509392505050565b6060806040519050835180825260208201818101602087015b8183101561158b578051835260209283019201611573565b50855184518101855292509050808201602086015b818310156115b85780518352602092830192016115a0565b508651929092011591909101601f01601f191660405250905092915050565b60608151600014156115f757505060408051600081526020810190915290565b6000805b835181101561163e5783818151811061161657611616611f52565b6020026020010151518261162a9190611cc4565b91508061163681611ef7565b9150506115fb565b60008267ffffffffffffffff81111561165957611659611f68565b6040519080825280601f01601f191660200182016040528015611683576020820181803683370190505b50600092509050602081015b855183101561112a5760008684815181106116ac576116ac611f52565b6020026020010151905060006020820190506116ca83828451611740565b8785815181106116dc576116dc611f52565b602002602001015151836116f09190611cc4565b9250505082806116ff90611ef7565b93505061168f565b6060831561171657508161061c565b8251156117265782518084602001fd5b8160405162461bcd60e51b81526004016103589190611c86565b8282825b6020811061177c578151835261175b602084611cc4565b9250611768602083611cc4565b9150611775602082611e22565b9050611744565b6000600161178b836020611e22565b61179790610100611d33565b6117a19190611e22565b925184518416931916929092179092525050505050565b8280546117c490611e9a565b90600052602060002090601f0160209004810192826117e6576000855561182c565b82601f106117ff57805160ff191683800117855561182c565b8280016001018555821561182c579182015b8281111561182c578251825591602001919060010190611811565b5061183892915061183c565b5090565b5b80821115611838576000815560010161183d565b80356001600160a01b038116811461186857600080fd5b919050565b60008083601f84011261187f57600080fd5b50813567ffffffffffffffff81111561189757600080fd5b6020830191508360208260051b85010111156118b257600080fd5b9250929050565b60008083601f8401126118cb57600080fd5b50813567ffffffffffffffff8111156118e357600080fd5b6020830191508360208285010111156118b257600080fd5b80356001600160801b038116811461186857600080fd5b803560ff8116811461186857600080fd5b60006020828403121561193557600080fd5b61061c82611851565b6000806040838503121561195157600080fd5b61195a83611851565b915061196860208401611851565b90509250929050565b6000806000806060858703121561198757600080fd5b61199085611851565b935060208501359250604085013567ffffffffffffffff8111156119b357600080fd5b6119bf878288016118b9565b95989497509550505050565b600080604083850312156119de57600080fd5b6119e783611851565b915061196860208401611912565b60008060008060008060006080888a031215611a1057600080fd5b87359650602088013567ffffffffffffffff80821115611a2f57600080fd5b611a3b8b838c0161186d565b909850965060408a0135915080821115611a5457600080fd5b611a608b838c0161186d565b909650945060608a0135915080821115611a7957600080fd5b50611a868a828b0161186d565b989b979a50959850939692959293505050565b600060208284031215611aab57600080fd5b61061c826118fb565b600080600080600080600080600080600060e08c8e031215611ad557600080fd5b611ade8c6118fb565b9a50611aec60208d01611851565b995060408c0135985067ffffffffffffffff8060608e01351115611b0f57600080fd5b611b1f8e60608f01358f016118b9565b909950975060808d0135811015611b3557600080fd5b611b458e60808f01358f0161186d565b909750955060a08d0135811015611b5b57600080fd5b611b6b8e60a08f01358f0161186d565b909550935060c08d0135811015611b8157600080fd5b50611b928d60c08e01358e0161186d565b81935080925050509295989b509295989b9093969950565b600060208284031215611bbc57600080fd5b61061c82611912565b600081518084526020808501945080840160005b83811015611bfe5781516001600160a01b031687529582019590820190600101611bd9565b509495945050505050565b60008151808452611c21816020860160208601611e39565b601f01601f19169290920160200192915050565b60008251611c47818460208701611e39565b9190910192915050565b60208152600061061c6020830184611bc5565b63ffffffff60e01b83168152604060208201526000610e2a6040830184611bc5565b60208152600061061c6020830184611c09565b60006001600160801b03808316818516808303821115611cbb57611cbb611f26565b01949350505050565b60008219821115611cd757611cd7611f26565b500190565b600082611ceb57611ceb611f3c565b500490565b600181815b80851115611d2b578160001904821115611d1157611d11611f26565b80851615611d1e57918102915b93841c9390800290611cf5565b509250929050565b600061061c8383600082611d4957506001610fc4565b81611d5657506000610fc4565b8160018114611d6c5760028114611d7657611d92565b6001915050610fc4565b60ff841115611d8757611d87611f26565b50506001821b610fc4565b5060208310610133831016604e8410600b8410161715611db5575081810a610fc4565b611dbf8383611cf0565b8060001904821115611dd357611dd3611f26565b029392505050565b6000816000190483118215151615611df557611df5611f26565b500290565b60006001600160801b0383811690831681811015611e1a57611e1a611f26565b039392505050565b600082821015611e3457611e34611f26565b500390565b60005b83811015611e54578181015183820152602001611e3c565b838111156106ae5750506000910152565b600061ffff821680611e7957611e79611f26565b6000190192915050565b600081611e9257611e92611f26565b506000190190565b600181811c90821680611eae57607f821691505b60208210811415611ecf57634e487b7160e01b600052602260045260246000fd5b50919050565b600061ffff80831681811415611eed57611eed611f26565b6001019392505050565b6000600019821415611f0b57611f0b611f26565b5060010190565b600082611f2157611f21611f3c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a2646970667358221220441b356c12cfc3a258a16be3c582505d64cf79b2f39fe7fd8363d7fc3e03a0fd64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100e15760003560e01c8063b5fe51631161007f578063cb6367d111610059578063cb6367d11461027d578063ce5494bb146102aa578063d69c3d30146102ca578063ecec0dfd146102df57600080fd5b8063b5fe51631461020d578063b6e404de1461023d578063c4d66de81461025d57600080fd5b8063736c0d5b116100bb578063736c0d5b146101655780637ca548c6146101a75780637cedbb80146101d55780638291286c146101f857600080fd5b80630f43d678146100ed5780631068361f1461010f57806348753d001461012f57600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b5061010d6101083660046119cb565b6102ff565b005b34801561011b57600080fd5b5061010d61012a36600461193e565b61037f565b34801561013b57600080fd5b5061014f61014a366004611ab4565b6103e6565b60405161015c9190611c86565b60405180910390f35b34801561017157600080fd5b50610195610180366004611923565b60026020526000908152604090205460ff1681565b60405160ff909116815260200161015c565b3480156101b357600080fd5b506003546101c29061ffff1681565b60405161ffff909116815260200161015c565b3480156101e157600080fd5b506101ea606481565b60405190815260200161015c565b34801561020457600080fd5b5061014f610551565b34801561021957600080fd5b5061022d610228366004611a99565b6105df565b604051901515815260200161015c565b34801561024957600080fd5b5061010d610258366004611971565b610623565b34801561026957600080fd5b5061010d610278366004611923565b6106b4565b34801561028957600080fd5b5061029d6102983660046119f5565b610796565b60405161015c9190611c51565b3480156102b657600080fd5b5061010d6102c5366004611923565b610979565b3480156102d657600080fd5b506101ea610986565b3480156102eb57600080fd5b5061029d6102fa366004611ab4565b6109a3565b3033148061031f57503360009081526002602052604090205460ff166001145b6103615760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b60448201526064015b60405180910390fd5b61036b82826109da565b60035461ffff1661037b57600080fd5b5050565b3033148061039f57503360009081526002602052604090205460ff166001145b6103dc5760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b6044820152606401610358565b61037b8282610b2a565b606060006104828d600480546103fb90611e9a565b80601f016020809104026020016040519081016040528092919081815260200182805461042790611e9a565b80156104745780601f1061044957610100808354040283529160200191610474565b820191906000526020600020905b81548152906001019060200180831161045757829003601f168201915b50505050508e8e8e8e610b82565b90506000610495828a8a8a8a8a8a610796565b905060006104e88e8d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508f610e04565b90506104f38f610e32565b8d6001600160a01b03167f64ada3f9bcd41ebd407b399dc401184273a19bc294825172626af05a15c95d256105288e8e610f0e565b84604051610537929190611c64565b60405180910390a29e9d5050505050505050505050505050565b6004805461055e90611e9a565b80601f016020809104026020016040519081016040528092919081815260200182805461058a90611e9a565b80156105d75780601f106105ac576101008083540402835291602001916105d7565b820191906000526020600020905b8154815290600101906020018083116105ba57829003601f168201915b505050505081565b6000806105eb60005490565b90506105f78184610fca565b8061061c575061061c8161060d60005460801c90565b856001600160801b031661100f565b9392505050565b6106658483838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250889250610e04915050565b5060405162461bcd60e51b815260206004820152601760248201527f54657374207061737365642e20526576657274696e672e0000000000000000006044820152606401610358565b50505050565b600154610100900460ff16806106cd575060015460ff16155b6107305760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610358565b600154610100900460ff16158015610752576001805461ffff19166101011790555b6107613063ffffffff16611064565b8051610775916004916020909101906117b8565b506107818260016109da565b801561037b576001805461ff00191690555050565b606060008467ffffffffffffffff8111156107b3576107b3611f68565b6040519080825280602002602001820160405280156107dc578160200160208202803683370190505b50905060005b8581101561096357600060018b8b8b8581811061080157610801611f52565b90506020020160208101906108169190611baa565b8a8a8681811061082857610828611f52565b9050602002013589898781811061084157610841611f52565b905060200201356040516000815260200160405260405161087e949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa1580156108a0573d6000803e3d6000fd5b505060408051601f1901516001600160a01b03811660009081526002602052919091205490925060ff16905080158015906108de575060ff81168810155b61091b5760405162461bcd60e51b815260206004820152600e60248201526d31b7b9b4b3b732b91032b93937b960911b6044820152606401610358565b8184848151811061092e5761092e611f52565b60200260200101906001600160a01b031690816001600160a01b0316815250505050808061095b90611ef7565b9150506107e2565b5061096d81611133565b98975050505050505050565b6109833382610b2a565b50565b60008054610995906001611c99565b6001600160801b0316905090565b606060006109b88d600480546103fb90611e9a565b90506109c981898989898989610796565b9d9c50505050505050505050505050565b813b15610a295760405162461bcd60e51b815260206004820152601b60248201527f7369676e65722063616e6e6f74206265206120636f6e747261637400000000006044820152606401610358565b6001600160a01b0382166000908152600260205260409020805460ff83811660ff19831617909255168015801590610a62575060ff8216155b15610a9b576003805461ffff16906000610a7b83611e65565b91906101000a81548161ffff021916908361ffff16021790555050610ae4565b60ff8116158015610aaf575060008260ff16115b15610ae4576003805461ffff16906000610ac883611ed5565b91906101000a81548161ffff021916908361ffff160217905550505b60405160ff831681526001600160a01b038416907f7f00bf87056fc9622b70d830cce34aa24d6c12881ebbc71d3bf22d0c5ae295b79060200160405180910390a2505050565b6001600160a01b03811660009081526002602052604090205460ff1615610b5057600080fd5b6001600160a01b038216600090815260026020526040902054610b7790829060ff166109da565b61037b8260006109da565b6040805160098082526101408201909252600091829190816020015b6060815260200190600190039081610b9e579050509050610bc7886001600160801b0316611064565b81600081518110610bda57610bda611f52565b60200260200101819052508681600181518110610bf957610bf9611f52565b6020026020010181905250610c0f615208611064565b81600281518110610c2257610c22611f52565b602002602001018190525085604051602001610c56919060609190911b6bffffffffffffffffffffffff1916815260140190565b60405160208183030381529060405281600381518110610c7857610c78611f52565b6020026020010181905250610c8c85611064565b81600481518110610c9f57610c9f611f52565b602002602001018190525083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250508351849250600591508110610cf557610cf5611f52565b6020026020010181905250610d0946611064565b81600681518110610d1c57610d1c611f52565b6020026020010181905250610d316000611064565b81600781518110610d4457610d44611f52565b602002602001018190525060005b6008811015610dad57610d7d828281518110610d7057610d70611f52565b6020026020010151611207565b828281518110610d8f57610d8f611f52565b60200260200101819052508080610da590611ef7565b915050610d52565b5080600781518110610dc157610dc1611f52565b602002602001015181600881518110610ddc57610ddc611f52565b6020026020010181905250610df081611257565b805190602001209150509695505050505050565b6060610e2a848484604051806060016040528060298152602001611f7f6029913961127b565b949350505050565b60005480608081901c610e458285610fca565b15610ea257610e9d846001610e5a8583611dfa565b610e649190611dfa565b6001600160801b0319600185811b6ffffffffffffffffffffffffffffffffe16176001600160801b039283161b60801b16911617600055565b6106ae565b610eb68282866001600160801b031661100f565b156100e857610e9d826001610ecb8783611dfa565b610ed59190611dfa565b6001600160801b03166001901b836001600160801b0316176001600160801b031960809190911b166001600160801b0390911617600055565b60006004821015610f2157506000610fc4565b601883836003818110610f3657610f36611f52565b909101356001600160f81b03191690911c9050601084846002818110610f5e57610f5e611f52565b909101356001600160f81b03191690911c9050600885856001818110610f8657610f86611f52565b909101356001600160f81b03191690911c90508585600081610faa57610faa611f52565b9050013560f81c60f81b6001600160f81b03191617171790505b92915050565b6000826001600160801b0316826001600160801b031611801561061c5750610ffc60646001600160801b038516611cc4565b826001600160801b031611159392505050565b600080611025836001600160801b038716611e22565b9050600081118015611038575060808111155b801561105b57506001600160801b038416611054600183611e22565b6001901b16155b95945050505050565b6060600060015b8084106110875760081b8161107f81611ef7565b92505061106b565b508260008267ffffffffffffffff8111156110a4576110a4611f68565b6040519080825280601f01601f1916602001820160405280156110ce576020820181803683370190505b509050825b801561112a5760f883901b826110ea600184611e22565b815181106110fa576110fa611f52565b60200101906001600160f81b031916908160001a90535060089290921c918061112281611e83565b9150506110d3565b50949350505050565b60005b815181101561037b57600061114c826001611cc4565b90505b82518110156111f45782818151811061116a5761116a611f52565b60200260200101516001600160a01b031683838151811061118d5761118d611f52565b60200260200101516001600160a01b031614156111e25760405162461bcd60e51b81526020600482015260136024820152726475706c6963617465207369676e617475726560681b6044820152606401610358565b806111ec81611ef7565b91505061114f565b50806111ff81611ef7565b915050611136565b60608082516001148015611236575060808360008151811061122b5761122b611f52565b016020015160f81c11155b15611242575081610fc4565b61061c611251845160806113a3565b8461155a565b60606000611264836115d7565b905061061c611275825160c06113a3565b8261155a565b6060824710156112dc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610358565b843b61132a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610358565b600080866001600160a01b031685876040516113469190611c35565b60006040518083038185875af1925050503d8060008114611383576040519150601f19603f3d011682016040523d82523d6000602084013e611388565b606091505b5091509150611398828286611707565b979650505050505050565b606080603884101561140d57604080516001808252818301909252906020820181803683370190505090506113d88385611cc4565b601f1a60f81b816000815181106113f1576113f1611f52565b60200101906001600160f81b031916908160001a90535061061c565b600060015b61141c8187611cdc565b15611442578161142b81611ef7565b925061143b905061010082611ddb565b9050611412565b61144d826001611cc4565b67ffffffffffffffff81111561146557611465611f68565b6040519080825280601f01601f19166020018201604052801561148f576020820181803683370190505b50925061149c8583611cc4565b6114a7906037611cc4565b601f1a60f81b836000815181106114c0576114c0611f52565b60200101906001600160f81b031916908160001a905350600190505b818111611551576101006114f08284611e22565b6114fc90610100611d33565b6115069088611cdc565b6115109190611f12565b601f1a60f81b83828151811061152857611528611f52565b60200101906001600160f81b031916908160001a9053508061154981611ef7565b9150506114dc565b50509392505050565b6060806040519050835180825260208201818101602087015b8183101561158b578051835260209283019201611573565b50855184518101855292509050808201602086015b818310156115b85780518352602092830192016115a0565b508651929092011591909101601f01601f191660405250905092915050565b60608151600014156115f757505060408051600081526020810190915290565b6000805b835181101561163e5783818151811061161657611616611f52565b6020026020010151518261162a9190611cc4565b91508061163681611ef7565b9150506115fb565b60008267ffffffffffffffff81111561165957611659611f68565b6040519080825280601f01601f191660200182016040528015611683576020820181803683370190505b50600092509050602081015b855183101561112a5760008684815181106116ac576116ac611f52565b6020026020010151905060006020820190506116ca83828451611740565b8785815181106116dc576116dc611f52565b602002602001015151836116f09190611cc4565b9250505082806116ff90611ef7565b93505061168f565b6060831561171657508161061c565b8251156117265782518084602001fd5b8160405162461bcd60e51b81526004016103589190611c86565b8282825b6020811061177c578151835261175b602084611cc4565b9250611768602083611cc4565b9150611775602082611e22565b9050611744565b6000600161178b836020611e22565b61179790610100611d33565b6117a19190611e22565b925184518416931916929092179092525050505050565b8280546117c490611e9a565b90600052602060002090601f0160209004810192826117e6576000855561182c565b82601f106117ff57805160ff191683800117855561182c565b8280016001018555821561182c579182015b8281111561182c578251825591602001919060010190611811565b5061183892915061183c565b5090565b5b80821115611838576000815560010161183d565b80356001600160a01b038116811461186857600080fd5b919050565b60008083601f84011261187f57600080fd5b50813567ffffffffffffffff81111561189757600080fd5b6020830191508360208260051b85010111156118b257600080fd5b9250929050565b60008083601f8401126118cb57600080fd5b50813567ffffffffffffffff8111156118e357600080fd5b6020830191508360208285010111156118b257600080fd5b80356001600160801b038116811461186857600080fd5b803560ff8116811461186857600080fd5b60006020828403121561193557600080fd5b61061c82611851565b6000806040838503121561195157600080fd5b61195a83611851565b915061196860208401611851565b90509250929050565b6000806000806060858703121561198757600080fd5b61199085611851565b935060208501359250604085013567ffffffffffffffff8111156119b357600080fd5b6119bf878288016118b9565b95989497509550505050565b600080604083850312156119de57600080fd5b6119e783611851565b915061196860208401611912565b60008060008060008060006080888a031215611a1057600080fd5b87359650602088013567ffffffffffffffff80821115611a2f57600080fd5b611a3b8b838c0161186d565b909850965060408a0135915080821115611a5457600080fd5b611a608b838c0161186d565b909650945060608a0135915080821115611a7957600080fd5b50611a868a828b0161186d565b989b979a50959850939692959293505050565b600060208284031215611aab57600080fd5b61061c826118fb565b600080600080600080600080600080600060e08c8e031215611ad557600080fd5b611ade8c6118fb565b9a50611aec60208d01611851565b995060408c0135985067ffffffffffffffff8060608e01351115611b0f57600080fd5b611b1f8e60608f01358f016118b9565b909950975060808d0135811015611b3557600080fd5b611b458e60808f01358f0161186d565b909750955060a08d0135811015611b5b57600080fd5b611b6b8e60a08f01358f0161186d565b909550935060c08d0135811015611b8157600080fd5b50611b928d60c08e01358e0161186d565b81935080925050509295989b509295989b9093969950565b600060208284031215611bbc57600080fd5b61061c82611912565b600081518084526020808501945080840160005b83811015611bfe5781516001600160a01b031687529582019590820190600101611bd9565b509495945050505050565b60008151808452611c21816020860160208601611e39565b601f01601f19169290920160200192915050565b60008251611c47818460208701611e39565b9190910192915050565b60208152600061061c6020830184611bc5565b63ffffffff60e01b83168152604060208201526000610e2a6040830184611bc5565b60208152600061061c6020830184611c09565b60006001600160801b03808316818516808303821115611cbb57611cbb611f26565b01949350505050565b60008219821115611cd757611cd7611f26565b500190565b600082611ceb57611ceb611f3c565b500490565b600181815b80851115611d2b578160001904821115611d1157611d11611f26565b80851615611d1e57918102915b93841c9390800290611cf5565b509250929050565b600061061c8383600082611d4957506001610fc4565b81611d5657506000610fc4565b8160018114611d6c5760028114611d7657611d92565b6001915050610fc4565b60ff841115611d8757611d87611f26565b50506001821b610fc4565b5060208310610133831016604e8410600b8410161715611db5575081810a610fc4565b611dbf8383611cf0565b8060001904821115611dd357611dd3611f26565b029392505050565b6000816000190483118215151615611df557611df5611f26565b500290565b60006001600160801b0383811690831681811015611e1a57611e1a611f26565b039392505050565b600082821015611e3457611e34611f26565b500390565b60005b83811015611e54578181015183820152602001611e3c565b838111156106ae5750506000910152565b600061ffff821680611e7957611e79611f26565b6000190192915050565b600081611e9257611e92611f26565b506000190190565b600181811c90821680611eae57607f821691505b60208210811415611ecf57634e487b7160e01b600052602260045260246000fd5b50919050565b600061ffff80831681811415611eed57611eed611f26565b6001019392505050565b6000600019821415611f0b57611f0b611f26565b5060010190565b600082611f2157611f21611f3c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a2646970667358221220441b356c12cfc3a258a16be3c582505d64cf79b2f39fe7fd8363d7fc3e03a0fd64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkExecution(address,uint256,bytes)": {
        "notice": "Checks if the execution of a transaction would succeed if it was properly signed."
      },
      "checkSignatures(uint128,address,uint256,bytes,uint8[],bytes32[],bytes32[])": {
        "notice": "Checks if the provided signatures suffice to sign the transaction and if the nonce is correct."
      },
      "isFree(uint128)": {
        "notice": "Returns whether the provided nonce can be used. For the 100 nonces in the interval [nextNonce(), nextNonce + 99], this is always true. For the nonces in the interval [nextNonce() - 129, nextNonce() - 1], this is true for the nonces that have not been used yet."
      },
      "nextNonce()": {
        "notice": "The next recommended nonce, which is the highest nonce ever used plus one."
      },
      "setSigner(address,uint8)": {
        "notice": "Call this method through execute"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10138,
        "contract": "src/multisig/MultiSigWallet.sol:MultiSigWallet",
        "label": "compound",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 85,
        "contract": "src/multisig/MultiSigWallet.sol:MultiSigWallet",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 88,
        "contract": "src/multisig/MultiSigWallet.sol:MultiSigWallet",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 3145,
        "contract": "src/multisig/MultiSigWallet.sol:MultiSigWallet",
        "label": "signers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint8)"
      },
      {
        "astId": 3147,
        "contract": "src/multisig/MultiSigWallet.sol:MultiSigWallet",
        "label": "signerCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint16"
      },
      {
        "astId": 3149,
        "contract": "src/multisig/MultiSigWallet.sol:MultiSigWallet",
        "label": "contractId",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}