{
  "language": "Solidity",
  "sources": {
    "src/optimism/XCHF.sol": {
      "content": "/**\n * SPDX-License-Identifier: Apache-2.0\n **/\n\npragma solidity ^0.8.0;\n// input  C:\\projects\\BTCS.CHFToken\\contracts\\Chftoken\\CryptoFranc.sol\ninterface InterestRateInterface {\n\n    /// @notice get compounding level for currenct day\n    function getCurrentCompoundingLevel() external view returns (uint256);\n\n    /// @notice get compounding level for _date `_date`\n    /// @param _date The date \n    function getCompoundingLevelDate(uint256 _date) external view returns (uint256);\n\n}\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ninterface ERC20Interface {\n    /// total amount of tokens\n    function totalSupply() external view returns(uint256 supply);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return balance The balance\n    function balanceOf(address _owner) external view returns (uint256 balance);\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return success Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) external returns (bool success);\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return success Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of tokens to be approved for transfer\n    /// @return success Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return remaining Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n    // EVENTS\n    \n    // solhint-disable-next-line no-simple-event-func-name\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    \n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\ninterface IL2StandardERC20 is ERC20Interface, IERC165 {\n    function l1Token() external returns (address);\n\n    function mint(address _to, uint256 _amount) external;\n\n    function burn(address _from, uint256 _amount) external;\n\n    event Mint(address indexed _account, uint256 _amount);\n    event Burn(address indexed _account, uint256 _amount);\n}\n\nabstract contract Ownable {\n    address public owner;\n    address public newOwner;\n\n    // MODIFIERS\n\n    /// @dev Throws if called by any account other than the owner.\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only Owner\");\n        _;\n    }\n\n    /// @dev Throws if called by any account other than the new owner.\n    modifier onlyNewOwner() {\n        require(msg.sender == newOwner, \"Only New Owner\");\n        _;\n    }\n\n    modifier notNull(address _address) {\n        require(_address != address(0),\"address is Null\");\n        _;\n    }\n\n    // CONSTRUCTORS\n\n    /**\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n    * account.\n    */\n    constructor() {\n        owner = msg.sender;\n    }\n\n    /// @dev Allows the current owner to transfer control of the contract to a newOwner.\n    /// @param _newOwner The address to transfer ownership to.\n    \n    function transferOwnership(address _newOwner) public notNull(_newOwner) onlyOwner {\n        newOwner = _newOwner;\n    }\n\n    /// @dev Allow the new owner to claim ownership and so proving that the newOwner is valid.\n    function acceptOwnership() public onlyNewOwner {\n        address oldOwner = owner;\n        owner = newOwner;\n        newOwner = address(0);\n        emit OwnershipTransferred(oldOwner, owner);\n    }\n\n    // EVENTS\n    \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n}\n\nabstract contract InterestRateNone is InterestRateInterface {\n\n    uint256 public constant SCALEFACTOR = 1e18;\n    \n    /// @notice get compounding level for currenct day\n    function getCurrentCompoundingLevel() public pure override returns (uint256) {\n        return SCALEFACTOR;\n    }\n\n    /// @notice get compounding level for day `_date`\n    /// param _date The daynumber \n    function getCompoundingLevelDate(uint256 /* _date */) public pure override returns (uint256) {\n        return SCALEFACTOR;\n    }\n\n}\nabstract contract MigrationAgent is Ownable {\n\n    address public migrationToContract; // the contract to migrate to\n    address public migrationFromContract; // the conttactto migate from\n\n    // MODIFIERS\n    \n    modifier onlyMigrationFromContract() {\n        require(msg.sender == migrationFromContract, \"Only from migration contract\");\n        _;\n    }\n    // EXTERNAL FUNCTIONS\n\n    // PUBLIC FUNCTIONS\n\n    /// @dev set contract to migrate to \n    /// @param _toContract Then contract address to migrate to\n    function startMigrateToContract(address _toContract) public onlyOwner {\n        migrationToContract = _toContract;\n        require(MigrationAgent(migrationToContract).isMigrationAgent(), \"not a migratable contract\");\n        emit StartMigrateToContract(address(this), _toContract);\n    }\n\n    /// @dev set contract to migrate from\n    /// @param _fromConstract Then contract address to migrate from\n    function startMigrateFromContract(address _fromConstract) public onlyOwner {\n        migrationFromContract = _fromConstract;\n        require(MigrationAgent(migrationFromContract).isMigrationAgent(), \"not a migratable contract\");\n        emit StartMigrateFromContract(_fromConstract, address(this));\n    }\n\n    /// @dev Each user calls the migrate function on the original contract to migrate the usersâ€™ tokens to the migration agent migrateFrom on the `migrationToContract` contract\n    function migrate() public virtual;   \n\n    /// @dev migrageFrom is called from the migrating contract `migrationFromContract`\n    /// @param _from The account to be migrated into new contract\n    /// @param _value The token balance to be migrated\n    function migrateFrom(address _from, uint256 _value) public virtual returns(bool);\n\n    /// @dev is a valid migration agent\n    /// @return true if contract is a migratable contract\n    function isMigrationAgent() public pure returns(bool) {\n        return true;\n    }\n\n    // INTERNAL FUNCTIONS\n\n    // PRIVATE FUNCTIONS\n\n    // EVENTS\n\n    event StartMigrateToContract(address indexed fromConstract, address indexed toContract);\n\n    event StartMigrateFromContract(address indexed fromConstract, address indexed toContract);\n\n    event MigratedTo(address indexed owner, address indexed _contract, uint256 value);\n\n    event MigratedFrom(address indexed owner, address indexed _contract, uint256 value);\n}\ncontract Pausable is Ownable {\n\n    bool public paused = false;\n\n    // MODIFIERS\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused, \"only when not paused\");\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n        require(paused, \"only when paused\");\n        _;\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() public onlyOwner whenNotPaused {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() public onlyOwner whenPaused {\n        paused = false;\n        emit Unpause();\n    }\n\n    // EVENTS\n\n    event Pause();\n\n    event Unpause();\n}\n\nabstract contract Operator is Ownable {\n\n    address public operator;\n\n    // MODIFIERS\n\n    /**\n     * @dev modifier check for operator\n     */\n    modifier onlyOperator {\n        require(msg.sender == operator, \"Only Operator\");\n        _;\n    }\n\n    // CONSTRUCTORS\n\n    constructor() {\n        operator = msg.sender;\n    }\n\n    /**\n     * @dev Transfer operator to `newOperator`.\n     *\n     * @param _newOperator   The address of the new operator\n     */\n    function transferOperator(address _newOperator) public notNull(_newOperator) onlyOwner {\n        operator = _newOperator;\n        emit TransferOperator(operator, _newOperator);\n    }\n\n    // EVENTS\n    \n    event TransferOperator(address indexed from, address indexed to);\n}\n\nabstract contract ERC20Token is Ownable, ERC20Interface {\n\n    using SafeMath for uint256;\n\n    mapping(address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    // CONSTRUCTORS\n\n    constructor() {\n    }\n\n    // EXTERNAL FUNCTIONS\n\n    // PUBLIC FUNCTIONS\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return success Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) public virtual override returns (bool success) {\n\n        return transferInternal(msg.sender, _to, _value);\n    }\n\n    /* ALLOW FUNCTIONS */\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    *\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    */\n   \n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens   \n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of tokens to be approved for transfer\n    /// @return success Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) public virtual override notNull(_spender) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return success Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) public virtual override returns (bool success) {\n        require(_value <= allowed[_from][msg.sender], \"insufficient tokens\");\n\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        return transferInternal(_from, _to, _value);\n    }\n\n    /**\n     * @dev Returns balance of the `_owner`.\n     *\n     * @param _owner   The address whose balance will be returned.\n     * @return balance Balance of the `_owner`.\n     */\n    function balanceOf(address _owner) public virtual override view returns (uint256) {\n        return balances[_owner];\n    }\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) public override view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    // INTERNAL FUNCTIONS\n\n    /// @notice internal send `_value` token to `_to` from `_from` \n    /// @param _from The address of the sender (null check performed in subTokens)\n    /// @param _to The address of the recipient (null check performed in addTokens)\n    /// @param _value The amount of token to be transferred \n    /// @return Whether the transfer was successful or not\n    function transferInternal(address _from, address _to, uint256 _value) internal returns (bool) {\n        uint256 value = subTokens(_from, _value);\n        addTokens(_to, value);\n        emit Transfer(_from, _to, value);\n        return true;\n    }\n   \n    /// @notice add tokens `_value` tokens to `owner`\n    /// @param _owner The address of the account\n    /// @param _value The amount of tokens to be added\n    function addTokens(address _owner, uint256 _value) internal virtual;\n\n    /// @notice subtract tokens `_value` tokens from `owner`\n    /// @param _owner The address of the account\n    /// @param _value The amount of tokens to be subtracted\n    function subTokens(address _owner, uint256 _value) internal virtual returns (uint256 _valueDeducted );\n    \n    /// @notice set balance of account `owner` to `_value`\n    /// @param _owner The address of the account\n    /// @param _value The new balance \n    function setBalance(address _owner, uint256 _value) internal virtual notNull(_owner) {\n        balances[_owner] = _value;\n    }\n\n    // PRIVATE FUNCTIONS\n\n}\n\nabstract contract PausableToken is ERC20Token, Pausable {\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return success Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) public override whenNotPaused returns (bool success) {\n        return super.transfer(_to, _value);\n    }\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return success Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) public override whenNotPaused returns (bool success) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of tokens to be approved for transfer\n    /// @return success Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) public override whenNotPaused returns (bool success) {\n        return super.approve(_spender, _value);\n    }\n}\n\nabstract contract MintableToken is PausableToken\n{\n    using SafeMath for uint256;\n\n    address public minter; // minter\n\n    uint256 internal minted; // total minted tokens\n    uint256 internal burned; // total burned tokens\n\n    // MODIFIERS\n\n    modifier onlyMinter {\n        assert(msg.sender == minter);\n        _; \n    }\n\n    constructor() {\n        minter = msg.sender;   // Set the owner to minter\n    }\n\n    // EXTERNAL FUNCTIONS\n\n    // PUBLIC FUNCTIONS\n\n    /// @dev  mint tokens to address\n    /// @notice mint `_value` token to `_to`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be minted\n    function _mint(address _to, uint256 _value) internal notNull(_to) {\n        addTokens(_to, _value);\n        notifyMinted(_to, _value);\n    }\n\n    /// @dev burn tokens, e.g. when migrating\n    /// @notice burn `_value` token to `_to`\n    /// @param _value The amount of token to be burned from the callers account\n    function _burn(uint256 _value) internal whenNotPaused {\n        uint256 value = subTokens(msg.sender, _value);\n        notifyBurned(msg.sender, value);\n    }\n\n    /// @dev transfer minter to new address\n    /// @notice transfer minter addres from  `minter` to `_newMinter`\n    /// @param _newMinter The address of the recipient\n    function transferMinter(address _newMinter) public notNull(_newMinter) onlyOwner {\n        address oldMinter = minter;\n        minter = _newMinter;\n        emit TransferMinter(oldMinter, _newMinter);\n    }\n\n    // INTERNAL FUNCTIONS\n\n    /// @dev update burned and emit Transfer event of burned tokens\n    /// @notice burn `_value` token from `_owner`\n    /// @param _owner The address of the owner\n    /// @param _value The amount of token burned\n    function notifyBurned(address _owner, uint256 _value) internal {\n        burned = burned.add(_value);\n        emit Transfer(_owner, address(0), _value);\n    }\n\n    /// @dev update burned and emit Transfer event of burned tokens\n    /// @notice mint `_value` token to `_to`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token minted\n    function notifyMinted(address _to, uint256 _value) internal {\n        minted = minted.add(_value);\n        emit Transfer(address(0), _to, _value);\n    }\n\n    /// @dev helper function to update token supply state and emit events \n    /// @notice checkMintOrBurn for account `_owner` tokens chainging  from `_balanceBefore` to `_balanceAfter`\n    /// @param _owner The address of the owner\n    /// @param _balanceBefore The balance before the transaction\n    /// @param _balanceAfter The balance after the tranaaction\n    function checkMintOrBurn(address _owner, uint256 _balanceBefore, uint256 _balanceAfter) internal {\n        if (_balanceBefore > _balanceAfter) {\n            uint256 burnedTokens = _balanceBefore.sub(_balanceAfter);\n            notifyBurned(_owner, burnedTokens);\n        } else if (_balanceBefore < _balanceAfter) {\n            uint256 mintedTokens = _balanceAfter.sub(_balanceBefore);\n            notifyMinted(_owner, mintedTokens);\n        }\n    }\n\n    /// @dev return total amount of tokens\n    function totalSupply() public view override returns(uint256 supply) {\n        return minted.sub(burned);\n    }\n\n    // PRIVATE FUNCTIONS\n\n    // EVENTS\n    \n    event TransferMinter(address indexed from, address indexed to);\n}\n\ncontract CryptoFranc is MintableToken, MigrationAgent, Operator, InterestRateNone {\n\n    using SafeMath for uint256;\n\n    string constant public name = \"CryptoFranc\";\n    string constant public symbol = \"XCHF\";\n    uint256 constant public decimals = 18;\n    string constant public version = \"1.0.0.0\";\n    uint256 public dustAmount;\n\n    // Changes as the token is converted to the next vintage\n    string public currentFullName;\n    string public announcedFullName;\n    uint256 public currentMaturityDate;\n    uint256 public announcedMaturityDate;\n    uint256 public currentTermEndDate;\n    uint256 public announcedTermEndDate;\n    InterestRateInterface public currentTerms;\n    InterestRateInterface public announcedTerms;\n\n    mapping(address => uint256) internal compoundedInterestFactor;\n\n    // CONSTRUCTORS\n\n    constructor(string memory _initialFullName, uint256 _dustAmount) {\n        // initially, there is no interest. This contract has an interest-free default implementation\n        // of the InterestRateInterface. Having this internalized saves gas in comparison to having an\n        // external, separate smart contract.\n        currentFullName = _initialFullName;\n        announcedFullName = _initialFullName;\n        dustAmount = _dustAmount;    \n        currentTerms = this;\n        announcedTerms = this;\n        announcedMaturityDate = block.timestamp;\n        announcedTermEndDate = block.timestamp;\n    }\n\n    // EXTERNAL FUNCTIONS\n\n    // PUBLIC FUNCTIONS\n\n    /// @dev Invoked by the issuer to convert all the outstanding tokens into bonds of the latest vintage.\n    /// @param _newName Name of announced bond\n    /// @param _newTerms Address of announced bond\n    /// @param _newMaturityDate Maturity Date of announced bond\n    /// @param _newTermEndDate End Date of announced bond\n    function announceRollover(string memory _newName, address _newTerms, uint256 _newMaturityDate, uint256 _newTermEndDate) public notNull(_newTerms) onlyOperator {\n        // a new term can not be announced before the current is expired\n        require(block.timestamp >= announcedMaturityDate);\n\n        // for test purposes\n        uint256 newMaturityDate;\n        if (_newMaturityDate == 0)\n            newMaturityDate = block.timestamp;\n        else\n            newMaturityDate = _newMaturityDate;\n\n        // new newMaturityDate must be at least or greater than the existing announced terms end date\n        require(newMaturityDate >= announcedTermEndDate);\n\n        //require new term dates not too far in the future\n        //this is to prevent severe operator time calculaton errors\n        require(newMaturityDate <= block.timestamp.add(100 days),\"sanitycheck on newMaturityDate\");\n        require(newMaturityDate <= _newTermEndDate,\"term must start before it ends\");\n        require(_newTermEndDate <= block.timestamp.add(200 days),\"sanitycheck on newTermEndDate\");\n\n        InterestRateInterface terms = InterestRateInterface(_newTerms);\n        \n        // ensure that _newTerms begins at the compoundLevel that the announcedTerms ends\n        // they must align\n        uint256 newBeginLevel = terms.getCompoundingLevelDate(newMaturityDate);\n        uint256 annEndLevel = announcedTerms.getCompoundingLevelDate(newMaturityDate);\n        require(annEndLevel == newBeginLevel,\"new initialCompoundingLevel <> old finalCompoundingLevel\");\n\n        //rollover\n        currentTerms = announcedTerms;\n        currentFullName = announcedFullName;\n        currentMaturityDate = announcedMaturityDate;\n        currentTermEndDate = announcedTermEndDate;\n        announcedTerms = terms;\n        announcedFullName = _newName;\n        announcedMaturityDate = newMaturityDate;\n        announcedTermEndDate = _newTermEndDate;\n\n        emit AnnounceRollover(_newName, _newTerms, newMaturityDate, _newTermEndDate);\n    }\n\n    /// @dev collectInterest is called to update the internal state of `_owner` balance and force a interest payment\n    /// This function does not change the effective amount of the `_owner` as returned by balanceOf\n    /// and thus, can be called by anyone willing to pay for the gas.\n    /// The designed usage for this function is to allow the CryptoFranc owner to collect interest from inactive accounts, \n    /// since interest collection is updated automatically in normal transfers\n    /// calling collectInterest is functional equivalent to transfer 0 tokens to `_owner`\n    /// @param _owner The account being updated\n    function collectInterest( address _owner) public notNull(_owner) whenNotPaused {\n        uint256 rawBalance = super.balanceOf(_owner);\n        uint256 adjustedBalance = getAdjustedValue(_owner);\n        setBalance(_owner, adjustedBalance);\n        checkMintOrBurn(_owner, rawBalance, adjustedBalance);\n    }\n\n    /*\n        MIGRATE FUNCTIONS\n     */\n    // safe migrate function\n    /// @dev migrageFrom is called from the migrating contract `migrationFromContract`\n    /// @param _from The account to be migrated into new contract\n    /// @param _value The token balance to be migrated\n    function migrateFrom(address _from, uint256 _value) public override onlyMigrationFromContract returns(bool) {\n        addTokens(_from, _value);\n        notifyMinted(_from, _value);\n\n        emit MigratedFrom(_from, migrationFromContract, _value);\n        return true;\n    }\n\n    /// @dev Each user calls the migrate function on the original contract to migrate the usersâ€™ tokens to the migration agent migrateFrom on the `migrationToContract` contract\n    function migrate() public override whenNotPaused {\n        require(migrationToContract != address(0), \"not in migration mode\"); // revert if not in migrate mode\n        uint256 value = balanceOf(msg.sender);\n        require (value > 0, \"no balance\"); // revert if not value left to transfer\n        value = subTokens(msg.sender, value);\n        notifyBurned(msg.sender, value);\n        require(MigrationAgent(migrationToContract).migrateFrom(msg.sender, value)==true, \"migrateFrom must return true\");\n\n        emit MigratedTo(msg.sender, migrationToContract, value);\n    }\n\n    /*\n        Helper FUNCTIONS\n    */\n\n    /// @dev helper function to return foreign tokens accidental send to contract address\n    /// @param _tokenaddress Address of foreign ERC20 contract\n    /// @param _to Address to send foreign tokens to\n    function refundForeignTokens(address _tokenaddress,address _to) public notNull(_to) onlyOperator {\n        ERC20Interface token = ERC20Interface(_tokenaddress);\n        // transfer current balance for this contract to _to  in token contract\n        token.transfer(_to, token.balanceOf(address(this)));\n    }\n\n    /// @dev get fullname of active interest contract\n    function getFullName() public view returns (string memory) {\n        if ((block.timestamp <= announcedMaturityDate))\n            return currentFullName;\n        else\n            return announcedFullName;\n    }\n\n    /// @dev get compounding level of an owner account\n    /// @param _owner tokens address\n    /// @return The compouding level\n    function getCompoundingLevel(address _owner) public view returns (uint256) {\n        uint256 level = compoundedInterestFactor[_owner];\n        if (level == 0) {\n            // important note that for InterestRateNone or empty accounts the compoundedInterestFactor is newer stored by setBalance\n            return SCALEFACTOR;\n        } else {\n            return level;\n        }\n    }\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) public view override returns (uint256) {\n        return getAdjustedValue(_owner);\n    }\n\n    // INTERNAL FUNCTIONS\n\n    /// @notice add tokens `_value` tokens to `owner`\n    /// @param _owner The address of the account\n    /// @param _value The amount of tokens to be added\n    function addTokens(address _owner,uint256 _value) internal override notNull(_owner) {\n        uint256 rawBalance = super.balanceOf(_owner);\n        uint256 adjustedBalance = getAdjustedValue(_owner);\n        setBalance(_owner, adjustedBalance.add(_value));\n        checkMintOrBurn(_owner, rawBalance, adjustedBalance);\n    }\n\n    /// @notice subtract tokens `_value` tokens from `owner`\n    /// @param _owner The address of the account\n    /// @param _value The amount of tokens to be subtracted\n    /// @return _valueDeducted The value deducted\n    function subTokens(address _owner, uint256 _value) internal override notNull(_owner) returns (uint256 _valueDeducted ) {\n        uint256 rawBalance = super.balanceOf(_owner);\n        uint256 adjustedBalance = getAdjustedValue(_owner);\n        uint256 newBalance = adjustedBalance.sub(_value);\n        if (newBalance <= dustAmount) {\n            // dont leave balance below dust, empty account\n            _valueDeducted = _value.add(newBalance);\n            newBalance =  0;\n        } else {\n            _valueDeducted = _value;\n        }\n        setBalance(_owner, newBalance);\n        checkMintOrBurn(_owner, rawBalance, adjustedBalance);\n    }\n\n    /// @notice set balance of account `owner` to `_value`\n    /// @param _owner The address of the account\n    /// @param _value The new balance \n    function setBalance(address _owner, uint256 _value) internal override {\n        super.setBalance(_owner, _value);\n        // update `owner`s compoundLevel\n        if (_value == 0) {\n            // stall account release storage\n            delete compoundedInterestFactor[_owner];\n        } else {\n            // only update compoundedInterestFactor when value has changed \n            // important note: for InterestRateNone the compoundedInterestFactor is newer stored because the default value for getCompoundingLevel is SCALEFACTOR\n            uint256 currentLevel = getInterestRate().getCurrentCompoundingLevel();\n            if (currentLevel != getCompoundingLevel(_owner)) {\n                compoundedInterestFactor[_owner] = currentLevel;\n            }\n        }\n    }\n\n    /// @dev get address of active bond\n    function getInterestRate() internal view returns (InterestRateInterface) {\n        if ((block.timestamp <= announcedMaturityDate))\n            return currentTerms;\n        else\n            return announcedTerms;\n    }\n\n    /// @notice get adjusted balance of account `owner`\n    /// @param _owner The address of the account\n    function getAdjustedValue(address _owner) internal view returns (uint256) {\n        uint256 _rawBalance = super.balanceOf(_owner);\n        // if _rawBalance is 0 dont perform calculations\n        if (_rawBalance == 0)\n            return 0;\n        // important note: for empty/new account the getCompoundingLevel value is not meaningfull\n        uint256 startLevel = getCompoundingLevel(_owner);\n        uint256 currentLevel = getInterestRate().getCurrentCompoundingLevel();\n        return _rawBalance.mul(currentLevel).div(startLevel);\n    }\n\n    /// @notice get adjusted balance of account `owner` at data `date`\n    /// @param _owner The address of the account\n    /// @param _date The date of the balance NB: MUST be within valid current and announced Terms date range\n    function getAdjustedValueDate(address _owner,uint256 _date) public view returns (uint256) {\n        uint256 _rawBalance = super.balanceOf(_owner);\n        // if _rawBalance is 0 dont perform calculations\n        if (_rawBalance == 0)\n            return 0;\n        // important note: for empty/new account the getCompoundingLevel value is not meaningfull\n        uint256 startLevel = getCompoundingLevel(_owner);\n\n        InterestRateInterface dateTerms;\n        if (_date <= announcedMaturityDate)\n            dateTerms = currentTerms;\n        else\n            dateTerms = announcedTerms;\n\n        uint256 dateLevel = dateTerms.getCompoundingLevelDate(_date);\n        return _rawBalance.mul(dateLevel).div(startLevel);\n    }\n\n    // PRIVATE FUNCTIONS\n\n    // EVENTS\n\n    event AnnounceRollover(string newName, address indexed newTerms, uint256 indexed newMaturityDate, uint256 indexed newTermEndDate);\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}