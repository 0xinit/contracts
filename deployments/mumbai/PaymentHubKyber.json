{
  "address": "0xCb1D5644297502812f9545e5C6d6C6479d0d1666",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "contract IDMMRouter02",
          "name": "_dmmRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "currency",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dmmRouter",
      "outputs": [
        {
          "internalType": "contract IDMMRouter02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOfBaseCurrency",
          "type": "uint256"
        }
      ],
      "name": "getPriceInEther",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "multiPay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "multiPay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "ref",
          "type": "bytes"
        }
      ],
      "name": "multiPayAndNotify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "baseCurrencyAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ref",
          "type": "bytes"
        }
      ],
      "name": "payAndNotify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ref",
          "type": "bytes"
        }
      ],
      "name": "payAndNotify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "baseCurrencyAmount",
          "type": "uint256"
        }
      ],
      "name": "payFromEther",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "baseCurrencyAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ref",
          "type": "bytes"
        }
      ],
      "name": "payFromEtherAndNotify",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ercAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recover",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4a1636c270bd474c81270d4ac95b49026d383aed590aa2d274c589add8e27193",
  "receipt": {
    "to": null,
    "from": "0x39E5351E6CE3c4B19B8b0a2F5C82c511782457BE",
    "contractAddress": "0xCb1D5644297502812f9545e5C6d6C6479d0d1666",
    "transactionIndex": 0,
    "gasUsed": "1172946",
    "logsBloom": "0x00000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000020000000000000000000000000000000000000000000800000000000000000000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000004000200000000000000020000000000000000001000000000000000000000000004000000000000000000001000000000000000000000000000000100000000000000000000000000000000000000000000001000000000000000000000000100000",
    "blockHash": "0xe2ebc50649182f7a2b38ac257c25a876f18540e314ddd8ebe497f85fd581bde0",
    "transactionHash": "0x4a1636c270bd474c81270d4ac95b49026d383aed590aa2d274c589add8e27193",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 22174080,
        "transactionHash": "0x4a1636c270bd474c81270d4ac95b49026d383aed590aa2d274c589add8e27193",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000039e5351e6ce3c4b19b8b0a2f5c82c511782457be",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000014d5f0dc5a84000000000000000000000000000000000000000000000000000ce10145ae14c200000000000000000000000000000000000000000000000281915e79b5acd3e6050000000000000000000000000000000000000000000000000ccc2b54d1ba3e0000000000000000000000000000000000000000000000028191734fa6892e6a05",
        "logIndex": 0,
        "blockHash": "0xe2ebc50649182f7a2b38ac257c25a876f18540e314ddd8ebe497f85fd581bde0"
      }
    ],
    "blockNumber": 22174080,
    "cumulativeGasUsed": "1172946",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2791bca1f2de4661ed88a30c99a7a9449aa84174",
    "0x546C79662E028B661dFB4767664d0273184E4dD1"
  ],
  "solcInputHash": "f6cefe93f3f81fcac82983953f6b38dd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"contract IDMMRouter02\",\"name\":\"_dmmRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dmmRouter\",\"outputs\":[{\"internalType\":\"contract IDMMRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOfBaseCurrency\",\"type\":\"uint256\"}],\"name\":\"getPriceInEther\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiPay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiPay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"}],\"name\":\"multiPayAndNotify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseCurrencyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"}],\"name\":\"payAndNotify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"}],\"name\":\"payAndNotify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseCurrencyAmount\",\"type\":\"uint256\"}],\"name\":\"payFromEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseCurrencyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"}],\"name\":\"payFromEtherAndNotify\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ercAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"multiPayAndNotify(address,address[],uint256[],bytes)\":{\"notice\":\"Can (at least in theory) save some gas as the sender balance only is touched in one transaction.\"},\"payFromEther(address,uint256)\":{\"notice\":\"Convenience method to swap ether into currency and pay a target address\"},\"recover(address,address,uint256)\":{\"notice\":\"In case tokens have been accidentally sent directly to this contract. Make sure to be fast as anyone can call this!\"}},\"notice\":\"A hub for payments. This allows tokens that do not support ERC 677 to enjoy similar functionality, namely interacting with a token-handling smart contract in one transaction, without having to set an allowance first. Instead, an allowance needs to be set only once, namely for this contract. Further, it supports automatic conversion from Ether to the payment currency through Uniswap.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/shares/PaymentHubKyber.sol\":\"PaymentHubKyber\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"src/interfaces/ITokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied from https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/UniswapV2Router02.sol\\npragma solidity ^0.8.0;\\n\\ninterface ITokenReceiver {\\n\\n    function onTokenTransfer(address token, address from, uint256 amount, bytes calldata data) external;\\n\\n}\",\"keccak256\":\"0xd9b831bb8a9eed0428b87351af0087934ee3682294fe918d5db7a7447446e4c1\",\"license\":\"MIT\"},\"src/interfaces/IUniswapV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoter.sol\\npragma solidity ^0.8.0;\\n\\ninterface IQuoter {\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountIn);\\n    \\n    function WETH9() external view returns (address);\\n}\\n\\ninterface ISwapRouter {\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n    \\n    function refundETH() external payable;\\n}\",\"keccak256\":\"0x56f5ae1ba9aa1785613be94efccf1558717bc8059a4dfb02443a12d44be309af\",\"license\":\"MIT\"},\"src/interfaces/kyber/IDMMExchangeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @dev an simple interface for integration dApp to swap\\ninterface IDMMExchangeRouter {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata poolsPath,\\n        IERC20[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata poolsPath,\\n        IERC20[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata poolsPath,\\n        IERC20[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata poolsPath,\\n        IERC20[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata poolsPath,\\n        IERC20[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata poolsPath,\\n        IERC20[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(\\n        uint256 amountIn,\\n        address[] calldata poolsPath,\\n        IERC20[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(\\n        uint256 amountOut,\\n        address[] calldata poolsPath,\\n        IERC20[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n}\",\"keccak256\":\"0x668b3560e70a6e68d38e54053a0f6d9a49a42e07845e2f109e5eb3279fc979d4\",\"license\":\"BUSL-1.1\"},\"src/interfaces/kyber/IDMMFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDMMFactory {\\n    function createPool(\\n        IERC20 tokenA,\\n        IERC20 tokenB,\\n        uint32 ampBps\\n    ) external returns (address pool);\\n\\n    function setFeeConfiguration(address feeTo, uint16 governmentFeeBps) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function getFeeConfiguration() external view returns (address feeTo, uint16 governmentFeeBps);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function allPools(uint256) external view returns (address pool);\\n\\n    function allPoolsLength() external view returns (uint256);\\n\\n    function getUnamplifiedPool(IERC20 token0, IERC20 token1) external view returns (address);\\n\\n    function getPools(IERC20 token0, IERC20 token1)\\n        external\\n        view\\n        returns (address[] memory _tokenPools);\\n\\n    function isPool(\\n        IERC20 token0,\\n        IERC20 token1,\\n        address pool\\n    ) external view returns (bool);\\n}\",\"keccak256\":\"0x62772ba94a1bff0b7b5554992397c5e332b6af720e3d2fa52cfc0a3f9ab8d985\",\"license\":\"BUSL-1.1\"},\"src/interfaces/kyber/IDMMLiquidityRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @dev an simple interface for integration dApp to contribute liquidity\\ninterface IDMMLiquidityRouter {\\n    /**\\n     * @param tokenA address of token in the pool\\n     * @param tokenB address of token in the pool\\n     * @param pool the address of the pool\\n     * @param amountADesired the amount of tokenA users want to add to the pool\\n     * @param amountBDesired the amount of tokenB users want to add to the pool\\n     * @param amountAMin bounds to the extents to which amountB/amountA can go up\\n     * @param amountBMin bounds to the extents to which amountB/amountA can go down\\n     * @param vReserveRatioBounds bounds to the extents to which vReserveB/vReserveA can go (precision: 2 ** 112)\\n     * @param to Recipient of the liquidity tokens.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     */\\n    function addLiquidity(\\n        IERC20 tokenA,\\n        IERC20 tokenB,\\n        address pool,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        uint256[2] calldata vReserveRatioBounds,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityNewPool(\\n        IERC20 tokenA,\\n        IERC20 tokenB,\\n        uint32 ampBps,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityNewPoolETH(\\n        IERC20 token,\\n        uint32 ampBps,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    /**\\n     * @param token address of token in the pool\\n     * @param pool the address of the pool\\n     * @param amountTokenDesired the amount of token users want to add to the pool\\n     * @dev   msg.value equals to amountEthDesired\\n     * @param amountTokenMin bounds to the extents to which WETH/token can go up\\n     * @param amountETHMin bounds to the extents to which WETH/token can go down\\n     * @param vReserveRatioBounds bounds to the extents to which vReserveB/vReserveA can go (precision: 2 ** 112)\\n     * @param to Recipient of the liquidity tokens.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     */\\n    function addLiquidityETH(\\n        IERC20 token,\\n        address pool,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        uint256[2] calldata vReserveRatioBounds,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    /**\\n     * @param tokenA address of token in the pool\\n     * @param tokenB address of token in the pool\\n     * @param pool the address of the pool\\n     * @param liquidity the amount of lp token users want to burn\\n     * @param amountAMin the minimum token retuned after burning\\n     * @param amountBMin the minimum token retuned after burning\\n     * @param to Recipient of the returned tokens.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     */\\n    function removeLiquidity(\\n        IERC20 tokenA,\\n        IERC20 tokenB,\\n        address pool,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    /**\\n     * @param tokenA address of token in the pool\\n     * @param tokenB address of token in the pool\\n     * @param pool the address of the pool\\n     * @param liquidity the amount of lp token users want to burn\\n     * @param amountAMin the minimum token retuned after burning\\n     * @param amountBMin the minimum token retuned after burning\\n     * @param to Recipient of the returned tokens.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @param approveMax whether users permit the router spending max lp token or not.\\n     * @param r s v Signature of user to permit the router spending lp token\\n     */\\n    function removeLiquidityWithPermit(\\n        IERC20 tokenA,\\n        IERC20 tokenB,\\n        address pool,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    /**\\n     * @param token address of token in the pool\\n     * @param pool the address of the pool\\n     * @param liquidity the amount of lp token users want to burn\\n     * @param amountTokenMin the minimum token retuned after burning\\n     * @param amountETHMin the minimum eth in wei retuned after burning\\n     * @param to Recipient of the returned tokens.\\n     * @param deadline Unix timestamp after which the transaction will revert\\n     */\\n    function removeLiquidityETH(\\n        IERC20 token,\\n        address pool,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    /**\\n     * @param token address of token in the pool\\n     * @param pool the address of the pool\\n     * @param liquidity the amount of lp token users want to burn\\n     * @param amountTokenMin the minimum token retuned after burning\\n     * @param amountETHMin the minimum eth in wei retuned after burning\\n     * @param to Recipient of the returned tokens.\\n     * @param deadline Unix timestamp after which the transaction will revert\\n     * @param approveMax whether users permit the router spending max lp token\\n     * @param r s v signatures of user to permit the router spending lp token.\\n     */\\n    function removeLiquidityETHWithPermit(\\n        IERC20 token,\\n        address pool,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    /**\\n     * @param amountA amount of 1 side token added to the pool\\n     * @param reserveA current reserve of the pool\\n     * @param reserveB current reserve of the pool\\n     * @return amountB amount of the other token added to the pool\\n     */\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n}\",\"keccak256\":\"0xcb761041224b7f78aeaa393b623d33a2e6f7e14acf4d09cbb2b54df63232ca04\",\"license\":\"BUSL-1.1\"},\"src/interfaces/kyber/IDMMRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IWETH.sol\\\";\\nimport \\\"./IDMMExchangeRouter.sol\\\";\\nimport \\\"./IDMMLiquidityRouter.sol\\\";\\n\\n/// @dev full interface for router\\ninterface IDMMRouter01 is IDMMExchangeRouter, IDMMLiquidityRouter {\\n    function factory() external pure returns (address);\\n\\n    function weth() external pure returns (IWETH);\\n}\",\"keccak256\":\"0x3c436fc749eefb1fd11e704af7a3de84aa20547d67d5f5f3cb74f52d026b8d30\",\"license\":\"BUSL-1.1\"},\"src/interfaces/kyber/IDMMRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDMMRouter01.sol\\\";\\n\\ninterface IDMMRouter02 is IDMMRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        IERC20 token,\\n        address pool,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        IERC20 token,\\n        address pool,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata poolsPath,\\n        IERC20[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata poolsPath,\\n        IERC20[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata poolsPath,\\n        IERC20[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\",\"keccak256\":\"0x5a6346ad891c23505269b1e8312d172b2cb7c17ad0d41658b7b759604ed9f378\",\"license\":\"BUSL-1.1\"},\"src/interfaces/kyber/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\",\"keccak256\":\"0x547712f0bf216a195777fc740be7203f70f6d5618262af9ab7a89ea795322350\",\"license\":\"GPL-3.0-or-later\"},\"src/shares/PaymentHubKyber.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2020 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../interfaces/IUniswapV3.sol\\\";\\nimport \\\"../interfaces/ITokenReceiver.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"../interfaces/kyber/IDMMRouter02.sol\\\";\\nimport \\\"../interfaces/kyber/IDMMFactory.sol\\\";\\n\\n/**\\n * A hub for payments. This allows tokens that do not support ERC 677 to enjoy similar functionality,\\n * namely interacting with a token-handling smart contract in one transaction, without having to set an allowance first.\\n * Instead, an allowance needs to be set only once, namely for this contract.\\n * Further, it supports automatic conversion from Ether to the payment currency through Uniswap.\\n */\\ncontract PaymentHubKyber {\\n\\n    IDMMRouter02 public dmmRouter;\\n\\n    address public immutable currency;\\n\\n    constructor(address _currency, IDMMRouter02 _dmmRouter) {\\n        dmmRouter = _dmmRouter;\\n        currency = _currency;\\n    }\\n\\n    function getPoolPath(IERC20 currencyIn, IERC20 currencyOut) private view returns (address[] memory){\\n        IDMMFactory dmmFactory = IDMMFactory(dmmRouter.factory());\\n        address poolAddress = dmmFactory.getUnamplifiedPool(currencyIn, currencyOut);\\n        // use unamplified pool\\n        address[] memory poolsPath = new address[](1);\\n        poolsPath[0] = poolAddress;\\n        return poolsPath;\\n    }\\n\\n    function getPath() private view returns (IERC20[] memory)  {\\n        IERC20[] memory path = new IERC20[](2);\\n        path[0] = dmmRouter.weth();\\n        path[1] = IERC20(currency);\\n        return path;\\n    }\\n\\n    function getPriceInEther(uint256 amountOfBaseCurrency) public view returns (uint256[] memory amounts) {\\n        IERC20[] memory path = getPath();\\n        address[] memory poolsPath = getPoolPath(dmmRouter.weth(), IERC20(currency));\\n\\n        return dmmRouter.getAmountsIn(amountOfBaseCurrency, poolsPath, path);\\n    }\\n\\n    /**\\n     * Convenience method to swap ether into currency and pay a target address\\n     */\\n    function payFromEther(address recipient, uint256 baseCurrencyAmount) payable public {\\n        IERC20 weth = dmmRouter.weth();\\n        uint256[] memory amountIn = getPriceInEther(baseCurrencyAmount);\\n        // transfer ETH to contract to use for swap\\n        require(weth.transferFrom(msg.sender, address(this), amountIn[0]), 'transferFrom failed');\\n\\n        // approve dmmRouter to use ETH\\n        require(weth.approve(address(dmmRouter), amountIn[0]), 'approve failed');\\n\\n        // swap tokens\\n        uint[] memory amounts = dmmRouter.swapTokensForExactTokens(\\n            baseCurrencyAmount,\\n            amountIn[0],\\n            getPoolPath(weth, IERC20(currency)),\\n            getPath(),\\n            recipient,\\n            block.timestamp\\n        );\\n    }\\n\\n    function multiPay(address[] calldata recipients, uint256[] calldata amounts) external {\\n        multiPay(currency, recipients, amounts);\\n    }\\n\\n    function multiPay(address token, address[] calldata recipients, uint256[] calldata amounts) public {\\n        for (uint i=0; i<recipients.length; i++) {\\n            IERC20(token).transferFrom(msg.sender, recipients[i], amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * Can (at least in theory) save some gas as the sender balance only is touched in one transaction.\\n     */\\n    function multiPayAndNotify(address token, address[] calldata recipients, uint256[] calldata amounts, bytes calldata ref) external {\\n        for (uint i=0; i<recipients.length; i++) {\\n            payAndNotify(token, recipients[i], amounts[i], ref);\\n        }\\n    }\\n\\n    // Allows to make a payment from the sender to an address given an allowance to this contract\\n    // Equivalent to xchf.transferAndCall(recipient, xchfamount)\\n    function payAndNotify(address recipient, uint256 baseCurrencyAmount, bytes calldata ref) external {\\n        payAndNotify(currency, recipient, baseCurrencyAmount, ref);\\n    }\\n\\n    function payAndNotify(address token, address recipient, uint256 amount, bytes calldata ref) public {\\n        IERC20(token).transferFrom(msg.sender, recipient, amount);\\n        ITokenReceiver(recipient).onTokenTransfer(token, msg.sender, amount, ref);\\n    }\\n\\n    function payFromEtherAndNotify(address recipient, uint256 baseCurrencyAmount, bytes calldata ref) payable external {\\n        //payFromEther(recipient, baseCurrencyAmount);\\n        ITokenReceiver(recipient).onTokenTransfer(address(currency), msg.sender, baseCurrencyAmount, ref);\\n    }\\n\\n    /**\\n     * In case tokens have been accidentally sent directly to this contract.\\n     * Make sure to be fast as anyone can call this!\\n     */\\n    function recover(address ercAddress, address to, uint256 amount) external {\\n        IERC20(ercAddress).transfer(to, amount);\\n    }\\n\\n    // Important to receive ETH refund from Uniswap\\n    receive() payable external {}\\n}\",\"keccak256\":\"0x7ea40e379b37e4e3d6b80a933dcf981851a277ea0b6bef30ba86a3483bede918\",\"license\":\"LicenseRef-Aktionariat\"},\"src/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\\n// and modified it.\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 weiValue) internal returns (bytes memory) {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        require(data.length == 0 || isContract(target));\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // TODO: I think this does not lead to correct error messages.\\n            revert(string(returndata));\\n        }\\n    }\\n}\",\"keccak256\":\"0xf1617d3b3e1175ccb1dbbee9df882a441f886d77282ae786ac05f4cee0731e44\",\"license\":\"MIT\"},\"src/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n//\\n// Modifications:\\n// - Replaced Context._msgSender() with msg.sender\\n// - Made leaner\\n// - Extracted interface\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor (address initialOwner) {\\n        owner = initialOwner;\\n        emit OwnershipTransferred(address(0), owner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"not owner\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0x1104f456d1ee340a1674c34f132578b599d8fd1a8e12e57d5a7691de1191caca\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516114d33803806114d383398101604081905261002f91610064565b600080546001600160a01b0319166001600160a01b039290921691909117905560601b6001600160601b0319166080526100b6565b6000806040838503121561007757600080fd5b82516100828161009e565b60208401519092506100938161009e565b809150509250929050565b6001600160a01b03811681146100b357600080fd5b50565b60805160601c6113d56100fe6000396000818161021001528181610256015281816102c3015281816104de0152818161059f0152818161091d0152610b9601526113d56000f3fe6080604052600436106100a05760003560e01c8063568f325411610064578063568f32541461015e5780639520bd461461017e578063ae539d801461019e578063b5a1ad92146101cb578063d3b3ca77146101de578063e5a6b10f146101fe57600080fd5b8063040c037a146100ac57806317f565d2146100c157806319ca9178146100e15780631c9af2e31461011e5780631ec82cb81461013e57600080fd5b366100a757005b600080fd5b6100bf6100ba366004611015565b610232565b005b3480156100cd57600080fd5b506100bf6100dc366004611015565b6102be565b3480156100ed57600080fd5b50600054610101906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561012a57600080fd5b506100bf610139366004610eca565b6102f1565b34801561014a57600080fd5b506100bf610159366004610e16565b6103ef565b34801561016a57600080fd5b506100bf610179366004610f3c565b610471565b34801561018a57600080fd5b506100bf610199366004611071565b6104d9565b3480156101aa57600080fd5b506101be6101b93660046111b8565b610506565b6040516101159190611269565b6100bf6101d9366004610fe9565b610654565b3480156101ea57600080fd5b506100bf6101f9366004610e57565b6109c2565b34801561020a57600080fd5b506101017f000000000000000000000000000000000000000000000000000000000000000081565b604051631afc0d9560e31b81526001600160a01b0385169063d7e06ca890610286907f0000000000000000000000000000000000000000000000000000000000000000903390889088908890600401611215565b600060405180830381600087803b1580156102a057600080fd5b505af11580156102b4573d6000803e3d6000fd5b5050505050505050565b6102eb7f0000000000000000000000000000000000000000000000000000000000000000858585856109c2565b50505050565b60005b838110156103e757856001600160a01b03166323b872dd3387878581811061031e5761031e61135b565b90506020020160208101906103339190610dd5565b8686868181106103455761034561135b565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401602060405180830381600087803b15801561039c57600080fd5b505af11580156103b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d49190611196565b50806103df81611332565b9150506102f4565b505050505050565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b15801561043957600080fd5b505af115801561044d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102eb9190611196565b60005b858110156102b4576104c7888888848181106104925761049261135b565b90506020020160208101906104a79190610dd5565b8787858181106104b9576104b961135b565b9050602002013586866109c2565b806104d181611332565b915050610474565b6102eb7f0000000000000000000000000000000000000000000000000000000000000000858585856102f1565b60606000610512610ab8565b905060006105c360008054906101000a90046001600160a01b03166001600160a01b0316633fc8cef36040518163ffffffff1660e01b815260040160206040518083038186803b15801561056557600080fd5b505afa158015610579573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059d9190610df9565b7f0000000000000000000000000000000000000000000000000000000000000000610be5565b6000546040516313c4d36d60e31b81529192506001600160a01b031690639e269b68906105f8908790859087906004016112ad565b60006040518083038186803b15801561061057600080fd5b505afa158015610624573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261064c91908101906110d1565b949350505050565b60008060009054906101000a90046001600160a01b03166001600160a01b0316633fc8cef36040518163ffffffff1660e01b815260040160206040518083038186803b1580156106a357600080fd5b505afa1580156106b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106db9190610df9565b905060006106e883610506565b9050816001600160a01b03166323b872dd33308460008151811061070e5761070e61135b565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b15801561076857600080fd5b505af115801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a09190611196565b6107e75760405162461bcd60e51b81526020600482015260136024820152721d1c985b9cd9995c919c9bdb4819985a5b1959606a1b60448201526064015b60405180910390fd5b816001600160a01b031663095ea7b360008054906101000a90046001600160a01b03168360008151811061081d5761081d61135b565b60200260200101516040518363ffffffff1660e01b81526004016108569291906001600160a01b03929092168252602082015260400190565b602060405180830381600087803b15801561087057600080fd5b505af1158015610884573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a89190611196565b6108e55760405162461bcd60e51b815260206004820152600e60248201526d185c1c1c9bdd994819985a5b195960921b60448201526064016107de565b6000805482516001600160a01b039091169063ae8290b79086908590859061090f5761090f61135b565b6020026020010151610941877f0000000000000000000000000000000000000000000000000000000000000000610be5565b610949610ab8565b8a426040518763ffffffff1660e01b815260040161096c969594939291906112e2565b600060405180830381600087803b15801561098657600080fd5b505af115801561099a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103e791908101906110d1565b6040516323b872dd60e01b81523360048201526001600160a01b038581166024830152604482018590528616906323b872dd90606401602060405180830381600087803b158015610a1257600080fd5b505af1158015610a26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4a9190611196565b50604051631afc0d9560e31b81526001600160a01b0385169063d7e06ca890610a7f9088903390889088908890600401611215565b600060405180830381600087803b158015610a9957600080fd5b505af1158015610aad573d6000803e3d6000fd5b505050505050505050565b6040805160028082526060808301845292600092919060208301908036833701905050905060008054906101000a90046001600160a01b03166001600160a01b0316633fc8cef36040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2957600080fd5b505afa158015610b3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b619190610df9565b81600081518110610b7457610b7461135b565b60200260200101906001600160a01b031690816001600160a01b0316815250507f000000000000000000000000000000000000000000000000000000000000000081600181518110610bc857610bc861135b565b6001600160a01b0390921660209283029190910190910152919050565b600080546040805163c45a015560e01b81529051606093926001600160a01b03169163c45a0155916004808301926020929190829003018186803b158015610c2c57600080fd5b505afa158015610c40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c649190610df9565b604051631ec124bf60e11b81526001600160a01b0386811660048301528581166024830152919250600091831690633d82497e9060440160206040518083038186803b158015610cb357600080fd5b505afa158015610cc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ceb9190610df9565b60408051600180825281830190925291925060009190602080830190803683370190505090508181600081518110610d2557610d2561135b565b6001600160a01b03909216602092830291909101909101529250505092915050565b60008083601f840112610d5957600080fd5b50813567ffffffffffffffff811115610d7157600080fd5b6020830191508360208260051b8501011115610d8c57600080fd5b9250929050565b60008083601f840112610da557600080fd5b50813567ffffffffffffffff811115610dbd57600080fd5b602083019150836020828501011115610d8c57600080fd5b600060208284031215610de757600080fd5b8135610df281611387565b9392505050565b600060208284031215610e0b57600080fd5b8151610df281611387565b600080600060608486031215610e2b57600080fd5b8335610e3681611387565b92506020840135610e4681611387565b929592945050506040919091013590565b600080600080600060808688031215610e6f57600080fd5b8535610e7a81611387565b94506020860135610e8a81611387565b935060408601359250606086013567ffffffffffffffff811115610ead57600080fd5b610eb988828901610d93565b969995985093965092949392505050565b600080600080600060608688031215610ee257600080fd5b8535610eed81611387565b9450602086013567ffffffffffffffff80821115610f0a57600080fd5b610f1689838a01610d47565b90965094506040880135915080821115610f2f57600080fd5b50610eb988828901610d47565b60008060008060008060006080888a031215610f5757600080fd5b8735610f6281611387565b9650602088013567ffffffffffffffff80821115610f7f57600080fd5b610f8b8b838c01610d47565b909850965060408a0135915080821115610fa457600080fd5b610fb08b838c01610d47565b909650945060608a0135915080821115610fc957600080fd5b50610fd68a828b01610d93565b989b979a50959850939692959293505050565b60008060408385031215610ffc57600080fd5b823561100781611387565b946020939093013593505050565b6000806000806060858703121561102b57600080fd5b843561103681611387565b935060208501359250604085013567ffffffffffffffff81111561105957600080fd5b61106587828801610d93565b95989497509550505050565b6000806000806040858703121561108757600080fd5b843567ffffffffffffffff8082111561109f57600080fd5b6110ab88838901610d47565b909650945060208701359150808211156110c457600080fd5b5061106587828801610d47565b600060208083850312156110e457600080fd5b825167ffffffffffffffff808211156110fc57600080fd5b818501915085601f83011261111057600080fd5b81518181111561112257611122611371565b8060051b604051601f19603f8301168101818110858211171561114757611147611371565b604052828152858101935084860182860187018a101561116657600080fd5b600095505b8386101561118957805185526001959095019493860193860161116b565b5098975050505050505050565b6000602082840312156111a857600080fd5b81518015158114610df257600080fd5b6000602082840312156111ca57600080fd5b5035919050565b600081518084526020808501945080840160005b8381101561120a5781516001600160a01b0316875295820195908201906001016111e5565b509495945050505050565b6001600160a01b038681168252851660208201526040810184905260806060820181905281018290526000828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156112a157835183529284019291840191600101611285565b50909695505050505050565b8381526060602082015260006112c660608301856111d1565b82810360408401526112d881856111d1565b9695505050505050565b86815285602082015260c06040820152600061130160c08301876111d1565b828103606084015261131381876111d1565b6001600160a01b03959095166080840152505060a00152949350505050565b600060001982141561135457634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461139c57600080fd5b5056fea2646970667358221220302b7c28ed97775942b827cfd41718e48331093f111026b10410f7d54a84d88864736f6c63430008070033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "multiPayAndNotify(address,address[],uint256[],bytes)": {
        "notice": "Can (at least in theory) save some gas as the sender balance only is touched in one transaction."
      },
      "payFromEther(address,uint256)": {
        "notice": "Convenience method to swap ether into currency and pay a target address"
      },
      "recover(address,address,uint256)": {
        "notice": "In case tokens have been accidentally sent directly to this contract. Make sure to be fast as anyone can call this!"
      }
    },
    "notice": "A hub for payments. This allows tokens that do not support ERC 677 to enjoy similar functionality, namely interacting with a token-handling smart contract in one transaction, without having to set an allowance first. Instead, an allowance needs to be set only once, namely for this contract. Further, it supports automatic conversion from Ether to the payment currency through Uniswap.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9733,
        "contract": "src/shares/PaymentHubKyber.sol:PaymentHubKyber",
        "label": "dmmRouter",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IDMMRouter02)3518"
      }
    ],
    "types": {
      "t_contract(IDMMRouter02)3518": {
        "encoding": "inplace",
        "label": "contract IDMMRouter02",
        "numberOfBytes": "20"
      }
    }
  }
}